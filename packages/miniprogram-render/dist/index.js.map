{"version":3,"sources":["index.js","util\\tool.js","util\\cache.js","window.js","document.js","event\\event-target.js","event\\event.js","event\\custom-event.js","tree\\tree.js","tree\\query-selector.js","node\\node.js","node\\element.js","node\\class-list.js","util\\pool.js","node\\style.js","node\\style-list.js","node\\attribute.js","tree\\parser.js","node\\text-node.js","node\\comment.js","node\\element\\a.js","bom\\location.js","node\\element\\image.js","node\\element\\input.js","node\\element\\textarea.js","node\\element\\video.js","node\\element\\canvas.js","node\\element\\not-support.js","node\\element\\wx-component.js","node\\element\\wx-custom-component.js","bom\\cookie.js","bom\\navigator.js","bom\\screen.js","bom\\history.js","bom\\miniprogram.js","bom\\local-storage.js","bom\\session-storage.js","bom\\performance.js","bom\\xml-http-request.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA,AENA;AHUA,AENA,ADGA,AENA;AHUA,AENA,ADGA,AENA;ACFA,AJYA,AENA,ADGA,AENA;ACFA,AJYA,AENA,ADGA,AENA;ACFA,AJYA,AENA,ADGA,AENA;ACFA,ACHA,ALeA,AENA,ADGA,AENA;ACFA,ACHA,ALeA,AENA,ADGA,AENA;ACFA,ACHA,ALeA,AENA,ADGA,AENA;ACFA,ACHA,ACHA,ANkBA,AENA,ADGA,AENA;ACFA,ACHA,ACHA,ANkBA,AENA,ADGA,AENA;ACFA,ACHA,ACHA,ANkBA,AENA,ADGA,AENA;ACFA,AGTA,AFMA,ACHA,ANkBA,AENA,ADGA,AENA;ACFA,AGTA,AFMA,ACHA,ANkBA,AENA,ADGA,AENA;ACFA,AGTA,AFMA,ACHA,ANkBA,AENA,ADGA,AENA;ACFA,AGTA,AFMA,ACHA,ANkBA,AQxBA,ANkBA,ADGA,AENA;ACFA,AGTA,AFMA,ACHA,ANkBA,AQxBA,ANkBA,ADGA,AENA;ACFA,AGTA,AFMA,ACHA,ANkBA,AQxBA,ANkBA,ADGA,AENA;ACFA,AGTA,AFMA,ACHA,ANkBA,AS3BA,ADGA,ANkBA,ADGA,AENA;ACFA,AGTA,AFMA,ACHA,ANkBA,AS3BA,ADGA,ANkBA,ADGA,AENA;ACFA,AGTA,AFMA,ACHA,ANkBA,AS3BA,ADGA,ANkBA,ADGA,AENA;ACFA,AGTA,AFMA,ACHA,ANkBA,AU9BA,ADGA,ADGA,ANkBA,ADGA,AENA;ACFA,AGTA,AFMA,ACHA,ANkBA,AU9BA,ADGA,ADGA,ANkBA,ADGA,AENA;ACFA,AGTA,AFMA,ACHA,ANkBA,AU9BA,ADGA,ADGA,ANkBA,ADGA,AENA;ACFA,AGTA,AFMA,ACHA,ANkBA,AWjCA,ADGA,ADGA,ADGA,ANkBA,ADGA,AENA;ACFA,ACHA,ACHA,ANkBA,AWjCA,ADGA,ADGA,ADGA,ANkBA,ADGA,AENA;ACFA,ACHA,ACHA,ANkBA,AWjCA,ADGA,ADGA,ADGA,ANkBA,ADGA,AENA;ACFA,ACHA,ACHA,ANkBA,AYpCA,ADGA,ADGA,ADGA,ADGA,ANkBA,ADGA,AENA;ACFA,ACHA,ACHA,ANkBA,AYpCA,ADGA,ADGA,ADGA,ADGA,ANkBA,ADGA,AENA;ACFA,ACHA,ACHA,ANkBA,AYpCA,ADGA,ADGA,ADGA,ADGA,ANkBA,ADGA,AENA;ACFA,ACHA,ACHA,ANkBA,AYpCA,ADGA,ADGA,ADGA,ADGA,ANkBA,AWjCA,AZoCA,AENA;ACFA,ACHA,ACHA,ANkBA,AYpCA,ADGA,ADGA,ADGA,ADGA,ANkBA,AWjCA,AZoCA,AENA;ACFA,ACHA,ACHA,ANkBA,AYpCA,ADGA,ADGA,ADGA,ADGA,ANkBA,AWjCA,AZoCA,AENA;ACFA,ACHA,ACHA,AMlBA,ADGA,ADGA,AIZA,ALeA,ADGA,ANkBA,AWjCA,AZoCA,AENA;ACFA,ACHA,ACHA,AMlBA,ADGA,ADGA,AIZA,ALeA,ADGA,ANkBA,AWjCA,AZoCA,AENA;ACFA,ACHA,ACHA,AMlBA,ADGA,ADGA,AIZA,ALeA,ADGA,ANkBA,AWjCA,AZoCA,AENA;ACFA,ACHA,ACHA,AMlBA,ADGA,ADGA,AKfA,ADGA,ALeA,ADGA,ANkBA,AWjCA,AZoCA,AENA;ACFA,ACHA,ACHA,AMlBA,ADGA,ADGA,AKfA,ADGA,ALeA,ADGA,ANkBA,AWjCA,AZoCA,AENA;ACFA,ACHA,ACHA,AMlBA,ADGA,ADGA,AKfA,ADGA,ALeA,ADGA,ANkBA,AWjCA,AZoCA,AENA;ACFA,ACHA,ACHA,AU9BA,AJYA,ADGA,ADGA,AKfA,ADGA,ALeA,ADGA,ANkBA,AWjCA,AZoCA,AENA;ACFA,ACHA,ACHA,AU9BA,AJYA,ADGA,ADGA,AKfA,ADGA,ALeA,ADGA,ANkBA,AWjCA,AZoCA,AENA;ACFA,ACHA,ACHA,AU9BA,AJYA,ADGA,ADGA,AKfA,ADGA,ALeA,ADGA,ANkBA,AWjCA,AZoCA,AENA;ACFA,ACHA,ACHA,AU9BA,AJYA,ADGA,ADGA,AKfA,ADGA,AGTA,ARwBA,ADGA,ANkBA,AWjCA,AZoCA,AENA;ACFA,ACHA,ACHA,AU9BA,AJYA,ADGA,ADGA,AKfA,ADGA,AGTA,ARwBA,ADGA,ANkBA,AWjCA,AZoCA,AENA;ACFA,ACHA,ACHA,AU9BA,AJYA,ADGA,ADGA,AKfA,ADGA,AGTA,ARwBA,ADGA,ANkBA,AWjCA,AZoCA,AENA;ACFA,ACHA,ACHA,AU9BA,AJYA,ADGA,ADGA,AKfA,ADGA,AIZA,ADGA,ARwBA,ADGA,ANkBA,AWjCA,AZoCA,AENA;ACFA,ACHA,ACHA,AU9BA,AJYA,ADGA,ADGA,AKfA,ADGA,AIZA,ADGA,ARwBA,ADGA,ANkBA,AWjCA,AZoCA,AENA;ACFA,ACHA,ACHA,AU9BA,AJYA,ADGA,ADGA,AKfA,ADGA,AIZA,ADGA,ARwBA,ADGA,ANkBA,AWjCA,AZoCA,AENA;ACFA,ACHA,ACHA,AU9BA,AJYA,AOrBA,ARwBA,ADGA,AKfA,ADGA,AIZA,ADGA,ARwBA,ADGA,ANkBA,AWjCA,AZoCA,AENA;ACFA,ACHA,ACHA,AU9BA,AJYA,AOrBA,ARwBA,ADGA,AKfA,ADGA,AIZA,ADGA,ARwBA,ADGA,ANkBA,AWjCA,AZoCA,AENA;ACFA,ACHA,ACHA,AU9BA,AJYA,AOrBA,ARwBA,ADGA,AKfA,ADGA,AIZA,ADGA,ARwBA,ADGA,ANkBA,AWjCA,AZoCA,AENA;ACFA,ACHA,ACHA,AU9BA,AJYA,AOrBA,ARwBA,AS3BA,AV8BA,AKfA,ADGA,AIZA,ADGA,ARwBA,ADGA,ANkBA,AWjCA,AZoCA,AENA;ACFA,ACHA,ACHA,AU9BA,AJYA,AOrBA,ARwBA,AS3BA,AV8BA,AKfA,ADGA,AIZA,ADGA,ARwBA,ADGA,ANkBA,AWjCA,AZoCA,AENA;ACFA,ACHA,ACHA,AU9BA,AJYA,AOrBA,ARwBA,AS3BA,AV8BA,AKfA,ADGA,AIZA,ADGA,ARwBA,ADGA,ANkBA,AWjCA,AZoCA,AENA;AkBrDA,AjBmDA,ACHA,ACHA,AU9BA,AJYA,AOrBA,ARwBA,AS3BA,AV8BA,AKfA,ADGA,AIZA,ADGA,ARwBA,ADGA,ANkBA,AWjCA,AZoCA,AENA;AkBrDA,AjBmDA,ACHA,ACHA,AU9BA,AJYA,AOrBA,ARwBA,AS3BA,AV8BA,AKfA,ADGA,AIZA,ADGA,ARwBA,ADGA,ANkBA,ADGA,AENA;AkBrDA,AjBmDA,ACHA,ACHA,AU9BA,AJYA,AOrBA,ARwBA,AS3BA,AV8BA,AKfA,ADGA,AIZA,ADGA,ARwBA,ADGA,ANkBA,ADGA,AENA;AkBrDA,AjBmDA,ACHA,ACHA,AU9BA,AJYA,AOrBA,ARwBA,AS3BA,AENA,AZoCA,AKfA,ADGA,AIZA,ADGA,ARwBA,ADGA,ANkBA,ADGA,AENA;AkBrDA,AjBmDA,ACHA,ACHA,AU9BA,AJYA,AOrBA,ARwBA,AS3BA,AENA,AZoCA,AKfA,ADGA,AIZA,ADGA,ARwBA,ADGA,ANkBA,ADGA,AENA;AkBrDA,AjBmDA,ACHA,ACHA,AU9BA,AJYA,AOrBA,ARwBA,AS3BA,AENA,AZoCA,AKfA,ADGA,AIZA,ADGA,ARwBA,ADGA,ANkBA,ADGA,AENA;AkBrDA,AjBmDA,ACHA,ACHA,AU9BA,AJYA,AOrBA,ARwBA,AS3BA,AENA,ACHA,AbuCA,AKfA,ADGA,AIZA,ADGA,ARwBA,ADGA,ANkBA,ADGA,AENA;AkBrDA,AjBmDA,ACHA,ACHA,AU9BA,AJYA,AOrBA,ARwBA,AS3BA,AENA,ACHA,AbuCA,AKfA,ADGA,AIZA,ADGA,ARwBA,ADGA,ANkBA,ADGA,AENA;AkBrDA,AjBmDA,ACHA,ACHA,AU9BA,AJYA,AOrBA,ARwBA,AS3BA,AENA,ACHA,AbuCA,AKfA,ADGA,AIZA,ADGA,ARwBA,ADGA,ANkBA,ADGA,AENA;AkBrDA,AjBmDA,ACHA,ACHA,AU9BA,AJYA,AOrBA,ARwBA,AS3BA,AENA,ACHA,ACHA,Ad0CA,AKfA,ADGA,AIZA,ADGA,ARwBA,ADGA,ANkBA,ADGA,AENA;AkBrDA,AjBmDA,ACHA,ACHA,AU9BA,AJYA,AOrBA,ARwBA,AS3BA,AENA,ACHA,ACHA,Ad0CA,AIZA,AIZA,ADGA,ARwBA,ADGA,ANkBA,ADGA,AENA;AkBrDA,AjBmDA,ACHA,ACHA,AU9BA,AJYA,AOrBA,ARwBA,AS3BA,AENA,ACHA,ACHA,Ad0CA,AIZA,AIZA,ADGA,ARwBA,ADGA,ANkBA,ADGA,AENA;AkBrDA,AjBmDA,ACHA,ACHA,AU9BA,AJYA,AOrBA,ARwBA,AS3BA,AENA,ACHA,ACHA,ACHA,Af6CA,AIZA,AIZA,ADGA,ARwBA,ADGA,ANkBA,ADGA,AENA;AkBrDA,AjBmDA,ACHA,ACHA,AU9BA,AJYA,AOrBA,ARwBA,AS3BA,AENA,ACHA,ACHA,ACHA,Af6CA,AIZA,AIZA,ADGA,ARwBA,ADGA,ANkBA,ADGA,AENA;AkBrDA,AjBmDA,ACHA,ACHA,AU9BA,AJYA,AOrBA,ARwBA,AS3BA,AENA,ACHA,ACHA,ACHA,Af6CA,AIZA,AIZA,ADGA,ARwBA,ADGA,ANkBA,ADGA,AENA;AkBrDA,AjBmDA,ACHA,ACHA,AU9BA,AJYA,AOrBA,ARwBA,AS3BA,AMlBA,AJYA,ACHA,ACHA,ACHA,Af6CA,AIZA,AIZA,ADGA,ARwBA,ADGA,ANkBA,ADGA,AENA;AkBrDA,AjBmDA,ACHA,ACHA,AU9BA,AJYA,AOrBA,ARwBA,AS3BA,AMlBA,AJYA,ACHA,ACHA,ACHA,Af6CA,AIZA,AIZA,ADGA,ARwBA,ADGA,ANkBA,ADGA,AENA;AkBrDA,AjBmDA,ACHA,ACHA,AU9BA,AJYA,AOrBA,ARwBA,AS3BA,AMlBA,AJYA,ACHA,ACHA,ACHA,Af6CA,AIZA,AIZA,ADGA,ARwBA,ADGA,ANkBA,ADGA,AENA;AkBrDA,AjBmDA,ACHA,ACHA,AU9BA,AJYA,AOrBA,ARwBA,AS3BA,AMlBA,AJYA,ACHA,AIZA,AHSA,ACHA,Af6CA,AIZA,AIZA,ADGA,ARwBA,ADGA,ANkBA,ADGA,AENA;AkBrDA,AjBmDA,ACHA,ACHA,AU9BA,AJYA,AOrBA,ARwBA,AS3BA,AMlBA,AJYA,ACHA,AIZA,AHSA,ACHA,Af6CA,AIZA,AIZA,ADGA,ARwBA,ADGA,ANkBA,ADGA,AENA;AkBrDA,AjBmDA,ACHA,ACHA,AU9BA,AJYA,AOrBA,ARwBA,AS3BA,AMlBA,AJYA,ACHA,AIZA,AHSA,ACHA,Af6CA,AIZA,AIZA,ADGA,ARwBA,ADGA,ANkBA,ADGA,AENA;AkBrDA,AjBmDA,ACHA,ACHA,AU9BA,AJYA,AOrBA,ARwBA,AS3BA,AMlBA,AJYA,ACHA,AIZA,AHSA,ACHA,AGTA,AlBsDA,AIZA,AIZA,ADGA,ARwBA,ADGA,ANkBA,ADGA,AENA;AkBrDA,AjBmDA,ACHA,ACHA,AU9BA,AJYA,AOrBA,ARwBA,AS3BA,AMlBA,AJYA,ACHA,AIZA,AHSA,ACHA,AGTA,AlBsDA,AIZA,AIZA,ADGA,ARwBA,ADGA,ANkBA,ADGA,AENA;AkBrDA,AjBmDA,ACHA,ACHA,AU9BA,AJYA,AOrBA,ARwBA,AS3BA,AMlBA,AJYA,ACHA,AIZA,AHSA,ACHA,AGTA,AlBsDA,AIZA,AIZA,ADGA,ARwBA,ADGA,ANkBA,ADGA,AENA;AkBrDA,AjBmDA,ACHA,ACHA,AU9BA,AJYA,AOrBA,ARwBA,AS3BA,AMlBA,AJYA,ACHA,AIZA,AHSA,ACHA,AGTA,ACHA,AnByDA,AIZA,AIZA,ADGA,ARwBA,ADGA,ANkBA,ADGA,AENA;AkBrDA,AjBmDA,ACHA,ACHA,AU9BA,AJYA,AOrBA,ARwBA,AS3BA,AMlBA,AJYA,ACHA,AIZA,AHSA,ACHA,AGTA,ACHA,AnByDA,AIZA,AIZA,ADGA,ARwBA,ADGA,ANkBA,ADGA,AENA;AkBrDA,AjBmDA,ACHA,ACHA,AU9BA,AJYA,AOrBA,ARwBA,AS3BA,AMlBA,AJYA,ACHA,AIZA,AHSA,ACHA,AGTA,ACHA,AnByDA,AIZA,AIZA,ADGA,ARwBA,ADGA,ANkBA,ADGA,AENA;A2BhFA,AT2BA,AjBmDA,ACHA,ACHA,AU9BA,AJYA,AOrBA,ARwBA,AS3BA,AMlBA,AJYA,ACHA,AIZA,AHSA,ACHA,AGTA,ACHA,AnByDA,AIZA,AIZA,ADGA,ARwBA,ADGA,ANkBA,ADGA,AENA;A2BhFA,AT2BA,AjBmDA,ACHA,ACHA,AU9BA,AJYA,AOrBA,ARwBA,AS3BA,AMlBA,AJYA,ACHA,AIZA,AHSA,ACHA,AGTA,ACHA,AnByDA,AIZA,AIZA,ADGA,ARwBA,ADGA,ANkBA,ADGA,AENA;A2BhFA,AT2BA,AjBmDA,ACHA,ACHA,AU9BA,AJYA,AOrBA,ARwBA,AS3BA,AMlBA,AJYA,ACHA,AIZA,AHSA,ACHA,AGTA,ACHA,AnByDA,AIZA,AIZA,ADGA,ARwBA,ADGA,ANkBA,ADGA,AENA;A2BhFA,AT2BA,AU9BA,A3BiFA,ACHA,ACHA,AU9BA,AJYA,AOrBA,ARwBA,AS3BA,AMlBA,AJYA,ACHA,AIZA,AHSA,ACHA,AGTA,ACHA,AnByDA,AIZA,AIZA,ADGA,ARwBA,ADGA,ANkBA,ADGA,AENA;A2BhFA,AT2BA,AU9BA,A3BiFA,ACHA,ACHA,AU9BA,AJYA,AOrBA,ARwBA,AS3BA,AMlBA,AJYA,ACHA,AIZA,AHSA,ACHA,AGTA,ACHA,AnByDA,AIZA,AIZA,ADGA,ARwBA,ADGA,ANkBA,ADGA,AENA;A2BhFA,AT2BA,AU9BA,A3BiFA,ACHA,ACHA,AU9BA,AJYA,AOrBA,ARwBA,AS3BA,AMlBA,AJYA,ACHA,AIZA,AHSA,ACHA,AGTA,ACHA,AnByDA,AIZA,AIZA,ADGA,ARwBA,ADGA,ANkBA,ADGA,AENA;A2BhFA,AT2BA,AU9BA,ACHA,A5BoFA,ACHA,ACHA,AU9BA,AJYA,AOrBA,ARwBA,AS3BA,AMlBA,AJYA,ACHA,AIZA,AHSA,ACHA,AGTA,ACHA,AnByDA,AIZA,AIZA,ADGA,ARwBA,ADGA,ANkBA,ADGA,AENA;A2BhFA,AT2BA,AU9BA,ACHA,A5BoFA,ACHA,ACHA,AU9BA,AJYA,AOrBA,ARwBA,AS3BA,AMlBA,AJYA,ACHA,AIZA,AHSA,ACHA,AGTA,ACHA,AnByDA,AIZA,AIZA,ADGA,ARwBA,ADGA,ANkBA,ADGA,AENA;A2BhFA,AT2BA,AU9BA,ACHA,A5BoFA,ACHA,ACHA,AU9BA,AJYA,AOrBA,ARwBA,AS3BA,AMlBA,AJYA,ACHA,AIZA,AHSA,ACHA,AGTA,ACHA,AnByDA,AIZA,AIZA,ADGA,ARwBA,ADGA,ANkBA,ADGA,AENA;A2BhFA,AGTA,AZoCA,AU9BA,ACHA,A5BoFA,ACHA,ACHA,AU9BA,AJYA,AOrBA,ARwBA,AS3BA,AMlBA,AJYA,ACHA,AIZA,AHSA,ACHA,AGTA,ACHA,AnByDA,AIZA,AIZA,ADGA,ARwBA,ADGA,ANkBA,ADGA,AENA;A2BhFA,AGTA,AZoCA,AU9BA,ACHA,A5BoFA,ACHA,ACHA,AU9BA,AJYA,AOrBA,ARwBA,AS3BA,AMlBA,AJYA,ACHA,AIZA,AHSA,ACHA,AGTA,ACHA,AnByDA,AIZA,AIZA,ADGA,ARwBA,ADGA,ANkBA,ADGA,AENA;A2BhFA,AGTA,AZoCA,AU9BA,ACHA,A5BoFA,ACHA,ACHA,AU9BA,AJYA,AOrBA,ARwBA,AS3BA,AMlBA,AJYA,ACHA,AIZA,AHSA,ACHA,AGTA,ACHA,AnByDA,AIZA,AIZA,ADGA,ARwBA,ADGA,ANkBA,ADGA,AENA;A2BhFA,AGTA,AZoCA,AavCA,AHSA,ACHA,A5BoFA,ACHA,ACHA,AU9BA,AJYA,AOrBA,ARwBA,AS3BA,AMlBA,AJYA,ACHA,AIZA,AHSA,ACHA,AGTA,ACHA,AnByDA,AIZA,AIZA,ADGA,ARwBA,ADGA,APqBA,AENA;A2BhFA,AGTA,AZoCA,AavCA,AHSA,ACHA,A5BoFA,ACHA,ACHA,AU9BA,AJYA,AOrBA,ARwBA,AS3BA,AMlBA,AJYA,ACHA,AIZA,AHSA,ACHA,AGTA,ACHA,AnByDA,AIZA,AIZA,ADGA,ARwBA,ADGA,APqBA,AENA;A2BhFA,AGTA,AZoCA,AavCA,AHSA,ACHA,A5BoFA,ACHA,ACHA,AU9BA,AJYA,AOrBA,ARwBA,AS3BA,AMlBA,AJYA,ACHA,AIZA,AHSA,ACHA,AGTA,ACHA,AnByDA,AIZA,AIZA,ADGA,ARwBA,ADGA,APqBA,AENA;A2BhFA,AGTA,AENA,Ad0CA,AavCA,AHSA,ACHA,A5BoFA,ACHA,ACHA,AU9BA,AJYA,AOrBA,ARwBA,AS3BA,AMlBA,AJYA,ACHA,AIZA,AHSA,ACHA,AGTA,ACHA,AnByDA,AIZA,AIZA,ADGA,ARwBA,ADGA,APqBA,AENA;A2BhFA,AGTA,AENA,Ad0CA,AavCA,AHSA,ACHA,A5BoFA,ACHA,ACHA,AU9BA,AJYA,AOrBA,ARwBA,AS3BA,AMlBA,AJYA,ACHA,AIZA,AHSA,ACHA,AGTA,ACHA,AnByDA,AIZA,AIZA,ADGA,ARwBA,ADGA,APqBA,AENA;A2BhFA,AGTA,AENA,Ad0CA,AavCA,AHSA,ACHA,A5BoFA,ACHA,ACHA,AU9BA,AJYA,AOrBA,ARwBA,AS3BA,AMlBA,AJYA,ACHA,AIZA,AHSA,ACHA,AGTA,ACHA,AnByDA,AIZA,AIZA,ADGA,ARwBA,ADGA,APqBA,AENA;A2BhFA,AGTA,AENA,Ad0CA,AavCA,AHSA,ACHA,AIZA,AhCgGA,ACHA,ACHA,AU9BA,AJYA,AOrBA,ARwBA,AS3BA,AMlBA,AJYA,ACHA,AIZA,AHSA,ACHA,AGTA,ACHA,AnByDA,AIZA,AIZA,ADGA,ARwBA,ADGA,APqBA,AENA;A2BhFA,AGTA,AENA,Ad0CA,AavCA,AHSA,ACHA,AIZA,AhCgGA,ACHA,ACHA,AU9BA,AJYA,AOrBA,ARwBA,AS3BA,AMlBA,AJYA,ACHA,AIZA,AHSA,ACHA,AGTA,ACHA,AnByDA,AIZA,AIZA,ADGA,ARwBA,ADGA,APqBA,AENA;A2BhFA,AGTA,AENA,Ad0CA,AavCA,AHSA,ACHA,AIZA,AhCgGA,ACHA,ACHA,AU9BA,AJYA,AOrBA,ARwBA,AS3BA,AMlBA,AJYA,ACHA,AIZA,AHSA,ACHA,AGTA,ACHA,AnByDA,AIZA,AIZA,ADGA,ARwBA,ADGA,APqBA,AENA;A2BhFA,AGTA,AENA,Ad0CA,AavCA,AHSA,AMlBA,ALeA,AIZA,AhCgGA,ACHA,ACHA,AU9BA,AJYA,AOrBA,ARwBA,AS3BA,AMlBA,AJYA,ACHA,AIZA,AHSA,ACHA,AGTA,ACHA,AnByDA,AIZA,AIZA,ADGA,ARwBA,ADGA,APqBA,AENA;A2BhFA,AGTA,AENA,Ad0CA,AavCA,AHSA,AMlBA,ALeA,AIZA,AhCgGA,ACHA,ACHA,AU9BA,AJYA,AOrBA,ARwBA,AS3BA,AMlBA,AJYA,ACHA,AIZA,AHSA,ACHA,AGTA,ACHA,AnByDA,AIZA,AIZA,ADGA,ARwBA,ADGA,APqBA,AENA;A2BhFA,AGTA,AENA,Ad0CA,AavCA,AHSA,AMlBA,ALeA,AIZA,AhCgGA,ACHA,ACHA,AU9BA,AJYA,AOrBA,ARwBA,AS3BA,AMlBA,AJYA,ACHA,AIZA,AHSA,ACHA,AGTA,ACHA,AnByDA,AIZA,AIZA,ADGA,ARwBA,ADGA,APqBA,AENA;A2BhFA,AGTA,AENA,Ad0CA,AavCA,AHSA,AMlBA,ALeA,AIZA,AENA,AlCsGA,ACHA,ACHA,AU9BA,AJYA,AOrBA,ARwBA,AS3BA,AMlBA,AJYA,ACHA,AIZA,AHSA,ACHA,AGTA,ACHA,AnByDA,AIZA,AIZA,ADGA,ARwBA,ADGA,APqBA,AENA;A2BhFA,AGTA,AENA,Ad0CA,AavCA,AHSA,AMlBA,ALeA,AIZA,AENA,AlCsGA,ACHA,ACHA,AU9BA,AJYA,AOrBA,ARwBA,AS3BA,AMlBA,AJYA,ACHA,AIZA,AHSA,ACHA,AGTA,ACHA,AnByDA,AIZA,AIZA,ADGA,ARwBA,ADGA,APqBA,AENA;A2BhFA,AGTA,AENA,Ad0CA,AavCA,AHSA,AMlBA,ALeA,AIZA,AENA,AlCsGA,ACHA,ACHA,AU9BA,AJYA,AOrBA,ARwBA,AS3BA,AMlBA,AJYA,ACHA,AIZA,AHSA,ACHA,AGTA,ACHA,AnByDA,AIZA,AIZA,ADGA,ARwBA,ADGA,APqBA,AENA;A2BhFA,AGTA,AENA,Ad0CA,AavCA,AHSA,AMlBA,ALeA,AIZA,AENA,AlCsGA,ACHA,ACHA,AU9BA,AJYA,AOrBA,ARwBA,AS3BA,AMlBA,AJYA,ACHA,AIZA,AHSA,ACHA,AGTA,ACHA,AnByDA,AIZA,AIZA,ADGA,ARwBA,ADGA,APqBA,AENA;A2BhFA,AGTA,AENA,Ad0CA,AavCA,AHSA,AMlBA,ALeA,AIZA,AENA,AlCsGA,ACHA,ACHA,AU9BA,AJYA,AOrBA,ARwBA,AS3BA,AMlBA,AJYA,ACHA,AIZA,AHSA,ACHA,AGTA,ACHA,AnByDA,AIZA,AIZA,ADGA,ARwBA,ADGA,APqBA,AENA;A2BhFA,AGTA,AENA,Ad0CA,AavCA,AHSA,AMlBA,ALeA,AIZA,AENA,AlCsGA,ACHA,ACHA,AU9BA,AJYA,AOrBA,ARwBA,AS3BA,AMlBA,AJYA,ACHA,AIZA,AHSA,ACHA,AGTA,ACHA,AnByDA,AIZA,AIZA,ADGA,ARwBA,ADGA,APqBA,AENA;A2BhFA,AGTA,AENA,Ad0CA,AavCA,AHSA,AMlBA,ALeA,AIZA,AENA,AlCsGA,ACHA,ACHA,AU9BA,AJYA,AOrBA,ARwBA,AS3BA,AMlBA,AJYA,ACHA,AIZA,AHSA,ACHA,AGTA,ACHA,AnByDA,AIZA,AIZA,ADGA,ARwBA,ADGA,APqBA,AENA;A2BhFA,AGTA,AENA,Ad0CA,AavCA,AHSA,AMlBA,ALeA,AIZA,AENA,AlCsGA,ACHA,ACHA,AU9BA,AJYA,AOrBA,ARwBA,AS3BA,AMlBA,AJYA,ACHA,AIZA,AHSA,ACHA,AGTA,ACHA,AnByDA,AIZA,AIZA,ADGA,ARwBA,ADGA,APqBA,AENA;A2BhFA,AGTA,AENA,Ad0CA,AavCA,AHSA,AMlBA,ALeA,AIZA,AENA,AlCsGA,ACHA,ACHA,AU9BA,AJYA,AOrBA,ARwBA,AS3BA,AMlBA,AJYA,ACHA,AIZA,AHSA,ACHA,AGTA,ACHA,AnByDA,AIZA,AIZA,ADGA,ARwBA,ADGA,APqBA,AENA;A2BhFA,AGTA,AENA,Ad0CA,AavCA,AHSA,AMlBA,ALeA,AIZA,AENA,AlCsGA,ACHA,ACHA,AU9BA,AJYA,AOrBA,ARwBA,AS3BA,AMlBA,AJYA,ACHA,AIZA,AHSA,ACHA,AGTA,ACHA,AnByDA,AIZA,AIZA,ADGA,ARwBA,ADGA,APqBA,AENA;A2BhFA,AGTA,AENA,Ad0CA,AavCA,AHSA,AMlBA,ALeA,AIZA,AENA,AlCsGA,ACHA,ACHA,AU9BA,AJYA,AOrBA,ARwBA,AS3BA,AMlBA,AJYA,ACHA,AIZA,AHSA,ACHA,AGTA,ACHA,AnByDA,AIZA,AIZA,ADGA,ARwBA,ADGA,APqBA,AENA;A2BhFA,AGTA,AENA,Ad0CA,AavCA,AHSA,AMlBA,ALeA,AIZA,AENA,AlCsGA,ACHA,ACHA,AU9BA,AJYA,AOrBA,ARwBA,AS3BA,AMlBA,AJYA,ACHA,AIZA,AHSA,ACHA,AGTA,ACHA,AnByDA,AIZA,AIZA,ADGA,ARwBA,ADGA,APqBA,AENA;A2BhFA,AGTA,AENA,Ad0CA,AavCA,AHSA,AMlBA,ALeA,AIZA,AENA,AlCsGA,ACHA,ACHA,AU9BA,AJYA,AOrBA,ARwBA,AS3BA,AMlBA,AJYA,ACHA,AIZA,AHSA,ACHA,AGTA,ACHA,AnByDA,AIZA,AIZA,ADGA,ARwBA,ADGA,APqBA,AENA;A2BhFA,AGTA,AENA,Ad0CA,AavCA,AHSA,AMlBA,ALeA,AIZA,AENA,AlCsGA,ACHA,ACHA,AU9BA,AJYA,AOrBA,ARwBA,AS3BA,AMlBA,AJYA,ACHA,AIZA,AHSA,ACHA,AGTA,ACHA,AnByDA,AIZA,AIZA,ADGA,ARwBA,ADGA,ALeA;A2BhFA,AGTA,AENA,Ad0CA,AavCA,AHSA,AMlBA,ADGA,AENA,AlCsGA,ACHA,ACHA,AU9BA,AJYA,AOrBA,ARwBA,AS3BA,AMlBA,AJYA,ACHA,AIZA,AHSA,ACHA,AGTA,ACHA,AnByDA,AIZA,AIZA,ADGA,ARwBA,ADGA,ALeA;A2BhFA,AGTA,AENA,Ad0CA,AavCA,AHSA,AMlBA,ADGA,AENA,AlCsGA,ACHA,ACHA,AU9BA,AJYA,AOrBA,ARwBA,AS3BA,AMlBA,AJYA,ACHA,AIZA,AHSA,ACHA,AGTA,ACHA,AnByDA,AIZA,AIZA,ADGA,ARwBA,ADGA,ALeA;A2BhFA,AGTA,AENA,Ad0CA,AavCA,AHSA,AMlBA,ADGA,AENA,AlCsGA,ACHA,ACHA,AU9BA,AJYA,AOrBA,ARwBA,AS3BA,AMlBA,AJYA,ACHA,AIZA,AHSA,ACHA,AGTA,ACHA,AnByDA,AIZA,AIZA,ADGA,ARwBA,ADGA,ALeA;A2BhFA,AGTA,AENA,Ad0CA,AavCA,AHSA,AMlBA,ADGA,AENA,AlCsGA,ACHA,ACHA,AU9BA,AJYA,AOrBA,ARwBA,AS3BA,AMlBA,AJYA,ACHA,AIZA,AHSA,ACHA,AGTA,ACHA,AnByDA,AIZA,AIZA,ADGA,ARwBA,ADGA,ALeA;A2BhFA,AGTA,AENA,Ad0CA,AavCA,AHSA,AMlBA,ADGA,AENA,AlCsGA,ACHA,ACHA,AU9BA,AJYA,AOrBA,ARwBA,AS3BA,AMlBA,AJYA,ACHA,AIZA,AHSA,ACHA,AGTA,ACHA,AnByDA,AIZA,AIZA,ADGA,ARwBA,ADGA,ALeA;A2BhFA,AGTA,AENA,Ad0CA,AavCA,AHSA,AMlBA,ADGA,AENA,AlCsGA,ACHA,ACHA,AU9BA,AJYA,AOrBA,ARwBA,AS3BA,AMlBA,AJYA,ACHA,AIZA,AHSA,ACHA,AGTA,ACHA,AnByDA,AIZA,AIZA,ADGA,ARwBA,ADGA,ALeA;A2BhFA,AGTA,AENA,Ad0CA,AavCA,AHSA,AMlBA,ADGA,AENA,AlCsGA,ACHA,ACHA,AU9BA,AJYA,AOrBA,ARwBA,AS3BA,AMlBA,AJYA,ACHA,AIZA,AHSA,ACHA,AGTA,ACHA,AnByDA,AIZA,AIZA,ADGA,ARwBA,ADGA,ALeA;A2BhFA,AGTA,AENA,Ad0CA,AavCA,AHSA,AMlBA,ADGA,AENA,AlCsGA,ACHA,ACHA,AU9BA,AJYA,AOrBA,ARwBA,AS3BA,AMlBA,AJYA,ACHA,AIZA,AHSA,ACHA,AGTA,ACHA,AnByDA,AIZA,AIZA,ADGA,ARwBA,ADGA,ALeA;A2BhFA,AGTA,AENA,Ad0CA,AavCA,AHSA,AMlBA,ADGA,AENA,AlCsGA,ACHA,ACHA,AU9BA,AJYA,AOrBA,ARwBA,AS3BA,AMlBA,AJYA,ACHA,AIZA,AHSA,ACHA,AGTA,ACHA,AnByDA,AIZA,AIZA,ADGA,ARwBA,ADGA,ALeA;A2BhFA,AGTA,AENA,Ad0CA,AavCA,AHSA,AMlBA,ADGA,AENA,AlCsGA,ACHA,ACHA,AU9BA,AJYA,AOrBA,ARwBA,AS3BA,AMlBA,AJYA,ACHA,AIZA,AHSA,ACHA,AGTA,ACHA,AnByDA,AIZA,AIZA,ADGA,ARwBA,ADGA,ALeA;A2BhFA,AGTA,AENA,Ad0CA,AavCA,AHSA,AMlBA,ADGA,AENA,AlCsGA,ACHA,ACHA,AU9BA,AJYA,ADGA,AS3BA,AMlBA,AJYA,ACHA,AIZA,AHSA,ACHA,AGTA,ACHA,AnByDA,AIZA,AIZA,ADGA,ARwBA,ADGA,ALeA;A2BhFA,AGTA,AENA,Ad0CA,AavCA,AHSA,AMlBA,ADGA,AENA,AlCsGA,ACHA,ACHA,AU9BA,AJYA,ADGA,AS3BA,AMlBA,AJYA,ACHA,AIZA,AHSA,ACHA,AGTA,ACHA,AnByDA,AIZA,AIZA,ADGA,ARwBA,ADGA,ALeA;A2BhFA,AGTA,AENA,Ad0CA,AavCA,AHSA,AKfA,AENA,AlCsGA,ACHA,ACHA,AU9BA,AJYA,ADGA,AS3BA,AMlBA,AJYA,ACHA,AIZA,AHSA,ACHA,AGTA,ACHA,AnByDA,AIZA,AIZA,ADGA,ARwBA,ADGA,ALeA;A2BhFA,AGTA,AENA,Ad0CA,AavCA,AHSA,AKfA,AENA,AlCsGA,ACHA,ACHA,AU9BA,AJYA,ADGA,AS3BA,AMlBA,AJYA,ACHA,AIZA,AHSA,ACHA,AGTA,ACHA,AnByDA,AIZA,AIZA,ADGA,ARwBA,ADGA,ALeA;A2BhFA,AGTA,AENA,Ad0CA,AavCA,AHSA,AKfA,AENA,AlCsGA,ACHA,ACHA,AU9BA,AJYA,ADGA,AS3BA,AMlBA,AJYA,ACHA,ACHA,ACHA,AGTA,ACHA,AnByDA,AIZA,AIZA,ADGA,ARwBA,ADGA,ALeA;A2BhFA,AGTA,AENA,Ad0CA,AavCA,AHSA,AKfA,AENA,AlCsGA,ACHA,ACHA,AU9BA,AJYA,ADGA,AS3BA,AMlBA,AJYA,ACHA,ACHA,ACHA,AGTA,ACHA,AnByDA,AIZA,AIZA,ADGA,ARwBA,ADGA,ALeA;A2BhFA,AGTA,AENA,Ad0CA,AavCA,AHSA,AKfA,AENA,AlCsGA,ACHA,ACHA,AU9BA,AJYA,ADGA,AS3BA,AMlBA,AJYA,ACHA,ACHA,ACHA,AGTA,ACHA,AnByDA,AIZA,AIZA,ADGA,ARwBA,ADGA,ALeA;A2BhFA,AGTA,AENA,Ad0CA,AavCA,AHSA,AKfA,AENA,AlCsGA,ACHA,ACHA,AU9BA,AJYA,ADGA,AS3BA,AMlBA,AJYA,ACHA,ACHA,ACHA,AGTA,ACHA,AnByDA,AIZA,AIZA,ADGA,ARwBA,ADGA,ALeA;A2BhFA,AGTA,AENA,Ad0CA,AavCA,AHSA,AKfA,AENA,AlCsGA,ACHA,ACHA,AU9BA,AJYA,ADGA,AS3BA,AMlBA,AJYA,ACHA,ACHA,ACHA,AGTA,ACHA,AnByDA,AIZA,AIZA,ADGA,ARwBA,ADGA,ALeA;A2BhFA,AGTA,AENA,Ad0CA,AavCA,AHSA,AKfA,AENA,AlCsGA,ACHA,ACHA,AU9BA,AJYA,ADGA,AS3BA,AMlBA,AJYA,ACHA,ACHA,ACHA,AGTA,ACHA,AnByDA,AIZA,AIZA,ADGA,ARwBA,ADGA,ALeA;A2BhFA,AGTA,AENA,Ad0CA,AavCA,AHSA,AKfA,AENA,AlCsGA,ACHA,ACHA,AU9BA,AJYA,ADGA,AS3BA,AMlBA,AJYA,ACHA,ACHA,ACHA,AGTA,ACHA,AnByDA,AIZA,AIZA,ADGA,ARwBA,ADGA,ALeA;A2BhFA,AGTA,AENA,Ad0CA,AavCA,AHSA,AKfA,AENA,AlCsGA,ACHA,ACHA,AU9BA,AJYA,ADGA,AS3BA,AMlBA,AJYA,ACHA,ACHA,ACHA,AGTA,ACHA,AnByDA,AIZA,AIZA,ADGA,ARwBA,ADGA,ALeA;A2BhFA,AGTA,AENA,Ad0CA,AavCA,AHSA,AKfA,AENA,AlCsGA,ACHA,ACHA,AU9BA,AJYA,ADGA,AS3BA,AMlBA,AJYA,ACHA,ACHA,ACHA,AGTA,ACHA,AnByDA,AIZA,AIZA,ADGA,ARwBA,ADGA,ALeA;A2BhFA,AGTA,AENA,Ad0CA,AavCA,AHSA,AKfA,AENA,AlCsGA,ACHA,ACHA,AU9BA,AJYA,ADGA,AS3BA,AMlBA,AJYA,ACHA,ACHA,ACHA,AGTA,ACHA,AnByDA,AIZA,AIZA,ADGA,ARwBA,ADGA,ALeA;A2BhFA,AGTA,AENA,Ad0CA,AavCA,AHSA,AKfA,AENA,AlCsGA,ACHA,ACHA,AU9BA,AJYA,ADGA,AS3BA,AMlBA,AJYA,ACHA,ACHA,ACHA,AGTA,AlBsDA,AIZA,AIZA,ADGA,ARwBA,ADGA,ALeA;A2BhFA,AGTA,AENA,Ad0CA,AavCA,AHSA,AKfA,AENA,AlCsGA,ACHA,ACHA,AU9BA,AJYA,ADGA,AS3BA,AMlBA,AJYA,ACHA,ACHA,ACHA,AGTA,AlBsDA,AIZA,AIZA,ADGA,ARwBA,ADGA,ALeA;A2BhFA,AGTA,AENA,Ad0CA,AavCA,AHSA,AKfA,AENA,AlCsGA,ACHA,ACHA,AU9BA,AJYA,ADGA,AS3BA,AMlBA,AJYA,ACHA,ACHA,ACHA,AGTA,AlBsDA,AIZA,AIZA,ADGA,ARwBA,ADGA,ALeA;A2BhFA,AGTA,AENA,Ad0CA,AavCA,AHSA,AKfA,AENA,AlCsGA,ACHA,ACHA,AU9BA,AJYA,ADGA,AS3BA,AMlBA,AJYA,ACHA,ACHA,ACHA,AGTA,AlBsDA,AIZA,AIZA,ADGA,ARwBA,ANkBA;A2BhFA,AGTA,AENA,Ad0CA,AavCA,AHSA,AKfA,AENA,AlCsGA,ACHA,ACHA,AU9BA,AJYA,ADGA,AS3BA,AMlBA,AJYA,ACHA,ACHA,ACHA,AGTA,AlBsDA,AIZA,AIZA,ADGA,ARwBA,ANkBA;A2BhFA,AGTA,AENA,Ad0CA,AavCA,AHSA,AKfA,AENA,AlCsGA,ACHA,ACHA,AU9BA,AJYA,ADGA,AS3BA,AMlBA,AJYA,ACHA,ACHA,ACHA,AGTA,AlBsDA,AIZA,AIZA,ADGA,ARwBA,ANkBA;A2BhFA,AGTA,AENA,Ad0CA,AavCA,AHSA,AKfA,AENA,AlCsGA,ACHA,ACHA,AU9BA,AJYA,ADGA,AS3BA,AMlBA,AJYA,ACHA,ACHA,ACHA,AGTA,AlBsDA,AIZA,AIZA,ADGA,ARwBA,ANkBA;A2BhFA,AGTA,AENA,Ad0CA,AavCA,AHSA,AKfA,AENA,AlCsGA,ACHA,ACHA,AU9BA,AJYA,ADGA,AS3BA,AMlBA,AJYA,ACHA,ACHA,ACHA,AGTA,AlBsDA,AIZA,AIZA,ADGA,ARwBA,ANkBA;A2BhFA,AGTA,AENA,Ad0CA,AavCA,AHSA,AKfA,AENA,AlCsGA,ACHA,ACHA,AU9BA,AJYA,ADGA,AS3BA,AMlBA,AJYA,ACHA,ACHA,ACHA,AGTA,AlBsDA,AIZA,AIZA,ADGA,ARwBA,ANkBA;A2BhFA,AGTA,AENA,Ad0CA,AavCA,AHSA,AKfA,AENA,AlCsGA,ACHA,ACHA,AU9BA,AJYA,ADGA,AS3BA,AMlBA,AJYA,ACHA,ACHA,ACHA,AGTA,AlBsDA,AIZA,AIZA,ADGA,ARwBA,ANkBA;A2BhFA,AGTA,AENA,Ad0CA,AavCA,AHSA,AKfA,AENA,AlCsGA,ACHA,ACHA,AU9BA,AJYA,ADGA,AS3BA,AMlBA,AJYA,ACHA,ACHA,ACHA,AGTA,AlBsDA,AIZA,AIZA,ADGA,ARwBA,ANkBA;A2BhFA,AGTA,AENA,Ad0CA,AavCA,AHSA,AKfA,AENA,AlCsGA,ACHA,ACHA,AU9BA,AJYA,ADGA,AS3BA,AMlBA,AJYA,ACHA,ACHA,ACHA,AGTA,AlBsDA,AIZA,AIZA,ADGA,ARwBA,ANkBA;A2BhFA,AGTA,AENA,Ad0CA,AavCA,AHSA,AKfA,AENA,AlCsGA,ACHA,ACHA,AU9BA,AJYA,ADGA,AS3BA,AMlBA,AJYA,ACHA,ACHA,ACHA,AGTA,AlBsDA,AIZA,AIZA,ADGA,ARwBA,ANkBA;A2BhFA,AGTA,AENA,Ad0CA,AavCA,AHSA,AKfA,AENA,AlCsGA,ACHA,ACHA,AU9BA,AJYA,ADGA,AS3BA,AMlBA,AJYA,ACHA,ACHA,ACHA,AGTA,AlBsDA,AIZA,AIZA,ADGA,ARwBA,ANkBA;A2BhFA,AGTA,AENA,Ad0CA,AavCA,AHSA,AKfA,AENA,AlCsGA,ACHA,ACHA,AU9BA,AJYA,ADGA,AS3BA,AMlBA,AJYA,ACHA,ACHA,ACHA,AGTA,AlBsDA,AIZA,AIZA,ADGA,ARwBA,ANkBA;A2BhFA,AGTA,AENA,Ad0CA,AavCA,AHSA,AKfA,AENA,AlCsGA,ACHA,ACHA,AU9BA,AJYA,ADGA,AS3BA,AMlBA,AJYA,ACHA,ACHA,ACHA,AGTA,AlBsDA,AIZA,AIZA,ADGA,ARwBA,ANkBA;A2BhFA,AGTA,AENA,Ad0CA,AavCA,AHSA,AKfA,AENA,AlCsGA,ACHA,ACHA,AU9BA,AJYA,ADGA,AS3BA,AMlBA,AJYA,ACHA,ACHA,ACHA,AGTA,AlBsDA,AIZA,AIZA,ADGA,ARwBA,ANkBA;A2BhFA,AGTA,AENA,Ad0CA,AavCA,AHSA,AKfA,AENA,AlCsGA,ACHA,ACHA,AU9BA,AJYA,ADGA,AS3BA,AMlBA,AJYA,ACHA,ACHA,ACHA,Af6CA,AIZA,AIZA,ADGA,ARwBA,ANkBA;A2BhFA,AGTA,AENA,Ad0CA,AavCA,AHSA,AKfA,AENA,AlCsGA,ACHA,ACHA,AU9BA,AJYA,ADGA,AS3BA,AMlBA,AJYA,ACHA,ACHA,ACHA,Af6CA,AIZA,AIZA,ADGA,ARwBA,ANkBA;A2BhFA,AGTA,AENA,Ad0CA,AavCA,AHSA,AKfA,AENA,AlCsGA,ACHA,ACHA,AU9BA,AJYA,ADGA,AS3BA,AMlBA,AJYA,ACHA,ACHA,ACHA,AXiCA,AIZA,ADGA,ARwBA,ANkBA;A2BhFA,AGTA,AENA,Ad0CA,AavCA,AHSA,AKfA,AENA,AlCsGA,ACHA,ACHA,AU9BA,AJYA,ADGA,AS3BA,AMlBA,AJYA,ACHA,ACHA,ACHA,AXiCA,AIZA,ADGA,ARwBA,ANkBA;A2BhFA,AGTA,AENA,Ad0CA,AavCA,AHSA,AKfA,AENA,AlCsGA,ACHA,ACHA,AU9BA,AJYA,ADGA,AS3BA,AMlBA,AJYA,ACHA,ACHA,ACHA,AXiCA,AIZA,ADGA,ARwBA,ANkBA;A2BhFA,AGTA,AENA,Ad0CA,AavCA,AENA,AENA,AlCsGA,ACHA,ACHA,AU9BA,AJYA,ADGA,AS3BA,AMlBA,AJYA,ACHA,ACHA,ACHA,AXiCA,AIZA,ADGA,ARwBA,ANkBA;A2BhFA,AGTA,AENA,Ad0CA,AavCA,AENA,AENA,AlCsGA,ACHA,ACHA,AU9BA,AJYA,ADGA,AS3BA,AMlBA,AJYA,ACHA,ACHA,ACHA,AXiCA,AIZA,ADGA,ARwBA,ANkBA;A2BhFA,AGTA,AENA,Ad0CA,AavCA,AENA,AENA,AlCsGA,ACHA,ACHA,AU9BA,AJYA,ADGA,AS3BA,AMlBA,AJYA,ACHA,ACHA,ACHA,AXiCA,AIZA,ADGA,ARwBA,ANkBA;A2BhFA,AGTA,AENA,Ad0CA,AavCA,AENA,AENA,AlCsGA,ACHA,ACHA,AU9BA,AJYA,ADGA,AS3BA,AMlBA,AJYA,ACHA,ACHA,ACHA,AXiCA,AIZA,ADGA,ARwBA,ANkBA;A2BhFA,AGTA,AENA,Ad0CA,AavCA,AENA,AENA,AlCsGA,ACHA,ACHA,AU9BA,AJYA,ADGA,AS3BA,AMlBA,AJYA,ACHA,ACHA,ACHA,AXiCA,AIZA,ADGA,ARwBA,ANkBA;A2BhFA,AGTA,AENA,Ad0CA,AavCA,AENA,AENA,AlCsGA,ACHA,ACHA,AU9BA,AJYA,ADGA,AS3BA,AMlBA,AJYA,ACHA,ACHA,ACHA,AXiCA,AIZA,ADGA,ARwBA,ANkBA;A2BhFA,AGTA,AENA,Ad0CA,AavCA,AENA,AENA,AlCsGA,ACHA,ACHA,AU9BA,AJYA,ADGA,AS3BA,AMlBA,AJYA,ACHA,ACHA,ACHA,AXiCA,AIZA,ADGA,ARwBA,ANkBA;A2BhFA,AGTA,AENA,Ad0CA,AavCA,AENA,AENA,AlCsGA,ACHA,ACHA,AU9BA,AJYA,ADGA,AS3BA,AMlBA,AJYA,ACHA,ACHA,ACHA,AXiCA,AIZA,ADGA,ARwBA,ANkBA;A2BhFA,AGTA,AENA,Ad0CA,AavCA,AENA,AENA,AlCsGA,ACHA,ACHA,AU9BA,AJYA,ADGA,AS3BA,AMlBA,AJYA,ACHA,ACHA,ACHA,AXiCA,AGTA,ARwBA,ANkBA;A2BhFA,AGTA,AENA,Ad0CA,AavCA,AENA,AENA,AlCsGA,ACHA,ACHA,AU9BA,AJYA,ADGA,AS3BA,AMlBA,AJYA,ACHA,ACHA,ACHA,AXiCA,AGTA,ARwBA,ANkBA;A2BhFA,AGTA,AENA,Ad0CA,AavCA,AENA,AENA,AlCsGA,ACHA,ACHA,AU9BA,AJYA,ADGA,AS3BA,AMlBA,AJYA,ACHA,ACHA,ACHA,AXiCA,AGTA,ARwBA,ANkBA;A2BhFA,AGTA,AENA,Ad0CA,AavCA,AENA,AENA,AlCsGA,ACHA,ACHA,AU9BA,AJYA,ADGA,AS3BA,AMlBA,AJYA,ACHA,ACHA,ACHA,AXiCA,AGTA,ARwBA,ANkBA;A2BhFA,AGTA,AENA,Ad0CA,AavCA,AENA,AENA,AlCsGA,ACHA,ACHA,AU9BA,AJYA,ADGA,AS3BA,AMlBA,AJYA,ACHA,ACHA,ACHA,AXiCA,AGTA,ARwBA,ANkBA;A2BhFA,AGTA,AENA,Ad0CA,AavCA,AENA,AENA,AlCsGA,ACHA,ACHA,AU9BA,AJYA,ADGA,AS3BA,AMlBA,AJYA,ACHA,ACHA,ACHA,AXiCA,AGTA,ARwBA,ANkBA;A2BhFA,AGTA,AENA,Ad0CA,AavCA,AENA,AENA,AlCsGA,ACHA,ACHA,AU9BA,AJYA,ADGA,AS3BA,AMlBA,AJYA,ACHA,ACHA,ACHA,AXiCA,AGTA,ARwBA,ANkBA;A2BhFA,AGTA,AENA,Ad0CA,AavCA,AENA,AENA,AlCsGA,ACHA,ACHA,AU9BA,AJYA,ADGA,AS3BA,AMlBA,AJYA,ACHA,ACHA,ACHA,AXiCA,AGTA,ARwBA,ANkBA;A2BhFA,AGTA,AENA,Ad0CA,AavCA,AENA,AENA,AlCsGA,ACHA,ACHA,AU9BA,ALeA,AS3BA,AMlBA,AJYA,ACHA,ACHA,ACHA,AXiCA,AGTA,ARwBA,ANkBA;A2BhFA,AGTA,AENA,Ad0CA,AavCA,AENA,AENA,AlCsGA,ACHA,ACHA,AU9BA,ALeA,AS3BA,AMlBA,AJYA,ACHA,ACHA,ACHA,AXiCA,AGTA,ARwBA,ANkBA;A2BhFA,AGTA,AENA,Ad0CA,AavCA,AENA,AENA,AlCsGA,ACHA,ACHA,AU9BA,ALeA,AS3BA,AMlBA,AJYA,ACHA,ACHA,ACHA,AXiCA,AGTA,ARwBA,ANkBA;A2BhFA,AGTA,AENA,Ad0CA,AavCA,AENA,AENA,AlCsGA,ACHA,ACHA,AU9BA,ALeA,AS3BA,AMlBA,AJYA,ACHA,ACHA,ACHA,AXiCA,AGTA,ARwBA,ANkBA;A2BhFA,AGTA,AENA,Ad0CA,AavCA,AENA,AENA,AlCsGA,ACHA,ACHA,AU9BA,ALeA,AS3BA,AMlBA,AJYA,ACHA,ACHA,ACHA,AXiCA,AGTA,ARwBA,ANkBA;A2BhFA,AGTA,AENA,Ad0CA,AavCA,AENA,AENA,AlCsGA,ACHA,ACHA,AU9BA,ALeA,AS3BA,AMlBA,AJYA,ACHA,ACHA,ACHA,AXiCA,AGTA,ARwBA,ANkBA;A2BhFA,AGTA,AENA,Ad0CA,AavCA,AENA,AENA,AlCsGA,ACHA,ACHA,AU9BA,ALeA,AS3BA,AMlBA,AJYA,ACHA,ACHA,ACHA,AXiCA,AGTA,ARwBA,ANkBA;A2BhFA,AGTA,AENA,Ad0CA,AavCA,AENA,AENA,AlCsGA,ACHA,ACHA,AU9BA,ALeA,AS3BA,AMlBA,AJYA,ACHA,ACHA,ACHA,AXiCA,AGTA,ARwBA,ANkBA;A2BhFA,AGTA,AENA,Ad0CA,AavCA,AENA,AENA,AlCsGA,ACHA,ACHA,AU9BA,ALeA,AS3BA,AMlBA,AJYA,ACHA,ACHA,ACHA,AXiCA,AGTA,ARwBA,ANkBA;A2BhFA,AGTA,AENA,Ad0CA,AavCA,AENA,AENA,AlCsGA,ACHA,ACHA,AU9BA,ALeA,AS3BA,AMlBA,AJYA,ACHA,ACHA,ACHA,AXiCA,AGTA,ARwBA,ANkBA;A2BhFA,AGTA,AENA,Ad0CA,AavCA,AENA,AENA,AlCsGA,ACHA,ACHA,AU9BA,ALeA,AS3BA,AMlBA,AJYA,ACHA,ACHA,ACHA,AXiCA,AGTA,ARwBA,ANkBA;A2BhFA,AGTA,AENA,Ad0CA,AavCA,AENA,AENA,AlCsGA,ACHA,ACHA,AU9BA,ALeA,AS3BA,AMlBA,AJYA,ACHA,ACHA,ACHA,ARwBA,ARwBA,ANkBA;A2BhFA,AGTA,AENA,Ad0CA,AavCA,AENA,AENA,AlCsGA,ACHA,ACHA,AU9BA,ALeA,AS3BA,AMlBA,AJYA,ACHA,ACHA,ACHA,ARwBA,ARwBA,ANkBA;A2BhFA,AGTA,AENA,Ad0CA,AavCA,AENA,AENA,AlCsGA,ACHA,ACHA,AU9BA,ALeA,AS3BA,AMlBA,AJYA,ACHA,ACHA,ACHA,ARwBA,ARwBA,ANkBA;A2BhFA,AGTA,AENA,Ad0CA,Ae7CA,AENA,AlCsGA,ACHA,ACHA,AU9BA,ALeA,AS3BA,AMlBA,AJYA,ACHA,ACHA,ACHA,ARwBA,ARwBA,ANkBA;A2BhFA,AGTA,AENA,Ad0CA,AiBnDA,AlCsGA,ACHA,AWjCA,ALeA,AS3BA,AMlBA,AJYA,ACHA,ACHA,ACHA,ARwBA,ARwBA,ANkBA;A2BhFA,AGTA,AENA,Ad0CA,AiBnDA,AlCsGA,ACHA,AWjCA,ALeA,AS3BA,AMlBA,AJYA,ACHA,ACHA,ACHA,ARwBA,ARwBA,ANkBA;A2BhFA,AGTA,AENA,Ad0CA,AiBnDA,AlCsGA,ACHA,AWjCA,ALeA,AS3BA,AMlBA,AJYA,ACHA,ACHA,ACHA,ARwBA,ARwBA,ANkBA;A2BhFA,AGTA,AENA,Ad0CA,AiBnDA,AlCsGA,ACHA,AWjCA,ALeA,AS3BA,AMlBA,AJYA,ACHA,ACHA,ACHA,ARwBA,ARwBA,ANkBA;A2BhFA,AGTA,AZoCA,AiBnDA,AlCsGA,ACHA,AWjCA,ALeA,AS3BA,AMlBA,AJYA,ACHA,ACHA,ACHA,ARwBA,ARwBA,ANkBA;A2BhFA,AGTA,AZoCA,AiBnDA,AlCsGA,ACHA,AWjCA,ALeA,AS3BA,AMlBA,AJYA,ACHA,ACHA,ACHA,ARwBA,ARwBA,ANkBA;A2BhFA,AGTA,AZoCA,AiBnDA,AlCsGA,ACHA,AWjCA,ALeA,AS3BA,AMlBA,AJYA,ACHA,ACHA,ACHA,ARwBA,ARwBA,ANkBA;A2BhFA,AGTA,AZoCA,AiBnDA,AlCsGA,ACHA,AWjCA,ALeA,AS3BA,AMlBA,AJYA,ACHA,ACHA,ACHA,ARwBA,ARwBA,ANkBA;A2BhFA,AGTA,AZoCA,AiBnDA,AlCsGA,ACHA,AWjCA,ALeA,AS3BA,AENA,ACHA,ACHA,ACHA,ARwBA,ARwBA,ANkBA;A2BhFA,AGTA,AZoCA,AiBnDA,AlCsGA,ACHA,AWjCA,ALeA,AS3BA,AENA,ACHA,ACHA,ACHA,ARwBA,ARwBA,ANkBA;A2BhFA,AGTA,AZoCA,AiBnDA,AlCsGA,ACHA,AWjCA,ALeA,AS3BA,AENA,ACHA,ACHA,ACHA,ARwBA,ARwBA,ANkBA;A2BhFA,AGTA,AZoCA,AiBnDA,AlCsGA,ACHA,AWjCA,ALeA,AS3BA,AENA,ACHA,ACHA,ACHA,ARwBA,ARwBA,ANkBA;A2BhFA,AGTA,AZoCA,AiBnDA,AlCsGA,ACHA,AWjCA,ALeA,AS3BA,AENA,ACHA,ACHA,ACHA,ARwBA,ARwBA,ANkBA;A2BhFA,AGTA,AZoCA,AiBnDA,AlCsGA,ACHA,AWjCA,ALeA,AS3BA,AENA,ACHA,ACHA,ACHA,ARwBA,ARwBA,ANkBA;A2BhFA,AGTA,AZoCA,AiBnDA,AlCsGA,ACHA,AWjCA,ALeA,AS3BA,AENA,ACHA,ACHA,ACHA,ARwBA,ARwBA,ANkBA;A2BhFA,AGTA,AZoCA,AiBnDA,AlCsGA,ACHA,AWjCA,ALeA,AS3BA,AENA,ACHA,ACHA,ACHA,ARwBA,ARwBA,ANkBA;A2BhFA,AGTA,AZoCA,AiBnDA,AlCsGA,ACHA,AWjCA,ALeA,AS3BA,AENA,ACHA,ACHA,ACHA,ARwBA,ARwBA,ANkBA;A2BhFA,AGTA,AZoCA,AiBnDA,AlCsGA,ACHA,AWjCA,ALeA,AS3BA,AENA,ACHA,ACHA,ACHA,ARwBA,ARwBA,ANkBA;A2BhFA,AGTA,AZoCA,AiBnDA,AlCsGA,ACHA,AWjCA,ALeA,AS3BA,AENA,ACHA,ACHA,ACHA,ARwBA,ARwBA,ANkBA;A2BhFA,AGTA,AZoCA,AiBnDA,AlCsGA,ACHA,AWjCA,ALeA,AS3BA,AENA,ACHA,ACHA,ACHA,ARwBA,ARwBA,ANkBA;A2BhFA,AGTA,AZoCA,AiBnDA,AlCsGA,ACHA,AWjCA,ALeA,AWjCA,ACHA,ACHA,ACHA,ARwBA,ARwBA,ANkBA;A2BhFA,AGTA,AZoCA,AiBnDA,AlCsGA,ACHA,AWjCA,ALeA,AWjCA,ACHA,ACHA,ACHA,ARwBA,ARwBA,ANkBA;A2BhFA,AGTA,AZoCA,AiBnDA,AlCsGA,ACHA,AWjCA,ALeA,AWjCA,ACHA,ACHA,ACHA,ARwBA,ARwBA,ANkBA;A2BhFA,AGTA,AZoCA,AiBnDA,AlCsGA,ACHA,AWjCA,ALeA,AWjCA,ACHA,ACHA,ACHA,ARwBA,ARwBA,ANkBA;A2BhFA,AGTA,AZoCA,AiBnDA,AlCsGA,ACHA,AWjCA,ALeA,AWjCA,ACHA,ACHA,ACHA,ARwBA,ARwBA,ANkBA;A2BhFA,AGTA,AZoCA,AiBnDA,AlCsGA,ACHA,AWjCA,ALeA,AWjCA,ACHA,ACHA,ACHA,ARwBA,ARwBA,ANkBA;A2BhFA,AGTA,AZoCA,AiBnDA,AlCsGA,ACHA,AWjCA,ALeA,AWjCA,ACHA,ACHA,ACHA,ARwBA,ARwBA,ANkBA;A2BhFA,AGTA,AZoCA,AiBnDA,AlCsGA,ACHA,AWjCA,ALeA,AWjCA,ACHA,ACHA,ACHA,ARwBA,ARwBA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AWjCA,ALeA,AWjCA,ACHA,ACHA,ACHA,ARwBA,ARwBA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AWjCA,ALeA,AWjCA,ACHA,ACHA,ACHA,ARwBA,ARwBA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AWjCA,ALeA,AWjCA,ACHA,ACHA,ACHA,ARwBA,ARwBA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AWjCA,ALeA,AWjCA,ACHA,ACHA,ACHA,ARwBA,ARwBA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AWjCA,ALeA,AWjCA,ACHA,ACHA,ACHA,ARwBA,ARwBA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AWjCA,ALeA,AWjCA,ACHA,ACHA,ACHA,ARwBA,ARwBA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AWjCA,ALeA,AWjCA,ACHA,ACHA,ACHA,ARwBA,ARwBA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AWjCA,ALeA,AWjCA,ACHA,ACHA,ACHA,ARwBA,ARwBA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AWjCA,ALeA,AWjCA,ACHA,ACHA,APqBA,ARwBA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AWjCA,ALeA,AWjCA,ACHA,ACHA,APqBA,ARwBA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AWjCA,ALeA,AWjCA,ACHA,ACHA,APqBA,ARwBA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AWjCA,ALeA,AYpCA,ACHA,APqBA,ARwBA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AWjCA,ALeA,AYpCA,ACHA,APqBA,ARwBA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AWjCA,ALeA,AYpCA,ACHA,APqBA,ARwBA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AWjCA,ALeA,AYpCA,ACHA,APqBA,ARwBA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AWjCA,ALeA,AYpCA,ACHA,APqBA,ARwBA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AWjCA,ALeA,AMlBA,ARwBA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AWjCA,ALeA,AMlBA,ARwBA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AWjCA,ALeA,AMlBA,ARwBA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AWjCA,ALeA,AMlBA,ARwBA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AWjCA,ALeA,AMlBA,ARwBA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AWjCA,ALeA,AMlBA,ARwBA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AWjCA,ALeA,AMlBA,ARwBA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AWjCA,ALeA,AMlBA,ARwBA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AWjCA,ALeA,AMlBA,ARwBA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AWjCA,ALeA,AMlBA,ARwBA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AWjCA,ALeA,AMlBA,ARwBA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AWjCA,ALeA,AMlBA,ARwBA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AWjCA,ALeA,AMlBA,ARwBA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AWjCA,ALeA,AMlBA,ARwBA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AWjCA,ALeA,AMlBA,ARwBA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AWjCA,ALeA,AMlBA,ARwBA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AWjCA,ALeA,AMlBA,ARwBA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AWjCA,ALeA,AMlBA,ARwBA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AWjCA,ALeA,AMlBA,ARwBA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AWjCA,ALeA,AMlBA,ARwBA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AWjCA,ALeA,AMlBA,ARwBA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AMlBA,AMlBA,ARwBA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AMlBA,AMlBA,ARwBA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AMlBA,AMlBA,ARwBA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AMlBA,AMlBA,ARwBA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AMlBA,AMlBA,ARwBA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AMlBA,AMlBA,ARwBA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AMlBA,AMlBA,ARwBA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AMlBA,AMlBA,ARwBA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AMlBA,AMlBA,ARwBA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AMlBA,AMlBA,ARwBA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AMlBA,AMlBA,ARwBA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AMlBA,AMlBA,ARwBA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AMlBA,AMlBA,ARwBA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AMlBA,AMlBA,ARwBA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AMlBA,AMlBA,ARwBA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AMlBA,AMlBA,ARwBA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AMlBA,AMlBA,ARwBA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AMlBA,AMlBA,ARwBA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AMlBA,AMlBA,ARwBA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AMlBA,AMlBA,ARwBA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AMlBA,AMlBA,ARwBA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AMlBA,AMlBA,ARwBA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AMlBA,AMlBA,ARwBA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AMlBA,AMlBA,ARwBA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AMlBA,AMlBA,ARwBA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AMlBA,AMlBA,ARwBA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AMlBA,AMlBA,ARwBA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AMlBA,AMlBA,ARwBA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AMlBA,AMlBA,ARwBA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AMlBA,AMlBA,ARwBA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AMlBA,AMlBA,ARwBA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AMlBA,AMlBA,ARwBA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AMlBA,AMlBA,ARwBA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AMlBA,AMlBA,ARwBA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AMlBA,AMlBA,ARwBA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AMlBA,AMlBA,ARwBA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AMlBA,AMlBA,ARwBA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AMlBA,AMlBA,ARwBA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AMlBA,AMlBA,ARwBA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AMlBA,AMlBA,ARwBA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AMlBA,AMlBA,ARwBA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AMlBA,AMlBA,ARwBA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AMlBA,AMlBA,ARwBA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AMlBA,AMlBA,ARwBA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AMlBA,AMlBA,ARwBA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AMlBA,AMlBA,ARwBA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AMlBA,AMlBA,ARwBA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AMlBA,AMlBA,ARwBA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AMlBA,AMlBA,ARwBA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AMlBA,AMlBA,ARwBA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AMlBA,AMlBA,ARwBA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AMlBA,AFMA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AMlBA,AFMA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AMlBA,AFMA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AMlBA,AFMA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AMlBA,AFMA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AMlBA,AFMA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AMlBA,AFMA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AMlBA,AFMA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AMlBA,AFMA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AMlBA,AFMA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AMlBA,AFMA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AMlBA,AFMA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AMlBA,AFMA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AMlBA,AFMA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AMlBA,AFMA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AMlBA,AFMA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AMlBA,AFMA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AMlBA,AFMA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AMlBA,AFMA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AMlBA,AFMA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AMlBA,AFMA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,ACHA,AMlBA,AFMA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,AOrBA,AFMA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,AOrBA,AFMA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,AOrBA,AFMA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,AOrBA,AFMA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,AOrBA,AFMA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,AOrBA,AFMA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,AOrBA,AFMA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,AOrBA,AFMA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,AOrBA,AFMA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,AOrBA,AFMA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,AOrBA,AFMA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,AOrBA,AFMA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,AOrBA,AFMA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,AOrBA,AFMA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,AOrBA,AFMA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,AOrBA,AFMA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,AOrBA,AFMA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,AOrBA,AFMA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,AOrBA,AFMA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,AOrBA,AFMA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,AOrBA,AFMA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,AOrBA,AFMA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,AOrBA,AFMA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,AOrBA,AFMA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,AOrBA,AFMA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,AOrBA,AFMA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,AOrBA,AFMA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,AOrBA,AFMA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,AOrBA,AFMA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,AOrBA,AFMA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,AOrBA,AFMA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,AOrBA,AFMA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,AOrBA,AFMA,ANkBA;A2BhFA,AT2BA,AiBnDA,AlCsGA,AOrBA,AFMA,ANkBA;AkBrDA,AiBnDA,AlCsGA,AOrBA,AFMA,ANkBA;AkBrDA,AiBnDA,AlCsGA,AOrBA,AFMA,ANkBA;AkBrDA,AiBnDA,AlCsGA,AOrBA,AFMA,ANkBA;AkBrDA,AiBnDA,AlCsGA,AOrBA,AFMA,ANkBA;AkBrDA,AiBnDA,AlCsGA,AOrBA,AFMA,ANkBA;AkBrDA,AiBnDA,AlCsGA,AOrBA,AFMA,ANkBA;AkBrDA,AiBnDA,AlCsGA,AOrBA,AFMA,ANkBA;AkBrDA,AiBnDA,AlCsGA,AOrBA,AFMA,ANkBA;AkBrDA,AiBnDA,AlCsGA,AOrBA,AFMA,ANkBA;AkBrDA,AiBnDA,AlCsGA,AOrBA,AFMA,ANkBA;AkBrDA,AiBnDA,AlCsGA,AOrBA,AFMA,ANkBA;AkBrDA,AiBnDA,AlCsGA,AOrBA,AFMA,ANkBA;AkBrDA,AiBnDA,AlCsGA,AOrBA,AFMA,ANkBA;AkBrDA,AiBnDA,AlCsGA,AOrBA,AFMA,ANkBA;AkBrDA,AiBnDA,AlCsGA,AOrBA,AFMA,ANkBA;AkBrDA,AiBnDA,AlCsGA,AOrBA,AFMA,ANkBA;AkBrDA,AiBnDA,AlCsGA,AOrBA,AFMA,ANkBA;AkBrDA,AiBnDA,AlCsGA,AOrBA,AFMA,ANkBA;AkBrDA,AiBnDA,AlCsGA,AOrBA,AFMA,ANkBA;AkBrDA,AiBnDA,AlCsGA,AOrBA,AFMA,ANkBA;AkBrDA,AiBnDA,AlCsGA,AOrBA,AFMA,ANkBA;AkBrDA,AiBnDA,AlCsGA,AOrBA,AFMA,ANkBA;AkBrDA,AiBnDA,AlCsGA,AOrBA,AFMA,ANkBA;AkBrDA,AiBnDA,AlCsGA,AOrBA,AFMA,ANkBA;AkBrDA,AiBnDA,AlCsGA,AOrBA,AFMA,ANkBA;AkBrDA,AiBnDA,AlCsGA,AOrBA,AFMA,ANkBA;AkBrDA,AiBnDA,AlCsGA,AOrBA,AFMA,ANkBA;AkBrDA,AiBnDA,AlCsGA,AOrBA,AFMA,ANkBA;AkBrDA,AjBmDA,AOrBA,AFMA,ANkBA;AkBrDA,AV8BA,AFMA,ANkBA;AkBrDA,AV8BA,AFMA,ANkBA;AkBrDA,AV8BA,AFMA,ANkBA;AkBrDA,AV8BA,AFMA,ANkBA;AkBrDA,AV8BA,AFMA,ANkBA;AkBrDA,AV8BA,AFMA,ANkBA;AkBrDA,AV8BA,AFMA,ANkBA;AkBrDA,AV8BA,AFMA,ANkBA;AkBrDA,AV8BA,AFMA,ANkBA;AkBrDA,AV8BA,AFMA,ANkBA;AkBrDA,AV8BA,AFMA,ANkBA;AkBrDA,AV8BA,AFMA,ANkBA;AkBrDA,AV8BA,AFMA,ANkBA;AkBrDA,AV8BA,AFMA,ANkBA;AkBrDA,AV8BA,AFMA,ANkBA;AkBrDA,AV8BA,AFMA,ANkBA;AkBrDA,AV8BA,AFMA,ANkBA;AkBrDA,AV8BA,AFMA,ANkBA;AkBrDA,AV8BA,AFMA,ANkBA;AkBrDA,AV8BA,AFMA,ANkBA;AkBrDA,AV8BA,AFMA,ANkBA;AkBrDA,AV8BA,AFMA,ANkBA;AkBrDA,AV8BA,AFMA,ANkBA;AkBrDA,AV8BA,AFMA,ANkBA;AkBrDA,AV8BA,AFMA,ANkBA;AkBrDA,AV8BA,AFMA,ANkBA;AkBrDA,AV8BA,AFMA,ANkBA;AkBrDA,AV8BA,AFMA,ANkBA;AkBrDA,AV8BA,AFMA,ANkBA;AkBrDA,AV8BA,AFMA,ANkBA;AkBrDA,AV8BA,AFMA,ANkBA;AkBrDA,AV8BA,AFMA,ANkBA;AkBrDA,AV8BA,AFMA,ANkBA;AkBrDA,AV8BA,AFMA,ANkBA;AkBrDA,AV8BA,AFMA,ANkBA;AkBrDA,AV8BA,AFMA,ANkBA;AkBrDA,AV8BA,AFMA,ANkBA;AkBrDA,AV8BA,AFMA,ANkBA;AkBrDA,AV8BA,AFMA,ANkBA;AkBrDA,AV8BA,AFMA,ANkBA;AkBrDA,AV8BA,AFMA,ANkBA;AkBrDA,AV8BA,AFMA,ANkBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AkBrDA,AV8BA,ARwBA;AQvBA,ARwBA;AQvBA,ARwBA;AQvfile":"index.js","sourcesContent":["const tool = _require('./util/tool')\nconst cache = _require('./util/cache')\nconst Window = _require('./window')\nconst Document = _require('./document')\nconst EventTarget = _require('./event/event-target')\nconst Event = _require('./event/event')\n\nmodule.exports = {\n    createPage(route, config) {\n        if (config) cache.setConfig(config)\n\n        const pageId = `p-${tool.getId()}-/${route}`\n        const window = new Window(pageId)\n        const nodeIdMap = {}\n        const document = new Document(pageId, nodeIdMap)\n\n        cache.init(pageId, {\n            window,\n            document,\n            nodeIdMap,\n        })\n\n        return {\n            pageId,\n            window,\n            document,\n        }\n    },\n\n    destroyPage(pageId) {\n        cache.destroy(pageId)\n    },\n\n    // 开放给 miniprogram-element\n    $$adapter: {\n        cache,\n        EventTarget,\n        Event,\n        tool,\n    },\n}\n","const cache = _require('./cache')\n\n/**\n * 驼峰转连字符\n */\nfunction toDash(str) {\n    return str.replace(/[A-Z]/g, all => `-${all.toLowerCase()}`)\n}\n\n/**\n * 连字符转驼峰\n */\nfunction toCamel(str) {\n    return str.replace(/-([a-zA-Z])/g, (all, $1) => $1.toUpperCase())\n}\n\n/**\n * 获取唯一 id\n */\nlet seed = +new Date()\nfunction getId() {\n    return seed++\n}\n\n/**\n * 从 pageId 中获取小程序页面 route\n */\nfunction getPageRoute(pageId) {\n    return pageId.split('-')[2]\n}\n\n/**\n * 从 pageRoute 中获取小程序页面名称\n */\nfunction getPageName(pageRoute) {\n    const splitPageRoute = pageRoute.split('/')\n    return splitPageRoute[1] === 'pages' ? splitPageRoute[2] : splitPageRoute[1]\n}\n\n/**\n * 节流，一个同步流中只调用一次该函数\n */\nconst waitFuncSet = new Set()\nfunction throttle(func) {\n    return () => {\n        if (waitFuncSet.has(func)) return\n\n        waitFuncSet.add(func)\n\n        Promise.resolve().then(() => {\n            if (waitFuncSet.has(func)) {\n                waitFuncSet.delete(func)\n                func()\n            }\n        }).catch(() => {\n            // ignore\n        })\n    }\n}\n\n/**\n * 清空节流缓存\n */\nfunction flushThrottleCache() {\n    waitFuncSet.forEach(waitFunc => waitFunc && waitFunc())\n    waitFuncSet.clear()\n}\n\n/**\n * 补全 url\n */\nfunction completeURL(url, defaultOrigin, notTransHttps) {\n    const config = cache.getConfig()\n\n    // 处理 url 前缀\n    if (url.indexOf('//') === 0) {\n        url = 'https:' + url\n    } else if (url[0] === '/') {\n        url = (config.origin || defaultOrigin) + url\n    }\n\n    if (!notTransHttps && url.indexOf('http:') === 0) {\n        url = url.replace(/^http:/ig, 'https:')\n    }\n\n    return url\n}\n\n/**\n * 解码特殊字符\n */\nfunction decodeContent(content) {\n    return content\n        .replace(/&nbsp;/g, '\\u00A0')\n        .replace(/&ensp;/g, '\\u2002')\n        .replace(/&emsp;/g, '\\u2003')\n        .replace(/&lt;/g, '<')\n        .replace(/&gt;/g, '>')\n        .replace(/&quot;/g, '\"')\n        .replace(/&apos;/g, '\\'')\n        .replace(/&amp;/g, '&')\n}\n\n/**\n * 判断该标签在小程序中是否支持\n */\nconst NOT_SUPPORT_TAG_NAME_LIST = ['IFRAME']\nfunction isTagNameSupport(tagName) {\n    return NOT_SUPPORT_TAG_NAME_LIST.indexOf(tagName) === -1\n}\n\nmodule.exports = {\n    toDash,\n    toCamel,\n    getId,\n    getPageRoute,\n    getPageName,\n    throttle,\n    flushThrottleCache,\n    completeURL,\n    decodeContent,\n    isTagNameSupport,\n}\n","const pageMap = {}\nlet configCache = {}\nconst cookieCache = {}\n\n/**\n * 初始化\n */\nfunction init(pageId, options) {\n    pageMap[pageId] = {\n        window: options.window,\n        document: options.document,\n        nodeIdMap: options.nodeIdMap,\n    }\n}\n\n/**\n * 销毁\n */\nfunction destroy(pageId) {\n    delete pageMap[pageId]\n}\n\n/**\n * 获取 document\n */\nfunction getDocument(pageId) {\n    return pageMap[pageId] && pageMap[pageId].document\n}\n\n/**\n * 获取 window\n */\nfunction getWindow(pageId) {\n    return pageMap[pageId] && pageMap[pageId].window\n}\n\n/**\n * 存储 domNode 映射\n */\nfunction setNode(pageId, nodeId, domNode = null) {\n    const document = pageMap[pageId] && pageMap[pageId].document\n\n    // 运行前调用，不做任何操作\n    if (!document) return\n    // 相当于删除映射\n    if (!domNode) return pageMap[pageId].nodeIdMap[nodeId] = domNode\n\n    let parentNode = domNode.parentNode\n\n    while (parentNode && parentNode !== document.body) {\n        parentNode = parentNode.parentNode\n    }\n\n    pageMap[pageId].nodeIdMap[nodeId] = parentNode === document.body ? domNode : null\n}\n\n/**\n * 根据 nodeId 获取 domNode\n */\nfunction getNode(pageId, nodeId) {\n    return pageMap[pageId] && pageMap[pageId].nodeIdMap[nodeId]\n}\n\n/**\n * 存储全局 config\n */\nfunction setConfig(config) {\n    configCache = config\n}\n\n/**\n * 获取全局 config\n */\nfunction getConfig() {\n    return configCache\n}\n\n/**\n * 获取全局 cookie\n */\nfunction getCookie() {\n    return cookieCache\n}\n\nmodule.exports = {\n    init,\n    destroy,\n    getDocument,\n    getWindow,\n    setNode,\n    getNode,\n    setConfig,\n    getConfig,\n    getCookie,\n}\n","const Document = _require('./document')\nconst EventTarget = _require('./event/event-target')\nconst Event = _require('./event/event')\nconst OriginalCustomEvent = _require('./event/custom-event')\nconst Location = _require('./bom/location')\nconst Navigator = _require('./bom/navigator')\nconst Screen = _require('./bom/screen')\nconst History = _require('./bom/history')\nconst Miniprogram = _require('./bom/miniprogram')\nconst LocalStorage = _require('./bom/local-storage')\nconst SessionStorage = _require('./bom/session-storage')\nconst Performance = _require('./bom/performance')\nconst OriginalXMLHttpRequest = _require('./bom/xml-http-request')\nconst Node = _require('./node/node')\nconst Element = _require('./node/element')\nconst TextNode = _require('./node/text-node')\nconst Comment = _require('./node/comment')\nconst ClassList = _require('./node/class-list')\nconst Style = _require('./node/style')\nconst Attribute = _require('./node/attribute')\nconst cache = _require('./util/cache')\nconst tool = _require('./util/tool')\n\nlet lastRafTime = 0\nconst WINDOW_PROTOTYPE_MAP = {\n    location: Location.prototype,\n    navigator: Navigator.prototype,\n    performance: Performance.prototype,\n    screen: Screen.prototype,\n    history: History.prototype,\n    localStorage: LocalStorage.prototype,\n    sessionStorage: SessionStorage.prototype,\n    event: Event.prototype,\n}\nconst ELEMENT_PROTOTYPE_MAP = {\n    attribute: Attribute.prototype,\n    classList: ClassList.prototype,\n    style: Style.prototype,\n}\nconst subscribeMap = {}\nconst globalObject = {}\n\nclass Window extends EventTarget {\n    constructor(pageId) {\n        super()\n\n        const timeOrigin = +new Date()\n        const that = this\n\n        this.$_pageId = pageId\n\n        this.$_outerHeight = 0\n        this.$_outerWidth = 0\n        this.$_innerHeight = 0\n        this.$_innerWidth = 0\n\n        this.$_location = new Location(pageId)\n        this.$_navigator = new Navigator()\n        this.$_screen = new Screen()\n        this.$_history = new History(this.$_location)\n        this.$_miniprogram = new Miniprogram(pageId)\n        this.$_localStorage = new LocalStorage(this)\n        this.$_sessionStorage = new SessionStorage(this)\n        this.$_performance = new Performance(timeOrigin)\n\n        this.$_nowFetchingWebviewInfoPromise = null // 正在拉取 webview 端信息的 promise 实例\n\n        this.$_fetchDeviceInfo()\n        this.$_initInnerEvent()\n\n        // 补充实例的属性，用于 'xxx' in XXX 判断\n        this.onhashchange = null\n\n        this.$_elementConstructor = function HTMLElement(...args) {\n            return Element.$$create(...args)\n        }\n        this.$_customEventConstructor = class CustomEvent extends OriginalCustomEvent {\n            constructor(name = '', options = {}) {\n                options.timeStamp = +new Date() - timeOrigin\n                super(name, options)\n            }\n        }\n        this.$_xmlHttpRequestConstructor = class XMLHttpRequest extends OriginalXMLHttpRequest {\n            constructor() {\n                super(that)\n            }\n        }\n\n        // react 环境兼容\n        this.HTMLIFrameElement = function() {}\n    }\n\n    /**\n     * 初始化内部事件\n     */\n    $_initInnerEvent() {\n        // 监听 location 的事件\n        this.$_location.addEventListener('hashchange', ({oldURL, newURL}) => {\n            this.$$trigger('hashchange', {\n                event: new Event({\n                    name: 'hashchange',\n                    target: this,\n                    eventPhase: Event.AT_TARGET,\n                    $$extra: {\n                        oldURL,\n                        newURL,\n                    },\n                }),\n                currentTarget: this,\n            })\n        })\n\n        // 监听 history 的事件\n        this.$_history.addEventListener('popstate', ({state}) => {\n            this.$$trigger('popstate', {\n                event: new Event({\n                    name: 'popstate',\n                    target: this,\n                    eventPhase: Event.AT_TARGET,\n                    $$extra: {state},\n                }),\n                currentTarget: this,\n            })\n        })\n    }\n\n    /**\n     * 拉取设备参数\n     */\n    $_fetchDeviceInfo() {\n        try {\n            const info = wx.getSystemInfoSync()\n\n            this.$_outerHeight = info.screenHeight\n            this.$_outerWidth = info.screenWidth\n            this.$_innerHeight = info.windowHeight\n            this.$_innerWidth = info.windowWidth\n\n            this.$_screen.$$reset(info)\n            this.$_navigator.$$reset(info)\n        } catch (err) {\n            // ignore\n        }\n    }\n\n    /**\n     * 拉取处理切面必要的信息\n     */\n    $_getAspectInfo(descriptor) {\n        if (!descriptor || typeof descriptor !== 'string') return\n\n        descriptor = descriptor.split('.')\n        const main = descriptor[0]\n        const sub = descriptor[1]\n        let method = descriptor[1]\n        let type = descriptor[2]\n        let prototype\n\n        // 找出对象原型\n        if (main === 'window') {\n            if (WINDOW_PROTOTYPE_MAP[sub]) {\n                prototype = WINDOW_PROTOTYPE_MAP[sub]\n                method = type\n                type = descriptor[3]\n            } else {\n                prototype = Window.prototype\n            }\n        } else if (main === 'document') {\n            prototype = Document.prototype\n        } else if (main === 'element') {\n            if (ELEMENT_PROTOTYPE_MAP[sub]) {\n                prototype = ELEMENT_PROTOTYPE_MAP[sub]\n                method = type\n                type = descriptor[3]\n            } else {\n                prototype = Element.prototype\n            }\n        } else if (main === 'textNode') {\n            prototype = TextNode.prototype\n        } else if (main === 'comment') {\n            prototype = Comment.prototype\n        }\n\n        return {prototype, method, type}\n    }\n\n    /**\n     * 暴露给小程序用的对象\n     */\n    get $$miniprogram() {\n        return this.$_miniprogram\n    }\n\n    /**\n     * 获取全局共享对象\n     */\n    get $$global() {\n        return globalObject\n    }\n\n    /**\n     * 销毁实例\n     */\n    $$destroy() {\n        super.$$destroy()\n\n        const pageId = this.$_pageId\n\n        Object.keys(subscribeMap).forEach(name => {\n            const handlersMap = subscribeMap[name]\n            if (handlersMap[pageId]) handlersMap[pageId] = null\n        })\n    }\n\n    /**\n     * 小程序端的 getComputedStyle 实现\n     * https://developers.weixin.qq.com/miniprogram/dev/api/wxml/NodesRef.fields.html\n     */\n    $$getComputedStyle(dom, computedStyle = []) {\n        tool.flushThrottleCache() // 先清空 setData\n        return new Promise((resolve, reject) => {\n            if (dom.tagName === 'BODY') {\n                this.$$createSelectorQuery().select('.miniprogram-root').fields({computedStyle}, res => (res ? resolve(res) : reject())).exec()\n            } else {\n                this.$$createSelectorQuery().select(`.miniprogram-root >>> .node-${dom.$$nodeId}`).fields({computedStyle}, res => (res ? resolve(res) : reject())).exec()\n            }\n        })\n    }\n\n    /**\n     * 强制清空 setData 缓存\n     */\n    $$forceRender() {\n        tool.flushThrottleCache()\n    }\n\n    /**\n     * 触发节点事件\n     */\n    $$trigger(eventName, options = {}) {\n        if (eventName === 'error' && typeof options.event === 'string') {\n            // 此处触发自 App.onError 钩子\n            const errStack = options.event\n            const errLines = errStack.split('\\n')\n            let message = ''\n            for (let i = 0, len = errLines.length; i < len; i++) {\n                const line = errLines[i]\n                if (line.trim().indexOf('at') !== 0) {\n                    message += (line + '\\n')\n                } else {\n                    break\n                }\n            }\n\n            const error = new Error(message)\n            error.stack = errStack\n            options.event = new this.$_customEventConstructor('error', {\n                target: this,\n                $$extra: {\n                    message,\n                    filename: '',\n                    lineno: 0,\n                    colno: 0,\n                    error,\n                },\n            })\n            options.args = [message, error]\n\n            // window.onerror 比较特殊，需要调整参数\n            if (typeof this.onerror === 'function' && !this.onerror.$$isOfficial) {\n                const oldOnError = this.onerror\n                this.onerror = (event, message, error) => {\n                    oldOnError.call(this, message, '', 0, 0, error)\n                }\n                this.onerror.$$isOfficial = true // 标记为官方封装的方法\n            }\n        }\n\n        super.$$trigger(eventName, options)\n    }\n\n    /**\n     * 获取原型\n     */\n    $$getPrototype(descriptor) {\n        if (!descriptor || typeof descriptor !== 'string') return\n\n        descriptor = descriptor.split('.')\n        const main = descriptor[0]\n        const sub = descriptor[1]\n\n        if (main === 'window') {\n            if (WINDOW_PROTOTYPE_MAP[sub]) {\n                return WINDOW_PROTOTYPE_MAP[sub]\n            } else if (!sub) {\n                return Window.prototype\n            }\n        } else if (main === 'document') {\n            if (!sub) {\n                return Document.prototype\n            }\n        } else if (main === 'element') {\n            if (ELEMENT_PROTOTYPE_MAP[sub]) {\n                return ELEMENT_PROTOTYPE_MAP[sub]\n            } else if (!sub) {\n                return Element.prototype\n            }\n        } else if (main === 'textNode') {\n            if (!sub) {\n                return TextNode.prototype\n            }\n        } else if (main === 'comment') {\n            if (!sub) {\n                return Comment.prototype\n            }\n        }\n    }\n\n    /**\n     * 扩展 dom/bom 对象\n     */\n    $$extend(descriptor, options) {\n        if (!descriptor || !options || typeof descriptor !== 'string' || typeof options !== 'object') return\n\n        const prototype = this.$$getPrototype(descriptor)\n        const keys = Object.keys(options)\n\n        if (prototype) keys.forEach(key => prototype[key] = options[key])\n    }\n\n    /**\n     * 对 dom/bom 对象方法追加切面方法\n     */\n    $$addAspect(descriptor, func) {\n        if (!descriptor || !func || typeof descriptor !== 'string' || typeof func !== 'function') return\n\n        const {prototype, method, type} = this.$_getAspectInfo(descriptor)\n\n        // 处理切面\n        if (prototype && method && type) {\n            const methodInPrototype = prototype[method]\n            if (typeof methodInPrototype !== 'function') return\n\n            // 重写原始方法\n            if (!methodInPrototype.$$isHook) {\n                prototype[method] = function(...args) {\n                    const beforeFuncs = prototype[method].$$before || []\n                    const afterFuncs = prototype[method].$$after || []\n\n                    if (beforeFuncs.length) {\n                        for (const beforeFunc of beforeFuncs) {\n                            const isStop = beforeFunc.apply(this, args)\n                            if (isStop) return\n                        }\n                    }\n\n                    const res = methodInPrototype.apply(this, args)\n\n                    if (afterFuncs.length) {\n                        for (const afterFunc of afterFuncs) {\n                            afterFunc.call(this, res)\n                        }\n                    }\n\n                    return res\n                }\n                prototype[method].$$isHook = true\n                prototype[method].$$originalMethod = methodInPrototype\n            }\n\n            // 追加切面方法\n            if (type === 'before') {\n                prototype[method].$$before = prototype[method].$$before || []\n                prototype[method].$$before.push(func)\n            } else if (type === 'after') {\n                prototype[method].$$after = prototype[method].$$after || []\n                prototype[method].$$after.push(func)\n            }\n        }\n    }\n\n    /**\n     * 删除对 dom/bom 对象方法追加前置/后置处理\n     */\n    $$removeAspect(descriptor, func) {\n        if (!descriptor || !func || typeof descriptor !== 'string' || typeof func !== 'function') return\n\n        const {prototype, method, type} = this.$_getAspectInfo(descriptor)\n\n        // 处理切面\n        if (prototype && method && type) {\n            const methodInPrototype = prototype[method]\n            if (typeof methodInPrototype !== 'function' || !methodInPrototype.$$isHook) return\n\n            // 移除切面方法\n            if (type === 'before' && methodInPrototype.$$before) {\n                methodInPrototype.$$before.splice(methodInPrototype.$$before.indexOf(func), 1)\n            } else if (type === 'after' && methodInPrototype.$$after) {\n                methodInPrototype.$$after.splice(methodInPrototype.$$after.indexOf(func), 1)\n            }\n\n            if ((!methodInPrototype.$$before || !methodInPrototype.$$before.length) && (!methodInPrototype.$$after || !methodInPrototype.$$after.length)) {\n                prototype[method] = methodInPrototype.$$originalMethod\n            }\n        }\n    }\n\n    /**\n     * 订阅广播事件\n     */\n    $$subscribe(name, handler) {\n        if (typeof name !== 'string' || typeof handler !== 'function') return\n\n        const pageId = this.$_pageId\n        subscribeMap[name] = subscribeMap[name] || {}\n        subscribeMap[name][pageId] = subscribeMap[name][pageId] || []\n        subscribeMap[name][pageId].push(handler)\n    }\n\n    /**\n     * 取消订阅广播事件\n     */\n    $$unsubscribe(name, handler) {\n        const pageId = this.$_pageId\n\n        if (typeof name !== 'string' || !subscribeMap[name] || !subscribeMap[name][pageId]) return\n\n        const handlers = subscribeMap[name][pageId]\n        if (!handler) {\n            // 取消所有 handler 的订阅\n            handlers.length = 0\n        } else if (typeof handler === 'function') {\n            const index = handlers.indexOf(handler)\n            if (index !== -1) handlers.splice(index, 1)\n        }\n    }\n\n    /**\n     * 发布广播事件\n     */\n    $$publish(name, data) {\n        if (typeof name !== 'string' || !subscribeMap[name]) return\n\n        Object.keys(subscribeMap[name]).forEach(pageId => {\n            const handlers = subscribeMap[name][pageId]\n            if (handlers && handlers.length) {\n                handlers.forEach(handler => {\n                    if (typeof handler !== 'function') return\n\n                    try {\n                        handler.call(null, data)\n                    } catch (err) {\n                        console.error(err)\n                    }\n                })\n            }\n        })\n    }\n\n    /**\n     * 对外属性和方法\n     */\n    get document() {\n        return cache.getDocument(this.$_pageId) || null\n    }\n\n    get location() {\n        return this.$_location\n    }\n\n    set location(href) {\n        this.$_location.href = href\n    }\n\n    get navigator() {\n        return this.$_navigator\n    }\n\n    get CustomEvent() {\n        return this.$_customEventConstructor\n    }\n\n    get Event() {\n        return Event\n    }\n\n    get self() {\n        return this\n    }\n\n    get localStorage() {\n        return this.$_localStorage\n    }\n\n    get sessionStorage() {\n        return this.$_sessionStorage\n    }\n\n    get screen() {\n        return this.$_screen\n    }\n\n    get history() {\n        return this.$_history\n    }\n\n    get outerHeight() {\n        return this.$_outerHeight\n    }\n\n    get outerWidth() {\n        return this.$_outerWidth\n    }\n\n    get innerHeight() {\n        return this.$_innerHeight\n    }\n\n    get innerWidth() {\n        return this.$_innerWidth\n    }\n\n    get Image() {\n        return this.document.$$imageConstructor\n    }\n\n    get setTimeout() {\n        return setTimeout.bind(null)\n    }\n\n    get clearTimeout() {\n        return clearTimeout.bind(null)\n    }\n\n    get setInterval() {\n        return setInterval.bind(null)\n    }\n\n    get clearInterval() {\n        return clearInterval.bind(null)\n    }\n\n    get HTMLElement() {\n        return this.$_elementConstructor\n    }\n\n    get Element() {\n        return Element\n    }\n\n    get Node() {\n        return Node\n    }\n\n    get RegExp() {\n        return RegExp\n    }\n\n    get Math() {\n        return Math\n    }\n\n    get Number() {\n        return Number\n    }\n\n    get Boolean() {\n        return Boolean\n    }\n\n    get String() {\n        return String\n    }\n\n    get Date() {\n        return Date\n    }\n\n    get Symbol() {\n        return Symbol\n    }\n\n    get parseInt() {\n        return parseInt\n    }\n\n    get parseFloat() {\n        return parseFloat\n    }\n\n    get performance() {\n        return this.$_performance\n    }\n\n    get SVGElement() {\n        // 不作任何实现，只作兼容使用\n        console.warn('window.SVGElement is not supported')\n        return function() {}\n    }\n\n    get XMLHttpRequest() {\n        return this.$_xmlHttpRequestConstructor\n    }\n\n    open(url) {\n        // 不支持 windowName 和 windowFeatures\n        this.location.$$open(url)\n    }\n\n    close() {\n        wx.navigateBack({\n            delta: 1,\n        })\n    }\n\n    getComputedStyle() {\n        // 不作任何实现，只作兼容使用\n        console.warn('window.getComputedStyle is not supported, please use window.$$getComputedStyle instead of it')\n        return {\n            // vue transition 组件使用\n            transitionDelay: '',\n            transitionDuration: '',\n            animationDelay: '',\n            animationDuration: '',\n        }\n    }\n\n    requestAnimationFrame(callback) {\n        if (typeof callback !== 'function') return\n\n        const now = new Date()\n        const nextRafTime = Math.max(lastRafTime + 16, now)\n        return setTimeout(() => {\n            callback(nextRafTime)\n            lastRafTime = nextRafTime\n        }, nextRafTime - now)\n    }\n\n    cancelAnimationFrame(timeId) {\n        return clearTimeout(timeId)\n    }\n}\n\nmodule.exports = Window\n","const EventTarget = _require('./event/event-target')\nconst Tree = _require('./tree/tree')\nconst Node = _require('./node/node')\nconst Element = _require('./node/element')\nconst TextNode = _require('./node/text-node')\nconst Comment = _require('./node/comment')\nconst tool = _require('./util/tool')\nconst cache = _require('./util/cache')\nconst A = _require('./node/element/a')\nconst Image = _require('./node/element/image')\nconst Input = _require('./node/element/input')\nconst Textarea = _require('./node/element/textarea')\nconst Video = _require('./node/element/video')\nconst Canvas = _require('./node/element/canvas')\nconst NotSupport = _require('./node/element/not-support')\nconst WxComponent = _require('./node/element/wx-component')\nconst WxCustomComponent = _require('./node/element/wx-custom-component')\nconst Cookie = _require('./bom/cookie')\n\nconst CONSTRUCTOR_MAP = {\n    A,\n    IMG: Image,\n    INPUT: Input,\n    TEXTAREA: Textarea,\n    VIDEO: Video,\n    CANVAS: Canvas,\n    'WX-COMPONENT': WxComponent,\n}\nconst WX_COMPONENT_MAP = {}\nconst WX_COMPONENT_LIST = [\n    'movable-view', 'cover-image', 'cover-view', 'movable-area', 'scroll-view', 'swiper', 'swiper-item', 'view',\n    'icon', 'progress', 'rich-text', 'text',\n    'button', 'checkbox', 'checkbox-group', 'editor', 'form', 'input', 'label', 'picker', 'picker-view', 'picker-view-column', 'radio', 'radio-group', 'slider', 'switch', 'textarea',\n    'functional-page-navigator', 'navigator',\n    'audio', 'camera', 'image', 'live-player', 'live-pusher', 'video',\n    'map',\n    'canvas',\n    'ad', 'official-account', 'open-data', 'web-view',\n    // 特殊补充\n    'capture', 'catch', 'animation'\n]\nWX_COMPONENT_LIST.forEach(name => WX_COMPONENT_MAP[name] = name)\nlet WX_CUSTOM_COMPONENT_MAP = {}\n\n/**\n * 判断是否是内置组件\n */\nfunction checkIsWxComponent(tagName, notNeedPrefix) {\n    const hasPrefix = tagName.indexOf('wx-') === 0\n    if (notNeedPrefix) {\n        return hasPrefix ? WX_COMPONENT_MAP[tagName.slice(3)] : WX_COMPONENT_MAP[tagName]\n    } else {\n        return hasPrefix ? WX_COMPONENT_MAP[tagName.slice(3)] : false\n    }\n}\n\nclass Document extends EventTarget {\n    constructor(pageId, nodeIdMap) {\n        super()\n\n        const config = cache.getConfig()\n        const runtime = config.runtime || {}\n        const cookieStore = runtime.cookieStore\n        WX_CUSTOM_COMPONENT_MAP = runtime.usingComponents || {}\n\n        this.$_pageId = pageId\n        const pageRoute = tool.getPageRoute(pageId)\n        const pageName = tool.getPageName(pageRoute)\n\n        // 用于封装特殊标签和对应构造器\n        const that = this\n        this.$_imageConstructor = function HTMLImageElement(width, height) {\n            return Image.$$create({\n                tagName: 'img',\n                nodeId: `b-${tool.getId()}`, // 运行时生成，使用 b- 前缀\n                attrs: {},\n                width,\n                height,\n            }, that.$_tree)\n        }\n\n        this.$_pageId = pageId\n        this.$_tree = new Tree(pageId, {\n            type: 'element',\n            tagName: 'body',\n            attrs: {},\n            unary: false,\n            nodeId: 'e-body',\n            children: [],\n        }, nodeIdMap, this)\n        this.$_cookie = new Cookie(pageName)\n        this.$_config = null\n\n        // documentElement\n        this.$_node = this.$$createElement({\n            tagName: 'html',\n            attrs: {},\n            nodeId: `a-${tool.getId()}`, // 运行前生成，使用 a- 前缀\n            type: Node.DOCUMENT_NODE,\n        })\n        this.$_node.$$updateParent(this) // documentElement 的 parentNode 是 document\n        this.$_node.scrollTop = 0\n\n        // head 元素\n        this.$_head = this.createElement('head')\n\n        // 更新 body 的 parentNode\n        this.$_tree.root.$$updateParent(this.$_node)\n\n        // 持久化 cookie\n        if (cookieStore !== 'memory' && cookieStore !== 'globalmemory') {\n            try {\n                const key = cookieStore === 'storage' ? `PAGE_COOKIE_${pageName}` : 'PAGE_COOKIE'\n                const cookie = wx.getStorageSync(key)\n                if (cookie) this.$$cookieInstance.deserialize(cookie)\n            } catch (err) {\n                // ignore\n            }\n        }\n    }\n\n    /**\n     * Image 构造器\n     */\n    get $$imageConstructor() {\n        return this.$_imageConstructor\n    }\n\n    get $$pageId() {\n        return this.$_pageId\n    }\n\n    /**\n     * 完整的 cookie，包括 httpOnly 也能获取到\n     */\n    get $$cookie() {\n        return this.$_cookie.getCookie(this.URL, true)\n    }\n\n    /**\n     * 获取 cookie 实例\n     */\n    get $$cookieInstance() {\n        return this.$_cookie\n    }\n\n    /**\n     * 创建内置组件的时候是否支持不用前缀写法\n     */\n    get $$notNeedPrefix() {\n        if (!this.$_config) this.$_config = cache.getConfig()\n        return this.$_config && this.$_config.runtime && this.$_config.runtime.wxComponent === 'noprefix'\n    }\n\n    /**\n     * 设置页面显示状态\n     */\n    set $$visibilityState(value) {\n        this.$_visibilityState = value\n    }\n\n    /**\n     * 触发节点事件\n     */\n    $$trigger(eventName, options) {\n        this.documentElement.$$trigger(eventName, options)\n    }\n\n    /**\n     * 内部所有节点创建都走此接口，统一把控\n     */\n    $$createElement(options, tree) {\n        const originTagName = options.tagName\n        const tagName = originTagName.toUpperCase()\n        let wxComponentName = null\n        tree = tree || this.$_tree\n\n        const constructorClass = CONSTRUCTOR_MAP[tagName]\n        if (constructorClass) {\n            return constructorClass.$$create(options, tree)\n        // eslint-disable-next-line no-cond-assign\n        } else if (wxComponentName = checkIsWxComponent(originTagName, this.$$notNeedPrefix)) {\n            // 内置组件的特殊写法，转成 wx-component 节点\n            options.tagName = 'wx-component'\n            options.attrs = options.attrs || {}\n            options.attrs.behavior = wxComponentName\n            return WxComponent.$$create(options, tree)\n        } else if (WX_CUSTOM_COMPONENT_MAP[originTagName]) {\n            // 自定义组件的特殊写法，转成 wx-custom-component 节点\n            options.tagName = 'wx-custom-component'\n            options.attrs = options.attrs || {}\n            options.componentName = originTagName\n            return WxCustomComponent.$$create(options, tree)\n        } else if (!tool.isTagNameSupport(tagName)) {\n            return NotSupport.$$create(options, tree)\n        } else {\n            return Element.$$create(options, tree)\n        }\n    }\n\n    /**\n     * 内部所有文本节点创建都走此接口，统一把控\n     */\n    $$createTextNode(options, tree) {\n        return TextNode.$$create(options, tree || this.$_tree)\n    }\n\n    /**\n     * 内部所有注释节点创建都走此接口，统一把控\n     */\n    $$createComment(options, tree) {\n        return Comment.$$create(options, tree || this.$_tree)\n    }\n\n    /**\n     * 处理 Set-Cookie 头串\n     */\n    $$setCookie(str) {\n        if (str && typeof str === 'string') {\n            let start = 0\n            let startSplit = 0\n            let nextSplit = str.indexOf(',', startSplit)\n            const cookies = []\n\n            while (nextSplit >= 0) {\n                const lastSplitStr = str.substring(start, nextSplit)\n                const splitStr = str.substr(nextSplit)\n\n                if (/^,\\s*([^,=;\\x00-\\x1F]+)=([^;\\n\\r\\0\\x00-\\x1F]*).*/.test(splitStr)) {\n                // 分割成功，则上一片是完整 cookie\n                    cookies.push(lastSplitStr)\n                    start = nextSplit + 1\n                }\n\n                startSplit = nextSplit + 1\n                nextSplit = str.indexOf(',', startSplit)\n            }\n\n            // 塞入最后一片 cookie\n            cookies.push(str.substr(start))\n\n            cookies.forEach(cookie => this.cookie = cookie)\n        }\n    }\n\n    /**\n     * 对外属性和方法\n     */\n    get nodeType() {\n        return Node.DOCUMENT_NODE\n    }\n\n    get documentElement() {\n        return this.$_node\n    }\n\n    get body() {\n        return this.$_tree.root\n    }\n\n    get nodeName() {\n        return '#document'\n    }\n\n    get head() {\n        return this.$_head\n    }\n\n    get defaultView() {\n        return cache.getWindow(this.$_pageId) || null\n    }\n\n    get URL() {\n        if (this.defaultView) return this.defaultView.location.href\n\n        return ''\n    }\n\n    get cookie() {\n        return this.$_cookie.getCookie(this.URL)\n    }\n\n    set cookie(value) {\n        if (!value || typeof value !== 'string') return\n\n        this.$_cookie.setCookie(value, this.URL)\n    }\n\n    get visibilityState() {\n        return this.$_visibilityState\n    }\n\n    get hidden() {\n        return this.$_visibilityState === 'visible'\n    }\n\n    getElementById(id) {\n        if (typeof id !== 'string') return\n\n        return this.$_tree.getById(id) || null\n    }\n\n    getElementsByTagName(tagName) {\n        if (typeof tagName !== 'string') return []\n\n        return this.$_tree.getByTagName(tagName)\n    }\n\n    getElementsByClassName(className) {\n        if (typeof className !== 'string') return []\n\n        return this.$_tree.getByClassName(className)\n    }\n\n    getElementsByName(name) {\n        if (typeof name !== 'string') return []\n\n        return this.$_tree.query(`*[name=${name}]`)\n    }\n\n    querySelector(selector) {\n        if (typeof selector !== 'string') return\n\n        return this.$_tree.query(selector)[0] || null\n    }\n\n    querySelectorAll(selector) {\n        if (typeof selector !== 'string') return []\n\n        return this.$_tree.query(selector)\n    }\n\n    createElement(tagName) {\n        if (typeof tagName !== 'string') return\n\n        tagName = tagName.trim()\n        if (!tagName) return\n\n        return this.$$createElement({\n            tagName,\n            nodeId: `b-${tool.getId()}`, // 运行时生成，使用 b- 前缀\n        })\n    }\n\n    createElementNS(ns, tagName) {\n        // 不支持真正意义上的 createElementNS，转成调用 createElement\n        return this.createElement(tagName)\n    }\n\n    createTextNode(content) {\n        content = '' + content\n\n        return this.$$createTextNode({\n            content,\n            nodeId: `b-${tool.getId()}`, // 运行时生成，使用 b- 前缀\n        })\n    }\n\n    createComment() {\n        // 忽略注释内容的传入\n        return this.$$createComment({\n            nodeId: `b-${tool.getId()}`, // 运行时生成，使用 b- 前缀\n        })\n    }\n\n    createDocumentFragment() {\n        return Element.$$create({\n            tagName: 'documentfragment',\n            nodeId: `b-${tool.getId()}`, // 运行时生成，使用 b- 前缀\n            nodeType: Node.DOCUMENT_FRAGMENT_NODE,\n        }, this.$_tree)\n    }\n\n    createEvent() {\n        const window = cache.getWindow(this.$_pageId)\n\n        return new window.CustomEvent()\n    }\n\n    addEventListener(eventName, handler, options) {\n        this.documentElement.addEventListener(eventName, handler, options)\n    }\n\n    removeEventListener(eventName, handler, isCapture) {\n        this.documentElement.removeEventListener(eventName, handler, isCapture)\n    }\n\n    dispatchEvent(evt) {\n        this.documentElement.dispatchEvent(evt)\n    }\n}\n\nmodule.exports = Document\n","const Event = _require('./event')\nconst CustomEvent = _require('./custom-event')\n\n/**\n * 比较 touch 列表\n */\nfunction compareTouchList(a, b) {\n    if (a.length !== b.length) return false\n\n    for (let i, len = a.length; i < len; i++) {\n        const aItem = a[i]\n        const bItem = b[i]\n\n        if (aItem.identifier !== bItem.identifier) return false\n        if (aItem.pageX !== bItem.pageX || aItem.pageY !== bItem.pageY || aItem.clientX !== bItem.clientX || aItem.clientY !== bItem.clientY) return false\n    }\n\n    return true\n}\n\nclass EventTarget {\n    constructor(...args) {\n        this.$$init(...args)\n    }\n\n    /**\n     * 初始化实例\n     */\n    $$init() {\n        // 补充实例的属性，用于 'xxx' in XXX 判断\n        this.ontouchstart = null\n        this.ontouchmove = null\n        this.ontouchend = null\n        this.ontouchcancel = null\n        this.oninput = null\n        this.onfocus = null\n        this.onblur = null\n        this.onchange = null\n\n        this.$_miniprogramEvent = null // 记录已触发的小程序事件\n        this.$_eventHandlerMap = null\n    }\n\n    /**\n     * 销毁实例\n     */\n    $$destroy() {\n        Object.keys(this).forEach(key => {\n            // 处理 on 开头的属性\n            if (key.indexOf('on') === 0) this[key] = null\n            // 处理外部挂进来的私有的属性\n            if (key[0] === '_') this[key] = null\n            if (key[0] === '$' && (key[1] !== '_' && key[1] !== '$')) this[key] = null\n        })\n\n        this.$_miniprogramEvent = null\n        this.$_eventHandlerMap = null\n    }\n\n    set $_eventHandlerMap(value) {\n        this.$__eventHandlerMap = value\n    }\n\n    get $_eventHandlerMap() {\n        if (!this.$__eventHandlerMap) this.$__eventHandlerMap = Object.create(null)\n        return this.$__eventHandlerMap\n    }\n\n    /**\n     * 触发事件捕获、冒泡流程\n     */\n    static $$process(target, eventName, miniprogramEvent, extra, callback) {\n        let event\n\n        if (eventName instanceof CustomEvent || eventName instanceof Event) {\n            // 传入的是事件对象\n            event = eventName\n            eventName = event.type\n        }\n\n        eventName = eventName.toLowerCase()\n\n        const path = [target]\n        let parentNode = target.parentNode\n\n        while (parentNode && parentNode.tagName !== 'HTML') {\n            path.push(parentNode)\n            parentNode = parentNode.parentNode\n        }\n\n        if (path[path.length - 1].tagName === 'BODY') {\n            // 如果最后一个节点是 document.body，则追加 document.documentElement\n            path.push(parentNode)\n        }\n\n        if (!event) {\n            // 此处特殊处理，不直接返回小程序的 event 对象\n            event = new Event({\n                name: eventName,\n                target,\n                timeStamp: miniprogramEvent.timeStamp,\n                touches: miniprogramEvent.touches,\n                changedTouches: miniprogramEvent.changedTouches,\n                bubbles: true, // 默认都可以冒泡 TODO\n                $$extra: extra,\n            })\n        }\n\n        // 捕获\n        for (let i = path.length - 1; i >= 0; i--) {\n            const currentTarget = path[i]\n\n            if (!event.$$canBubble) break // 判定冒泡是否结束\n            if (currentTarget === target) continue\n\n            // wx-capture 节点事件单独触发\n            if (currentTarget.tagName === 'WX-COMPONENT' && currentTarget.behavior === 'capture') continue\n\n            event.$$setCurrentTarget(currentTarget)\n            event.$$setEventPhase(Event.CAPTURING_PHASE)\n\n            currentTarget.$$trigger(eventName, {\n                event,\n                isCapture: true,\n            })\n            if (callback) callback(currentTarget, event, true)\n        }\n\n        // 目标\n        if (event.$$canBubble) {\n            event.$$setCurrentTarget(target)\n            event.$$setEventPhase(Event.AT_TARGET)\n\n            // 捕获和冒泡阶段监听的事件都要触发\n            target.$$trigger(eventName, {\n                event,\n                isCapture: true,\n                isTarget: true,\n            })\n            if (callback) callback(target, event, true)\n\n            target.$$trigger(eventName, {\n                event,\n                isCapture: false,\n                isTarget: true,\n            })\n            if (callback) callback(target, event, false)\n        }\n\n        if (event.bubbles) {\n            // 冒泡\n            for (const currentTarget of path) {\n                if (!event.$$canBubble) break // 判定冒泡是否结束\n                if (currentTarget === target) continue\n\n                // wx-capture 节点事件单独触发\n                if (currentTarget.tagName === 'WX-COMPONENT' && currentTarget.behavior === 'capture') continue\n\n                event.$$setCurrentTarget(currentTarget)\n                event.$$setEventPhase(Event.BUBBLING_PHASE)\n\n                currentTarget.$$trigger(eventName, {\n                    event,\n                    isCapture: false,\n                })\n                if (callback) callback(currentTarget, event, false)\n\n                // wx-catch 节点事件要结束冒泡\n                if (currentTarget.tagName === 'WX-COMPONENT' && currentTarget.behavior === 'catch') event.stopPropagation()\n            }\n        }\n\n        // 重置事件\n        event.$$setCurrentTarget(null)\n        event.$$setEventPhase(Event.NONE)\n\n        return event\n    }\n\n    /**\n     * 获取 handlers\n     */\n    $_getHandlers(eventName, isCapture, isInit) {\n        const handlerMap = this.$_eventHandlerMap\n\n        if (isInit) {\n            const handlerObj = handlerMap[eventName] = handlerMap[eventName] || {}\n\n            handlerObj.capture = handlerObj.capture || []\n            handlerObj.bubble = handlerObj.bubble || []\n\n            return isCapture ? handlerObj.capture : handlerObj.bubble\n        } else {\n            const handlerObj = handlerMap[eventName]\n\n            if (!handlerObj) return null\n\n            return isCapture ? handlerObj.capture : handlerObj.bubble\n        }\n    }\n\n    /**\n     * 触发节点事件\n     */\n    $$trigger(eventName, {\n        event, args = [], isCapture, isTarget\n    } = {}) {\n        eventName = eventName.toLowerCase()\n        const handlers = this.$_getHandlers(eventName, isCapture)\n        const onEventName = `on${eventName}`\n\n        if ((!isCapture || !isTarget) && typeof this[onEventName] === 'function') {\n            // 触发 onXXX 绑定的事件\n            if (event && event.$$immediateStop) return\n            try {\n                this[onEventName].call(this || null, event, ...args)\n            } catch (err) {\n                console.error(err)\n            }\n        }\n\n        if (handlers && handlers.length) {\n            // 触发 addEventListener 绑定的事件\n            handlers.forEach(handler => {\n                if (event && event.$$immediateStop) return\n                try {\n                    handler.call(this || null, event, ...args)\n                } catch (err) {\n                    console.error(err)\n                }\n            })\n        }\n    }\n\n    /**\n     * 检查该事件是否可以触发\n     */\n    $$checkEvent(miniprogramEvent) {\n        const last = this.$_miniprogramEvent\n        const now = miniprogramEvent\n\n        let flag = false\n\n        if (!last || last.timeStamp !== now.timeStamp) {\n            // 时间戳不同\n            flag = true\n        } else {\n            if (last.touches && now.touches && !compareTouchList(last.touches, now.touches)) {\n                // 存在不同的 touches\n                flag = true\n            } else if ((!last.touches && now.touches) || (last.touches && !now.touches)) {\n                // 存在一方没有 touches\n                flag = true\n            }\n\n            if (last.changedTouches && now.changedTouches && !compareTouchList(last.changedTouches, now.changedTouches)) {\n                // 存在不同的 changedTouches\n                flag = true\n            } else if ((!last.changedTouches && now.changedTouches) || (last.changedTouches && !now.changedTouches)) {\n                // 存在一方没有 changedTouches\n                flag = true\n            }\n        }\n\n        if (flag) this.$_miniprogramEvent = now\n        return flag\n    }\n\n    /**\n     * 清空某个事件的所有句柄\n     */\n    $$clearEvent(eventName, isCapture = false) {\n        if (typeof eventName !== 'string') return\n\n        eventName = eventName.toLowerCase()\n        const handlers = this.$_getHandlers(eventName, isCapture)\n\n        if (handlers && handlers.length) handlers.length = 0\n    }\n\n    /**\n     * 是否存在事件句柄，只考虑通过 addEventListener 绑定的句柄\n     */\n    $$hasEventHandler(eventName) {\n        eventName = eventName.toLowerCase()\n        const bubbleHandlers = this.$_getHandlers(eventName, false)\n        const captureHandlers = this.$_getHandlers(eventName, true)\n        return (bubbleHandlers && bubbleHandlers.length) || (captureHandlers && captureHandlers.length)\n    }\n\n    /**\n     * 对外属性和方法\n     */\n    addEventListener(eventName, handler, options) {\n        if (typeof eventName !== 'string' || typeof handler !== 'function') return\n\n        let isCapture = false\n\n        if (typeof options === 'boolean') isCapture = options\n        else if (typeof options === 'object') isCapture = options.capture\n\n        eventName = eventName.toLowerCase()\n        const handlers = this.$_getHandlers(eventName, isCapture, true)\n\n        handlers.push(handler)\n    }\n\n    removeEventListener(eventName, handler, isCapture = false) {\n        if (typeof eventName !== 'string' || typeof handler !== 'function') return\n\n        eventName = eventName.toLowerCase()\n        const handlers = this.$_getHandlers(eventName, isCapture)\n\n        if (handlers && handlers.length) handlers.splice(handlers.indexOf(handler), 1)\n    }\n\n    dispatchEvent(evt) {\n        if (evt instanceof CustomEvent) {\n            EventTarget.$$process(this, evt)\n        }\n\n        // 因为不支持 preventDefault，所以永远返回 true\n        return true\n    }\n}\n\nmodule.exports = EventTarget\n","/**\n * 检查节点间的关系\n */\nfunction checkRelation(node1, node2) {\n    if (node1 === node2) return true\n\n    while (node1) {\n        if (node1 === node2) return true\n\n        node1 = node1.parentNode\n    }\n\n    return false\n}\n\nclass Event {\n    constructor(options) {\n        this.$_name = options.name.toLowerCase()\n        this.$_target = options.target\n        this.$_timeStamp = options.timeStamp || Date.now()\n        this.$_currentTarget = options.currentTarget || options.target\n        this.$_eventPhase = options.eventPhase || Event.NONE\n        this.$_detail = options.detail || null\n        this.$_immediateStop = false\n        this.$_canBubble = true\n        this.$_bubbles = options.bubbles || false\n        this.$_touches = null\n        this.$_targetTouches = null\n        this.$_changedTouches = null\n        this.$_cancelable = false\n\n        // 补充字段\n        const extra = options.$$extra\n        if (extra) {\n            Object.keys(extra).forEach(key => {\n                this[key] = extra[key]\n            })\n        }\n\n        // 处理 touches\n        if (options.touches && options.touches.length) {\n            this.$_touches = options.touches.map(touch => ({...touch, target: options.target}))\n\n            this.$$checkTargetTouches()\n        } else if (options.touches) {\n            this.$_touches = []\n            this.$_targetTouches = []\n        }\n\n        // 处理 changedTouches\n        if (options.changedTouches && options.changedTouches.length) {\n            this.$_changedTouches = options.changedTouches.map(touch => ({...touch, target: options.target}))\n        } else if (options.changedTouches) {\n            this.$_changedTouches = []\n        }\n    }\n\n    /**\n     * 返回事件是否立即停止\n     */\n    get $$immediateStop() {\n        return this.$_immediateStop\n    }\n\n    /**\n     * 返回事件时否还可以冒泡\n     */\n    get $$canBubble() {\n        return this.$_canBubble\n    }\n\n    /**\n     * 设置 target\n     */\n    $$setTarget(target) {\n        this.$_target = target\n    }\n\n    /**\n     * 设置 currentTarget\n     */\n    $$setCurrentTarget(currentTarget) {\n        this.$_currentTarget = currentTarget\n        this.$$checkTargetTouches()\n    }\n\n    /**\n     * 设置事件所处阶段\n     */\n    $$setEventPhase(eventPhase) {\n        this.$_eventPhase = eventPhase\n    }\n\n    /**\n     * 检查 targetTouches\n     */\n    $$checkTargetTouches() {\n        if (this.$_touches && this.$_touches.length) {\n            this.$_targetTouches = this.$_touches.filter(touch => checkRelation(touch.target, this.$_currentTarget))\n        }\n    }\n\n    /**\n     * 对外属性和方法\n     */\n    get bubbles() {\n        return this.$_bubbles\n    }\n\n    get cancelable() {\n        return this.$_cancelable\n    }\n\n    get target() {\n        return this.$_target\n    }\n\n    get currentTarget() {\n        return this.$_currentTarget\n    }\n\n    get eventPhase() {\n        return this.$_eventPhase\n    }\n\n    get type() {\n        return this.$_name\n    }\n\n    get timeStamp() {\n        return this.$_timeStamp\n    }\n\n    get touches() {\n        return this.$_touches\n    }\n\n    get targetTouches() {\n        return this.$_targetTouches\n    }\n\n    get changedTouches() {\n        return this.$_changedTouches\n    }\n\n    set detail(value) {\n        this.$_detail = value\n    }\n\n    get detail() {\n        return this.$_detail\n    }\n\n    preventDefault() {\n        // 目前仅支持 a 标签的点击阻止\n        this.$_cancelable = true\n    }\n\n    stopPropagation() {\n        if (this.eventPhase === Event.NONE) return\n\n        this.$_canBubble = false\n    }\n\n    stopImmediatePropagation() {\n        if (this.eventPhase === Event.NONE) return\n\n        this.$_immediateStop = true\n        this.$_canBubble = false\n    }\n\n    initEvent(name = '', bubbles) {\n        if (typeof name !== 'string') return\n\n        this.$_name = name.toLowerCase()\n        this.$_bubbles = bubbles === undefined ? this.$_bubbles : !!bubbles\n    }\n}\n\n// 静态属性\nEvent.NONE = 0\nEvent.CAPTURING_PHASE = 1\nEvent.AT_TARGET = 2\nEvent.BUBBLING_PHASE = 3\n\nmodule.exports = Event\n","const Event = _require('./event')\n\nclass CustomEvent extends Event {\n    constructor(name = '', options = {}) {\n        super({\n            name,\n            ...options,\n        })\n    }\n}\n\nmodule.exports = CustomEvent\n","const QuerySelector = _require('./query-selector')\n\n/**\n * 遍历 dom 树，收集类和标签对应的节点列表\n */\nfunction walkDomTree(node, cache) {\n    const tagMap = cache.tagMap = cache.tagMap || {}\n    const classMap = cache.classMap = cache.classMap || {}\n    const {tagName, classList} = node\n\n    // 标签\n    tagMap[tagName] = tagMap[tagName] || []\n    tagMap[tagName].push(node)\n\n    // 类\n    for (const className of classList) {\n        classMap[className] = classMap[className] || []\n        classMap[className].push(node)\n    }\n\n    const children = node.children || []\n\n    for (const child of children) {\n        // 递归遍历\n        walkDomTree(child, cache)\n    }\n}\n\nclass Tree {\n    constructor(pageId, root, nodeIdMap, document) {\n        this.pageId = pageId\n        this.root = document.$$createElement(root, this)\n        this.nodeIdMap = nodeIdMap\n        this.idMap = {}\n        this.document = document\n\n        this.querySelector = new QuerySelector()\n        if (nodeIdMap) nodeIdMap[root.nodeId] = this.root\n\n        this.walk(root, this.root)\n    }\n\n    /**\n     * 遍历 ast\n     */\n    walk(ast, parentNode) {\n        const children = ast.children\n        const idMap = this.idMap\n        const nodeIdMap = this.nodeIdMap\n        const document = this.document\n\n        if (!children || !children.length) return\n\n        // 遍历子节点\n        for (const child of children) {\n            let childNode\n\n            if (child.type === 'element') {\n                childNode = document.$$createElement(child, this)\n            } else if (child.type === 'text') {\n                childNode = document.$$createTextNode(child, this)\n            }\n\n            // 处理 id 缓存\n            const id = childNode.id\n            if (id && !idMap[id]) {\n                idMap[id] = childNode\n            }\n\n            // 处理 nodeId 缓存\n            if (nodeIdMap) nodeIdMap[child.nodeId] = childNode\n\n            // 插入子节点\n            parentNode.appendChild(childNode)\n\n            // 遍历子节点的 ast\n            this.walk(child, childNode)\n        }\n    }\n\n    /**\n     * 更新 idMap\n     */\n    updateIdMap(id, node) {\n        this.idMap[id] = node\n    }\n\n    /**\n     * 根据 id 获取节点\n     */\n    getById(id) {\n        return this.idMap[id]\n    }\n\n    /**\n     * 根据标签名获取节点列表\n     */\n    getByTagName(tagName, node) {\n        const cache = {}\n        walkDomTree(node || this.root, cache)\n\n        return cache.tagMap[tagName.toUpperCase()] || []\n    }\n\n    /**\n     * 根据类名获取节点列表\n     */\n    getByClassName(className, node) {\n        const cache = {}\n        walkDomTree(node || this.root, cache)\n\n        return cache.classMap[className] || []\n    }\n\n    /**\n     * 查询符合条件的节点\n     */\n    query(selector, node) {\n        const cache = {}\n        walkDomTree(node || this.root, cache)\n\n        return this.querySelector.exec(selector, {\n            idMap: this.idMap,\n            tagMap: cache.tagMap,\n            classMap: cache.classMap,\n        })\n    }\n}\n\nmodule.exports = Tree\n","/**\n * 感谢 sizzle：https://github.com/jquery/sizzle/tree/master\n */\n\nconst PSEUDO_CHECK = {\n    checked: node => node.checked || node.selected,\n    disabled: node => node.disabled,\n    enabled: node => !node.disabled,\n    'first-child': node => node.parentNode.children[0] === node,\n    'last-child': node => node.parentNode.children[node.parentNode.children.length - 1] === node,\n    'nth-child': (node, param) => {\n        const children = node.parentNode.children\n        const {a, b} = param\n        const index = children.indexOf(node) + 1\n\n        if (a) {\n            return (index - b) % a === 0\n        } else {\n            return index === b\n        }\n    },\n}\n\nconst ATTR_CHECK = {\n    '=': (nodeVal, val) => nodeVal === val,\n    '~=': (nodeVal, val) => nodeVal.split(/\\s+/).indexOf(val) !== -1,\n    '|=': (nodeVal, val) => nodeVal === val || nodeVal.indexOf(val + '-') === 0,\n    '^=': (nodeVal, val) => nodeVal.indexOf(val) === 0,\n    '$=': (nodeVal, val) => nodeVal.substr(nodeVal.length - val.length) === val,\n    '*=': (nodeVal, val) => nodeVal.indexOf(val) !== -1,\n}\n\nconst KINSHIP_CHECK = {\n    ' ': (node, kinshipRule) => {\n        let kinshipNode = node.parentNode\n\n        while (kinshipNode) {\n            if (checkHit(kinshipNode, kinshipRule)) return kinshipNode\n\n            kinshipNode = kinshipNode.parentNode\n        }\n\n        return null\n    },\n    '>': (node, kinshipRule) => {\n        const kinshipNode = node.parentNode\n\n        return checkHit(kinshipNode, kinshipRule) ? kinshipNode : null\n    },\n    '+': (node, kinshipRule) => {\n        const children = node.parentNode\n\n        for (let i = 0, len = children.length; i < len; i++) {\n            const child = children[i]\n\n            if (child === node) {\n                const kinshipNode = children[i - 1]\n\n                return checkHit(kinshipNode, kinshipRule) ? kinshipNode : null\n            }\n        }\n\n        return null\n    },\n    '~': (node, kinshipRule) => {\n        const children = node.parentNode\n        let foundCurrent = false\n\n        for (let i = children.length - 1; i >= 0; i--) {\n            const child = children[i]\n\n            if (foundCurrent && checkHit(child, kinshipRule)) return child\n            if (child === node) foundCurrent = true\n        }\n\n        return null\n    },\n}\n\n/**\n * 检查节点是否符合规则\n */\nfunction checkHit(node, rule) {\n    if (!node) return false\n\n    const {\n        id, class: classList, tag, pseudo, attr\n    } = rule\n\n    // id 选择器\n    if (id) {\n        if (node.id !== id) return false\n    }\n\n    // 类选择器\n    if (classList && classList.length) {\n        for (const className of classList) {\n            if (!node.classList || !node.classList.contains(className)) return false\n        }\n    }\n\n    // 标签选择器\n    if (tag && tag !== '*') {\n        if (node.tagName !== tag.toUpperCase()) return false\n    }\n\n    // 伪类选择器\n    if (pseudo) {\n        for (const {name, param} of pseudo) {\n            const checkPseudo = PSEUDO_CHECK[name]\n            if (!checkPseudo || !checkPseudo(node, param)) return false\n        }\n    }\n\n    // 属性选择器\n    if (attr) {\n        for (const {name, opr, val} of attr) {\n            const nodeVal = node[name] || node.getAttribute(name)\n\n            if (nodeVal === undefined) return false\n            if (opr) {\n                // 存在操作符\n                const checkAttr = ATTR_CHECK[opr]\n                if (!checkAttr || !checkAttr(nodeVal, val)) return false\n            }\n        }\n    }\n\n    return true\n}\n\n/**\n * 数组去重\n */\nfunction unique(list) {\n    for (let i = 0; i < list.length; i++) {\n        const a = list[i]\n\n        for (let j = i + 1; j < list.length; j++) {\n            const b = list[j]\n            if (a === b) list.splice(j, 1)\n        }\n    }\n\n    return list\n}\n\n/**\n * 将节点按照文档顺序排列\n */\nfunction sortNodes(list) {\n    list.sort((a, b) => {\n        const aList = [a]\n        const bList = [b]\n        let aParent = a.parentNode\n        let bParent = b.parentNode\n\n        if (aParent === bParent) {\n            // 检查顺序\n            const children = aParent.children\n            return children.indexOf(a) - children.indexOf(b)\n        }\n\n        // a 到根的列表\n        while (aParent) {\n            aList.unshift(aParent)\n            aParent = aParent.parentNode\n        }\n\n        // b 到根的列表\n        while (bParent) {\n            bList.unshift(bParent)\n            bParent = bParent.parentNode\n        }\n\n        // 找到最近共同祖先\n        let i = 0\n        while (aList[i] === bList[i]) i++\n\n        // 检查顺序\n        const children = aList[i - 1].children\n        return children.indexOf(aList[i]) - children.indexOf(bList[i])\n    })\n\n    return list\n}\n\nclass QuerySelector {\n    constructor() {\n        this.parseCache = {} // 解析查询串缓存\n        this.parseCacheKeys = []\n\n        const idReg = '#([\\\\\\\\\\\\w-]+)' // id 选择器\n        const tagReg = '\\\\*|wx-component|[a-zA-Z-]\\\\w*' // 标签选择器\n        const classReg = '\\\\.([\\\\\\\\\\\\w-]+)' // 类选择器\n        const pseudoReg = ':([\\\\\\\\\\\\w-]+)(?:\\\\(([^\\\\(\\\\)]*|(?:\\\\([^\\\\)]+\\\\)|[^\\\\(\\\\)]*)+)\\\\))?' // 伪类选择器\n        const attrReg = '\\\\[\\\\s*([\\\\\\\\\\\\w-]+)(?:([*^$|~!]?=)[\\'\"]?([^\\'\"\\\\[]+)[\\'\"]?)?\\\\s*\\\\]' // 属性选择器\n        const kinshipReg = '\\\\s*([>\\\\s+~](?!=))\\\\s*' // 亲属选择器\n        this.regexp = new RegExp(`^(?:(${idReg})|(${tagReg})|(${classReg})|(${pseudoReg})|(${attrReg})|(${kinshipReg}))`)\n    }\n\n    /**\n     * 存入解析查询串缓存\n     */\n    setParseCache(key, value) {\n        if (this.parseCacheKeys.length > 50) {\n            delete this.parseCache[this.parseCacheKeys.shift()]\n        }\n\n        this.parseCacheKeys.push(key)\n        this.parseCache[key] = value\n\n        return value\n    }\n\n    /**\n     * 获取解析查询串缓存\n     */\n    getParseCache(key) {\n        return this.parseCache[key]\n    }\n\n    /**\n     * 解析查询串\n     */\n    parse(selector) {\n        const segment = [{tag: '*'}]\n        const regexp = this.regexp\n\n        const onProcess = (all, idAll, id, tagAll, classAll, className, pseudoAll, pseudoName, pseudoParam, attrAll, attrName, attrOpr, attrVal, kinshipAll, kinship) => {\n            if (idAll) {\n                // id 选择器\n                segment[segment.length - 1].id = id\n            } else if (tagAll) {\n                // 标签选择器\n                segment[segment.length - 1].tag = tagAll.toLowerCase()\n            } else if (classAll) {\n                // 类选择器\n                const currentRule = segment[segment.length - 1]\n                currentRule.class = currentRule.class || []\n\n                currentRule.class.push(className)\n            } else if (pseudoAll) {\n                // 伪类选择器\n                const currentRule = segment[segment.length - 1]\n                currentRule.pseudo = currentRule.pseudo || []\n                pseudoName = pseudoName.toLowerCase()\n\n                const pseudo = {name: pseudoName}\n\n                if (pseudoParam) pseudoParam = pseudoParam.trim()\n                if (pseudoName === 'nth-child') {\n                    // 处理 nth-child 伪类，参数统一处理成 an + b 的格式\n                    pseudoParam = pseudoParam.replace(/\\s+/g, '')\n\n                    if (pseudoParam === 'even') {\n                        // 偶数个\n                        pseudoParam = {a: 2, b: 2}\n                    } else if (pseudoParam === 'odd') {\n                        // 奇数个\n                        pseudoParam = {a: 2, b: 1}\n                    } else if (pseudoParam) {\n                        // 其他表达式\n                        const nthParsed = pseudoParam.match(/^(?:(\\d+)|(\\d*)?n([+-]\\d+)?)$/)\n\n                        if (!nthParsed) {\n                            // 解析失败\n                            pseudoParam = {a: 0, b: 1}\n                        } else if (nthParsed[1]) {\n                            // 纯数字\n                            pseudoParam = {a: 0, b: +nthParsed[1]}\n                        } else {\n                            // 表达式\n                            pseudoParam = {\n                                a: nthParsed[2] ? +nthParsed[2] : 1,\n                                b: nthParsed[3] ? +nthParsed[3] : 0,\n                            }\n                        }\n                    } else {\n                        // 默认取第一个\n                        pseudoParam = {a: 0, b: 1}\n                    }\n                }\n                if (pseudoParam) pseudo.param = pseudoParam\n\n                currentRule.pseudo.push(pseudo)\n            } else if (attrAll) {\n                // 属性选择器\n                const currentRule = segment[segment.length - 1]\n\n                currentRule.attr = currentRule.attr || []\n                currentRule.attr.push({\n                    name: attrName,\n                    opr: attrOpr,\n                    val: attrVal\n                })\n            } else if (kinshipAll) {\n                // 亲属选择器\n                segment[segment.length - 1].kinship = kinship\n                segment.push({tag: '*'}) // 插入新规则\n            }\n\n            return ''\n        }\n\n        // 逐个选择器解析\n        let lastParse\n        selector = selector.replace(regexp, onProcess)\n\n        while (lastParse !== selector) {\n            lastParse = selector\n            selector = selector.replace(regexp, onProcess)\n        }\n\n        return selector ? '' : segment\n    }\n\n    /**\n     * 查询符合条件的节点\n     */\n    exec(selector, extra) {\n        selector = selector.trim().replace(/\\s+/g, ' ').replace(/\\s*(,|[>\\s+~](?!=)|[*^$|~!]?=)\\s*/g, '$1')\n        const {idMap, tagMap, classMap} = extra\n\n        // 查询缓存\n        let segment = this.getParseCache(selector)\n\n        // 无缓存，进行解析\n        if (!segment) {\n            segment = this.parse(selector)\n\n            // 无法正常解析\n            if (!segment) return []\n\n            this.setParseCache(selector, segment)\n        }\n\n        // 无解析结果\n        if (!segment[0]) return []\n\n        // 执行解析结果\n        const lastRule = segment[segment.length - 1] // 从右往左\n        const {id, class: classList, tag} = lastRule\n        let hitNodes = []\n\n        // 寻找可能符合要求的节点\n        if (id) {\n            // id 选择器\n            const node = idMap[id]\n            hitNodes = node ? [node] : []\n        } else if (classList && classList.length) {\n            // 类选择器\n            for (const className of classList) {\n                const classNodes = classMap[className]\n                if (classNodes) {\n                    for (const classNode of classNodes) {\n                        if (hitNodes.indexOf(classNode) === -1) hitNodes.push(classNode)\n                    }\n                }\n            }\n        } else if (tag && tag !== '*') {\n            // 标签选择器，查询指定标签\n            const tagName = tag.toUpperCase()\n            const tagNodes = tagMap[tagName]\n            if (tagNodes) hitNodes = tagNodes\n        } else {\n            // 标签选择器，查询全部节点\n            Object.keys(tagMap).forEach(key => {\n                const tagNodes = tagMap[key]\n                if (tagNodes) {\n                    for (const tagNode of tagNodes) hitNodes.push(tagNode)\n                }\n            })\n        }\n\n        // 从下往上过滤节点列表\n        if (hitNodes.length && segment.length) {\n            for (let i = hitNodes.length - 1; i >= 0; i--) {\n                let checkNode = hitNodes[i]\n                let isMatched = false\n\n                // 从右往左进行规则过滤\n                for (let j = segment.length - 1; j >= 0; j--) {\n                    const prevRule = segment[j - 1]\n\n                    // 检查待选节点，后续的亲属节点不需要再检查\n                    if (j === segment.length - 1) isMatched = checkHit(checkNode, lastRule)\n\n                    if (isMatched && prevRule) {\n                        // 检查亲属选择器\n                        const kinship = prevRule.kinship\n                        const checkKinship = KINSHIP_CHECK[kinship]\n\n                        if (checkKinship) checkNode = checkKinship(checkNode, prevRule)\n\n                        if (!checkNode) {\n                            // 亲属检查失败\n                            isMatched = false\n                            break\n                        }\n                    } else {\n                        break\n                    }\n                }\n\n                if (!isMatched) hitNodes.splice(i, 1) // 不符合，从待选节点列表中删除\n            }\n        }\n\n        if (hitNodes.length) {\n            // 去重、排序\n            hitNodes = unique(hitNodes)\n            hitNodes = sortNodes(hitNodes)\n        }\n\n        return hitNodes\n    }\n}\n\nmodule.exports = QuerySelector\n","const EventTarget = _require('../event/event-target')\nconst cache = _require('../util/cache')\n\nclass Node extends EventTarget {\n    /**\n     * 覆写父类的 $$init 方法\n     */\n    $$init(options, tree) {\n        super.$$init()\n\n        this.$_nodeId = options.nodeId // 唯一标识\n        this.$_type = options.type\n        this.$_parentNode = null\n        this.$_tree = tree\n        this.$_pageId = tree.pageId\n    }\n\n    /**\n     * 覆写父类的 $$destroy 方法\n     */\n    $$destroy() {\n        super.$$destroy()\n\n        this.$_nodeId = null\n        this.$_type = null\n        this.$_parentNode = null\n        this.$_tree = null\n        this.$_pageId = null\n    }\n\n    /**\n     * 内部 nodeId\n     */\n    get $$nodeId() {\n        return this.$_nodeId\n    }\n\n    /**\n     * 内部 pageId\n     */\n    get $$pageId() {\n        return this.$_pageId\n    }\n\n    /**\n     * 更新 parentNode\n     */\n    $$updateParent(parentNode = null) {\n        this.$_parentNode = parentNode\n    }\n\n    /**\n     * 对外属性和方法\n     */\n    get parentNode() {\n        return this.$_parentNode\n    }\n\n    get nodeValue() {\n        return null\n    }\n\n    get previousSibling() {\n        const childNodes = this.parentNode && this.parentNode.childNodes || []\n        const index = childNodes.indexOf(this)\n\n        if (index > 0) {\n            return childNodes[index - 1]\n        }\n\n        return null\n    }\n\n    get previousElementSibling() {\n        const childNodes = this.parentNode && this.parentNode.childNodes || []\n        const index = childNodes.indexOf(this)\n\n        if (index > 0) {\n            for (let i = index - 1; i >= 0; i--) {\n                if (childNodes[i].nodeType === Node.ELEMENT_NODE) {\n                    return childNodes[i]\n                }\n            }\n        }\n\n        return null\n    }\n\n    get nextSibling() {\n        const childNodes = this.parentNode && this.parentNode.childNodes || []\n        const index = childNodes.indexOf(this)\n\n        return childNodes[index + 1] || null\n    }\n\n    get nextElementSibling() {\n        const childNodes = this.parentNode && this.parentNode.childNodes || []\n        const index = childNodes.indexOf(this)\n\n        if (index < childNodes.length - 1) {\n            for (let i = index + 1, len = childNodes.length; i < len; i++) {\n                if (childNodes[i].nodeType === Node.ELEMENT_NODE) {\n                    return childNodes[i]\n                }\n            }\n        }\n\n        return null\n    }\n\n    get ownerDocument() {\n        return cache.getDocument(this.$_pageId) || null\n    }\n\n    get childNodes() {\n        return []\n    }\n\n    hasChildNodes() {\n        return false\n    }\n\n    remove() {\n        if (!this.parentNode || !this.parentNode.removeChild) return this\n\n        return this.parentNode.removeChild(this)\n    }\n}\n\n// 静态属性\nNode.ELEMENT_NODE = 1\nNode.TEXT_NODE = 3\nNode.CDATA_SECTION_NODE = 4\nNode.PROCESSING_INSTRUCTION_NODE = 7\nNode.COMMENT_NODE = 8\nNode.DOCUMENT_NODE = 9\nNode.DOCUMENT_TYPE_NODE = 10\nNode.DOCUMENT_FRAGMENT_NODE = 11\n\nmodule.exports = Node\n","const Node = _require('./node')\nconst ClassList = _require('./class-list')\nconst Style = _require('./style')\nconst Attribute = _require('./attribute')\nconst cache = _require('../util/cache')\nconst parser = _require('../tree/parser')\nconst tool = _require('../util/tool')\nconst Pool = _require('../util/pool')\n\nconst pool = new Pool()\n\nclass Element extends Node {\n    /**\n     * 创建实例\n     */\n    static $$create(options, tree) {\n        const config = cache.getConfig()\n\n        if (config.optimization.elementMultiplexing) {\n            // 复用 element 节点\n            const instance = pool.get()\n\n            if (instance) {\n                instance.$$init(options, tree)\n                return instance\n            }\n        }\n\n        return new Element(options, tree)\n    }\n\n    /**\n     * 覆写父类的 $$init 方法\n     */\n    $$init(options, tree) {\n        options.type = 'element'\n\n        super.$$init(options, tree)\n\n        this.$_tagName = options.tagName || ''\n        this.$_children = []\n        this.$_nodeType = options.nodeType || Node.ELEMENT_NODE\n        this.$_unary = !!parser.voidMap[this.$_tagName.toLowerCase()]\n        this.$_notTriggerUpdate = false\n        this.$_dataset = null\n        this.$_classList = null\n        this.$_style = null\n        this.$_attrs = null\n\n        this.$_initAttrs(options.attrs)\n\n        // 补充实例的属性，用于 'xxx' in XXX 判断\n        this.onclick = null\n        this.ontouchstart = null\n        this.ontouchmove = null\n        this.ontouchend = null\n        this.ontouchcancel = null\n        this.onload = null\n        this.onerror = null\n    }\n\n    /**\n     * 覆写父类的 $$destroy 方法\n     */\n    $$destroy() {\n        super.$$destroy()\n\n        this.$_tagName = ''\n        this.$_children.length = 0\n        this.$_nodeType = Node.ELEMENT_NODE\n        this.$_unary = null\n        this.$_notTriggerUpdate = false\n        this.$_dataset = null\n        this.$_classList = null\n        this.$_style = null\n        this.$_attrs = null\n    }\n\n    /**\n     * 回收实例\n     */\n    $$recycle() {\n        this.$_children.forEach(child => child.$$recycle())\n        this.$$destroy()\n\n        const config = cache.getConfig()\n\n        if (config.optimization.elementMultiplexing) {\n            // 复用 element 节点\n            pool.add(this)\n        }\n    }\n\n    /**\n     * 延迟创建内部属性对象\n     */\n    set $_dataset(value) {\n        this.$__dataset = value\n    }\n\n    get $_dataset() {\n        if (!this.$__dataset) this.$__dataset = Object.create(null)\n        return this.$__dataset\n    }\n\n    set $_classList(value) {\n        if (!value && this.$__classList) this.$__classList.$$recycle()\n        this.$__classList = value\n    }\n\n    get $_classList() {\n        if (!this.$__classList) this.$__classList = ClassList.$$create(this.$_onClassOrStyleUpdate.bind(this))\n        return this.$__classList\n    }\n\n    set $_style(value) {\n        if (!value && this.$__style) this.$__style.$$recycle()\n        this.$__style = value\n    }\n\n    get $_style() {\n        if (!this.$__style) this.$__style = Style.$$create(this.$_onClassOrStyleUpdate.bind(this))\n        return this.$__style\n    }\n\n    set $_attrs(value) {\n        if (!value && this.$__attrs) this.$__attrs.$$recycle()\n        this.$__attrs = value\n    }\n\n    get $_attrs() {\n        if (!this.$__attrs) this.$__attrs = Attribute.$$create(this, this.$_triggerParentUpdate.bind(this))\n        return this.$__attrs\n    }\n\n    /**\n     * 初始化属性\n     */\n    $_initAttrs(attrs = {}) {\n        // 防止一开始就创建 $_attrs\n        const attrKeys = Object.keys(attrs)\n        if (!attrKeys.length) return\n\n        this.$_notTriggerUpdate = true // 初始化不触发更新\n\n        attrKeys.forEach(name => {\n            if (name.indexOf('data-') === 0) {\n                // dataset\n                const datasetName = tool.toCamel(name.substr(5))\n                this.$_dataset[datasetName] = attrs[name]\n            } else {\n                // 其他属性\n                this.setAttribute(name, attrs[name])\n            }\n        })\n\n        this.$_notTriggerUpdate = false // 重启触发更新\n    }\n\n    /**\n     * 监听 class 或 style 属性值变化\n     */\n    $_onClassOrStyleUpdate() {\n        if (this.$__attrs) this.$_attrs.triggerUpdate()\n        this.$_triggerParentUpdate()\n    }\n\n    /**\n     * 更新父组件树\n     */\n    $_triggerParentUpdate() {\n        if (this.parentNode && !this.$_notTriggerUpdate) this.parentNode.$$trigger('$$childNodesUpdate')\n        if (!this.$_notTriggerUpdate) this.$$trigger('$$domNodeUpdate')\n    }\n\n    /**\n     * 更新子组件树\n     */\n    $_triggerMeUpdate() {\n        if (!this.$_notTriggerUpdate) this.$$trigger('$$childNodesUpdate')\n    }\n\n    /**\n     * 更新子节点变动引起的映射表修改\n     */\n    $_updateChildrenExtra(node, isRemove) {\n        const id = node.id\n\n        // 更新 nodeId - dom 映射表\n        if (isRemove) {\n            cache.setNode(this.$_pageId, node.$$nodeId, null)\n        } else {\n            cache.setNode(this.$_pageId, node.$$nodeId, node)\n        }\n\n        // 更新 id - dom 映射表\n        if (id) {\n            if (isRemove) {\n                this.$_tree.updateIdMap(id, null)\n            } else {\n                this.$_tree.updateIdMap(id, node)\n            }\n        }\n\n        if (node.childNodes && node.childNodes.length) {\n            for (const child of node.childNodes) {\n                this.$_updateChildrenExtra(child, isRemove)\n            }\n        }\n    }\n\n    /**\n     * 遍历 dom 树，生成 html\n     */\n    $_generateHtml(node) {\n        if (node.nodeType === Node.TEXT_NODE) {\n            // 文本节点\n            return node.textContent\n        } else if (node.nodeType === Node.ELEMENT_NODE) {\n            // 元素\n            const tagName = node.tagName.toLowerCase()\n            let html = `<${tagName}`\n\n            // 属性\n            if (node.id) html += ` id=\"${node.id}\"`\n            if (node.className) html += ` class=\"${node.className}\"`\n\n            const styleText = node.style.cssText\n            if (styleText) html += ` style=\"${styleText}\"`\n\n            const src = node.src\n            if (src) html += ` src=${src}`\n\n            const dataset = node.dataset\n            Object.keys(dataset).forEach(name => {\n                html += ` data-${tool.toDash(name)}=\"${dataset[name]}\"`\n            })\n\n            html = this.$$dealWithAttrsForGenerateHtml(html, node)\n\n            if (node.$$isUnary) {\n                // 空标签\n                return `${html} />`\n            } else {\n                const childrenHtml = node.childNodes.map(child => this.$_generateHtml(child)).join('')\n                return `${html}>${childrenHtml}</${tagName}>`\n            }\n        }\n    }\n\n    /**\n     * 遍历 ast，生成 dom 树\n     */\n    $_generateDomTree(node) {\n        const {\n            type,\n            tagName = '',\n            attrs = [],\n            children = [],\n            content = '',\n        } = node\n\n        const nodeId = `b-${tool.getId()}` // 运行时生成，使用 b- 前缀\n\n        if (type === 'element') {\n            // 元素\n            const attrsMap = {}\n\n            // 属性列表转化成 map\n            for (const attr of attrs) {\n                const name = attr.name\n                let value = attr.value\n\n                if (name === 'style') value = value && value.replace('\"', '\\'') || ''\n\n                attrsMap[name] = value\n            }\n\n            const element = this.ownerDocument.$$createElement({\n                tagName, attrs: attrsMap, nodeId\n            })\n\n            for (let child of children) {\n                child = this.$_generateDomTree(child)\n\n                if (child) element.appendChild(child)\n            }\n\n            return element\n        } else if (type === 'text') {\n            // 文本\n            return this.ownerDocument.$$createTextNode({\n                content: tool.decodeContent(content), nodeId\n            })\n        } else if (type === 'comment') {\n            // 注释\n            return this.ownerDocument.createComment()\n        }\n    }\n\n    /**\n     * 对应的 dom 信息\n     */\n    get $$domInfo() {\n        return {\n            nodeId: this.$$nodeId,\n            pageId: this.$$pageId,\n            type: this.$_type,\n            tagName: this.$_tagName,\n            id: this.id,\n            className: this.className,\n            style: this.$__style ? this.style.cssText : '',\n        }\n    }\n\n    /**\n     * 是否空标签\n     */\n    get $$isUnary() {\n        return this.$_unary\n    }\n\n    /**\n     * 调用 $_generateHtml 接口时用于处理额外的属性\n     */\n    $$dealWithAttrsForGenerateHtml(html) {\n        // 具体实现逻辑由子类实现\n        return html\n    }\n\n    /**\n     * 调用 outerHTML 的 setter 时用于处理额外的属性\n     */\n    $$dealWithAttrsForOuterHTML() {\n        // ignore，具体实现逻辑由子类实现\n    }\n\n    /**\n     * 调用 cloneNode 接口时用于处理额外的属性\n     */\n    $$dealWithAttrsForCloneNode() {\n        // 具体实现逻辑由子类实现\n        return {}\n    }\n\n    /**\n     * 小程序端的 getBoundingClientRect 实现\n     * https://developers.weixin.qq.com/miniprogram/dev/api/wxml/NodesRef.scrollOffset.html\n     * https://developers.weixin.qq.com/miniprogram/dev/api/wxml/NodesRef.boundingClientRect.html\n     */\n    $$getBoundingClientRect() {\n        tool.flushThrottleCache() // 先清空 setData\n        const window = cache.getWindow(this.$_pageId)\n        return new Promise((resolve, reject) => {\n            if (!window) reject()\n\n            if (this.tagName === 'BODY') {\n                window.$$createSelectorQuery().selectViewport().scrollOffset(res => (res ? resolve(res) : reject())).exec()\n            } else {\n                window.$$createSelectorQuery().select(`.miniprogram-root >>> .node-${this.$_nodeId}`).boundingClientRect(res => (res ? resolve(res) : reject())).exec()\n            }\n        })\n    }\n\n    /**\n     * 获取对应小程序组件的 context 对象\n     */\n    $$getContext() {\n        tool.flushThrottleCache() // 先清空 setData\n        const window = cache.getWindow(this.$_pageId)\n        return new Promise((resolve, reject) => {\n            if (!window) reject()\n\n            if (this.tagName === 'CANVAS') {\n                // TODO，为了兼容基础库的一个 bug，暂且如此实现\n                wx.createSelectorQuery().in(this._wxComponent).select(`.node-${this.$_nodeId}`).context(res => (res && res.context ? resolve(res.context) : reject()))\n                    .exec()\n            } else {\n                window.$$createSelectorQuery().select(`.miniprogram-root >>> .node-${this.$_nodeId}`).context(res => (res && res.context ? resolve(res.context) : reject())).exec()\n            }\n        })\n    }\n\n    /**\n     * 获取对应节点的 NodesRef 对象\n     * https://developers.weixin.qq.com/miniprogram/dev/api/wxml/NodesRef.html\n     */\n    $$getNodesRef() {\n        tool.flushThrottleCache() // 先清空 setData\n        const window = cache.getWindow(this.$_pageId)\n        return new Promise((resolve, reject) => {\n            if (!window) reject()\n\n            if (this.tagName === 'CANVAS') {\n                // TODO，为了兼容基础库的一个 bug，暂且如此实现\n                resolve(wx.createSelectorQuery().in(this._wxComponent).select(`.node-${this.$_nodeId}`))\n            } else {\n                resolve(window.$$createSelectorQuery().select(`.miniprogram-root >>> .node-${this.$_nodeId}`))\n            }\n        })\n    }\n\n    /**\n     * 设置属性，但不触发更新\n     */\n    $$setAttributeWithoutUpdate(name, value) {\n        if (typeof name !== 'string') return\n\n        this.$_notTriggerUpdate = true\n        this.$_attrs.set(name, value)\n        this.$_notTriggerUpdate = false\n    }\n\n    /**\n     * 对外属性和方法\n     */\n    get id() {\n        if (!this.$__attrs) return ''\n\n        return this.$_attrs.get('id')\n    }\n\n    set id(id) {\n        if (typeof id !== 'string') return\n\n        id = id.trim()\n        const oldId = this.$_attrs.get('id')\n        this.$_attrs.set('id', id)\n\n        if (id === oldId) return\n\n        // 更新 tree\n        if (this.$_tree.getById(oldId) === this) this.$_tree.updateIdMap(oldId, null)\n        if (id) this.$_tree.updateIdMap(id, this)\n        this.$_triggerParentUpdate()\n    }\n\n    get tagName() {\n        return this.$_tagName.toUpperCase()\n    }\n\n    get className() {\n        if (!this.$__classList) return ''\n\n        return this.$_classList.toString()\n    }\n\n    set className(className) {\n        if (typeof className !== 'string') return\n\n        this.$_classList.$$parse(className)\n    }\n\n    get classList() {\n        return this.$_classList\n    }\n\n    get nodeName() {\n        return this.tagName\n    }\n\n    get nodeType() {\n        return this.$_nodeType\n    }\n\n    get childNodes() {\n        return this.$_children\n    }\n\n    get children() {\n        return this.$_children.filter(child => child.nodeType === Node.ELEMENT_NODE)\n    }\n\n    get firstChild() {\n        return this.$_children[0]\n    }\n\n    get lastChild() {\n        return this.$_children[this.$_children.length - 1]\n    }\n\n    get innerHTML() {\n        return this.$_children.map(child => this.$_generateHtml(child)).join('')\n    }\n\n    set innerHTML(html) {\n        if (typeof html !== 'string') return\n\n        const fragment = this.ownerDocument.$$createElement({\n            tagName: 'documentfragment',\n            nodeId: `b-${tool.getId()}`, // 运行时生成，使用 b- 前缀\n            nodeType: Node.DOCUMENT_FRAGMENT_NODE,\n        })\n\n        // 解析成 ast\n        let ast = null\n        try {\n            ast = parser.parse(html)\n        } catch (err) {\n            console.error(err)\n        }\n\n        if (!ast) return\n\n        // 生成 dom 树\n        ast.forEach(item => {\n            const node = this.$_generateDomTree(item)\n            if (node) fragment.appendChild(node)\n        })\n\n        // 删除所有子节点\n        this.$_children.forEach(node => {\n            node.$$updateParent(null)\n\n            // 更新映射表\n            this.$_updateChildrenExtra(node, true)\n        })\n        this.$_children.length = 0\n\n        // 追加新子节点\n        if (this.$_tagName === 'table') {\n            // table 节点需要判断是否存在 tbody\n            let hasTbody = false\n\n            for (const child of fragment.childNodes) {\n                if (child.tagName === 'TBODY') {\n                    hasTbody = true\n                    break\n                }\n            }\n\n            if (!hasTbody) {\n                const tbody = this.ownerDocument.$$createElement({\n                    tagName: 'tbody',\n                    attrs: {},\n                    nodeType: Node.ELEMENT_NODE,\n                    nodeId: `b-${tool.getId()}`, // 运行时生成，使用 b- 前缀\n                })\n\n                tbody.appendChild(fragment)\n                this.appendChild(tbody)\n            }\n        } else {\n            this.appendChild(fragment)\n        }\n    }\n\n    get outerHTML() {\n        return this.$_generateHtml(this)\n    }\n\n    set outerHTML(html) {\n        if (typeof html !== 'string') return\n\n        // 解析成 ast，只取第一个作为当前节点\n        let ast = null\n        try {\n            ast = parser.parse(html)[0]\n        } catch (err) {\n            console.error(err)\n        }\n\n        if (ast) {\n            // 生成 dom 树\n            const node = this.$_generateDomTree(ast)\n\n            // 删除所有子节点\n            this.$_children.forEach(node => {\n                node.$$updateParent(null)\n\n                // 更新映射表\n                this.$_updateChildrenExtra(node, true)\n            })\n            this.$_children.length = 0\n\n            this.$_notTriggerUpdate = true // 先不触发更新\n\n            // 追加新子节点\n            const children = [].concat(node.childNodes)\n            for (const child of children) {\n                this.appendChild(child)\n            }\n\n            this.$_tagName = node.tagName.toLowerCase()\n            this.id = node.id || ''\n            this.className = node.className || ''\n            this.style.cssText = node.style.cssText || ''\n            this.src = node.src || ''\n            this.$_dataset = Object.assign({}, node.dataset)\n\n            this.$$dealWithAttrsForOuterHTML(node)\n\n            this.$_notTriggerUpdate = false // 重启触发更新\n            this.$_triggerParentUpdate()\n        }\n    }\n\n    get innerText() {\n        // WARN：此处处理成和 textContent 一致，不去判断是否会渲染出来的情况\n        return this.textContent\n    }\n\n    set innerText(text) {\n        this.textContent = text\n    }\n\n    get textContent() {\n        return this.$_children.map(child => child.textContent).join('')\n    }\n\n    set textContent(text) {\n        text = '' + text\n\n        // 删除所有子节点\n        this.$_children.forEach(node => {\n            node.$$updateParent(null)\n\n            // 更新映射表\n            this.$_updateChildrenExtra(node, true)\n        })\n        this.$_children.length = 0\n\n        // 空串不新增 textNode 节点\n        if (!text) return\n\n        const nodeId = `b-${tool.getId()}` // 运行时生成，使用 b- 前缀\n        const child = this.ownerDocument.$$createTextNode({content: text, nodeId})\n\n        this.appendChild(child)\n    }\n\n    get style() {\n        return this.$_style\n    }\n\n    set style(value) {\n        this.$_style.cssText = value\n    }\n\n    get dataset() {\n        return this.$_dataset\n    }\n\n    get attributes() {\n        return this.$_attrs.list\n    }\n\n    get src() {\n        if (!this.$__attrs) return ''\n\n        return this.$_attrs.get('src')\n    }\n\n    set src(value) {\n        value = '' + value\n        this.$_attrs.set('src', value)\n    }\n\n    cloneNode(deep) {\n        const dataset = {}\n        Object.keys(this.$_dataset).forEach(name => {\n            dataset[`data-${tool.toDash(name)}`] = this.$_dataset[name]\n        })\n\n        const newNode = this.ownerDocument.$$createElement({\n            tagName: this.$_tagName,\n            attrs: {\n                id: this.id,\n                class: this.className,\n                style: this.style.cssText,\n                src: this.src,\n\n                ...dataset,\n                ...this.$$dealWithAttrsForCloneNode(),\n            },\n            nodeType: this.$_nodeType,\n            nodeId: `b-${tool.getId()}`, // 运行时生成，使用 b- 前缀\n        })\n\n        if (deep) {\n            // 深克隆\n            for (const child of this.$_children) {\n                newNode.appendChild(child.cloneNode(deep))\n            }\n        }\n\n        return newNode\n    }\n\n    appendChild(node) {\n        if (!(node instanceof Node)) return\n\n        let nodes\n        let hasUpdate = false\n\n        if (node.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {\n            // documentFragment\n            nodes = [].concat(node.childNodes)\n        } else {\n            nodes = [node]\n        }\n\n        for (const node of nodes) {\n            if (node === this) continue\n            if (node.parentNode) node.parentNode.removeChild(node)\n\n            this.$_children.push(node)\n            node.$$updateParent(this) // 设置 parentNode\n\n            // 更新映射表\n            this.$_updateChildrenExtra(node)\n\n            hasUpdate = true\n        }\n\n        // 触发 webview 端更新\n        if (hasUpdate) this.$_triggerMeUpdate()\n\n        return this\n    }\n\n    removeChild(node) {\n        if (!(node instanceof Node)) return\n\n        const index = this.$_children.indexOf(node)\n\n        if (index >= 0) {\n            // 已经插入，需要删除\n            this.$_children.splice(index, 1)\n\n            node.$$updateParent(null)\n\n            // 更新映射表\n            this.$_updateChildrenExtra(node, true)\n\n            // 触发 webview 端更新\n            this.$_triggerMeUpdate()\n        }\n\n        return node\n    }\n\n    insertBefore(node, ref) {\n        if (!(node instanceof Node)) return\n        if (ref && !(ref instanceof Node)) return\n\n        let nodes\n        let hasUpdate = false\n\n        if (node.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {\n            // documentFragment\n            nodes = []\n            for (let i = 0; i < node.childNodes.length; i++) {\n                // 因为是逐个插入，所以需要逆序\n                nodes.push(node.childNodes[i])\n            }\n        } else {\n            nodes = [node]\n        }\n\n        for (const node of nodes) {\n            if (node === this) continue\n            if (node.parentNode) node.parentNode.removeChild(node)\n\n            const insertIndex = ref ? this.$_children.indexOf(ref) : -1\n\n            if (insertIndex === -1) {\n                // 插入到末尾\n                this.$_children.push(node)\n            } else {\n                // 插入到 ref 之前\n                this.$_children.splice(insertIndex, 0, node)\n            }\n\n            node.$$updateParent(this) // 设置 parentNode\n\n            // 更新映射表\n            this.$_updateChildrenExtra(node)\n\n            hasUpdate = true\n        }\n\n\n        // 触发 webview 端更新\n        if (hasUpdate) this.$_triggerMeUpdate()\n\n        return node\n    }\n\n    replaceChild(node, old) {\n        if (!(node instanceof Node) || !(old instanceof Node)) return\n\n        let nodes\n        let hasUpdate = false\n\n        if (node.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {\n            // documentFragment\n            nodes = []\n            for (let i = node.childNodes.length - 1; i >= 0; i--) {\n                // 因为是逐个插入，所以需要逆序\n                nodes.push(node.childNodes[i])\n            }\n        } else {\n            nodes = [node]\n        }\n\n        const replaceIndex = this.$_children.indexOf(old)\n        if (replaceIndex !== -1) this.$_children.splice(replaceIndex, 1)\n\n        for (const node of nodes) {\n            if (node === this) continue\n            if (node.parentNode) node.parentNode.removeChild(node)\n\n            if (replaceIndex === -1) {\n                // 插入到末尾\n                this.$_children.push(node)\n            } else {\n                // 替换到 old\n                this.$_children.splice(replaceIndex, 0, node)\n            }\n\n            node.$$updateParent(this) // 设置 parentNode\n\n            // 更新映射表\n            this.$_updateChildrenExtra(node)\n            this.$_updateChildrenExtra(old, true)\n\n            hasUpdate = true\n        }\n\n        // 触发 webview 端更新\n        if (hasUpdate) this.$_triggerMeUpdate()\n\n        return old\n    }\n\n    hasChildNodes() {\n        return this.$_children.length > 0\n    }\n\n    getElementsByTagName(tagName) {\n        if (typeof tagName !== 'string') return []\n\n        return this.$_tree.getByTagName(tagName, this)\n    }\n\n    getElementsByClassName(className) {\n        if (typeof className !== 'string') return []\n\n        return this.$_tree.getByClassName(className, this)\n    }\n\n    querySelector(selector) {\n        if (typeof selector !== 'string') return\n\n        return this.$_tree.query(selector, this)[0] || null\n    }\n\n    querySelectorAll(selector) {\n        if (typeof selector !== 'string') return []\n\n        return this.$_tree.query(selector, this)\n    }\n\n    setAttribute(name, value) {\n        if (typeof name !== 'string') return\n\n        // 保留对象/数组/布尔值/undefined 原始内容，方便处理小程序内置组件的使用\n        const valueType = typeof value\n        if (valueType !== 'object' && valueType !== 'boolean' && value !== undefined && !Array.isArray(value)) value = '' + value\n\n        if (name === 'id') {\n            // id 要提前到此处特殊处理\n            this.id = value\n        } else {\n            this.$_attrs.set(name, value)\n        }\n    }\n\n    getAttribute(name) {\n        if (typeof name !== 'string') return ''\n        if (!this.$__attrs) return name === 'id' || name === 'style' || name === 'class' ? '' : undefined\n\n        return this.$_attrs.get(name)\n    }\n\n    hasAttribute(name) {\n        if (typeof name !== 'string') return false\n        if (!this.$__attrs) return false\n\n        return this.$_attrs.has(name)\n    }\n\n    removeAttribute(name) {\n        if (typeof name !== 'string') return false\n\n        return this.$_attrs.remove(name)\n    }\n\n    setAttributeNS(namespace, name, value) {\n        // 不支持 namespace，使用 setAttribute 来兼容\n        console.warn(`namespace ${namespace} is not supported`)\n        this.setAttribute(name, value)\n    }\n\n    getAttributeNS(namespace, name) {\n        // 不支持 namespace，使用 setAttribute 来兼容\n        console.warn(`namespace ${namespace} is not supported`)\n        return this.getAttribute(name)\n    }\n\n    hasAttributeNS(namespace, name) {\n        // 不支持 namespace，使用 setAttribute 来兼容\n        console.warn(`namespace ${namespace} is not supported`)\n        return this.hasAttribute(name)\n    }\n\n    removeAttributeNS(namespace, name) {\n        // 不支持 namespace，使用 setAttribute 来兼容\n        console.warn(`namespace ${namespace} is not supported`)\n        return this.removeAttribute(name)\n    }\n\n    contains(otherElement) {\n        const stack = []\n        let checkElement = this\n\n        while (checkElement) {\n            if (checkElement === otherElement) return true\n\n            const childNodes = checkElement.childNodes\n            if (childNodes && childNodes.length) childNodes.forEach(child => stack.push(child))\n\n            checkElement = stack.pop()\n        }\n\n        return false\n    }\n\n    getBoundingClientRect() {\n        // 不作任何实现，只作兼容使用\n        console.warn('getBoundingClientRect is not supported, please use dom.$$getBoundingClientRect instead of it')\n        return {\n            left: 0,\n            top: 0,\n        }\n    }\n}\n\nmodule.exports = Element\n","/**\n * babel extends 无法直接继承 Array，所以换种方法来继承：https://babeljs.io/docs/en/caveats/#classes\n */\nconst Pool = _require('../util/pool')\nconst cache = _require('../util/cache')\n\nconst pool = new Pool()\n\nfunction ClassList(onUpdate) {\n    this.$$init(onUpdate)\n}\n\n/**\n * 创建实例\n */\nClassList.$$create = function(onUpdate) {\n    const config = cache.getConfig()\n\n    if (config.optimization.domExtendMultiplexing) {\n    // 复用 dom 扩展对象\n        const instance = pool.get()\n\n        if (instance) {\n            instance.$$init(onUpdate)\n            return instance\n        }\n    }\n\n    return new ClassList(onUpdate)\n}\n\nClassList.prototype = Object.assign([], {\n    /**\n     * 初始化实例\n     */\n    $$init(onUpdate) {\n        this.$_doUpdate = onUpdate\n    },\n\n    /**\n     * 销毁实例\n     */\n    $$destroy() {\n        this.$_doUpdate = null\n        this.length = 0\n    },\n\n    /**\n     * 回收实例\n     */\n    $$recycle() {\n        this.$$destroy()\n\n        const config = cache.getConfig()\n\n        if (config.optimization.domExtendMultiplexing) {\n            // 复用 dom 扩展对象\n            pool.add(this)\n        }\n    },\n\n    /**\n     * 解析 className\n     */\n    $$parse(className = '') {\n        this.length = 0 // 置空当前内容\n\n        className = className.trim()\n        className = className ? className.split(/\\s+/) : []\n\n        for (const item of className) {\n            this.push(item)\n        }\n\n        this.$_doUpdate()\n    },\n\n    /**\n     * 对外属性和方法\n     */\n    item(index) {\n        return this[index]\n    },\n\n    contains(className) {\n        if (typeof className !== 'string') return false\n\n        return this.indexOf(className) !== -1\n    },\n\n    add(...args) {\n        let isUpdate = false\n\n        for (let className of args) {\n            if (typeof className !== 'string') continue\n\n            className = className.trim()\n\n            if (className && this.indexOf(className) === -1) {\n                this.push(className)\n                isUpdate = true\n            }\n        }\n\n        if (isUpdate) this.$_doUpdate()\n    },\n\n    remove(...args) {\n        let isUpdate = false\n\n        for (let className of args) {\n            if (typeof className !== 'string') continue\n\n            className = className.trim()\n\n            if (!className) continue\n\n            const index = this.indexOf(className)\n            if (index >= 0) {\n                this.splice(index, 1)\n                isUpdate = true\n            }\n        }\n\n        if (isUpdate) this.$_doUpdate()\n    },\n\n    toggle(className, force) {\n        if (typeof className !== 'string') return false\n\n        className = className.trim()\n\n        if (!className) return false\n\n        const isNotContain = this.indexOf(className) === -1\n        let action = isNotContain ? 'add' : 'remove'\n        action = force === true ? 'add' : force === false ? 'remove' : action\n\n        if (action === 'add') {\n            this.add(className)\n        } else {\n            this.remove(className)\n        }\n\n        return force === true || force === false ? force : isNotContain\n    },\n\n    toString() {\n        return this.join(' ')\n    },\n})\n\nmodule.exports = ClassList\n","class Pool {\r\n    constructor(size) {\r\n        this.$_size = size || 3000\r\n        this.$_cache = []\r\n    }\r\n\r\n    /**\r\n     * 添加一个对象\r\n     */\r\n    add(object) {\r\n        if (this.$_cache.length >= this.$_size) return\r\n\r\n        this.$_cache.push(object)\r\n    }\r\n\r\n    /**\r\n     * 取出一个对象\r\n     */\r\n    get() {\r\n        return this.$_cache.pop()\r\n    }\r\n}\r\n\r\nmodule.exports = Pool\r\n","const styleList = _require('./style-list')\nconst tool = _require('../util/tool')\nconst Pool = _require('../util/pool')\nconst cache = _require('../util/cache')\n\nconst pool = new Pool()\n\n/**\n * 解析样式串\n */\nfunction parse(styleText) {\n    const rules = {}\n\n    if (styleText) {\n        styleText = tool.decodeContent(styleText)\n        styleText = styleText.replace(/url\\([^)]+\\)/ig, all => all.replace(/;/ig, ':#||#:')) // 先处理值里面的分号\n        styleText.split(';').forEach(rule => {\n            rule = rule.trim()\n            if (!rule) return\n\n            const split = rule.indexOf(':')\n            if (split === -1) return\n\n            const name = tool.toCamel(rule.substr(0, split).trim())\n            rules[name] = rule.substr(split + 1).replace(/:#\\|\\|#:/ig, ';').trim()\n        })\n    }\n\n    return rules\n}\n\nclass Style {\n    constructor(onUpdate) {\n        this.$$init(onUpdate)\n    }\n\n    /**\n     * 创建实例\n     */\n    static $$create(onUpdate) {\n        const config = cache.getConfig()\n\n        if (config.optimization.domExtendMultiplexing) {\n            // 复用 dom 扩展对象\n            const instance = pool.get()\n\n            if (instance) {\n                instance.$$init(onUpdate)\n                return instance\n            }\n        }\n\n        return new Style(onUpdate)\n    }\n\n    /**\n     * 初始化实例\n     */\n    $$init(onUpdate) {\n        this.$_doUpdate = onUpdate || (() => {})\n        this.$_disableCheckUpdate = false // 是否禁止检查更新\n    }\n\n    /**\n     * 销毁实例\n     */\n    $$destroy() {\n        this.$_doUpdate = null\n        this.$_disableCheckUpdate = false\n\n        styleList.forEach(name => {\n            this[`$_${name}`] = undefined\n        })\n    }\n\n    /**\n     * 回收实例\n     */\n    $$recycle() {\n        this.$$destroy()\n\n        const config = cache.getConfig()\n\n        if (config.optimization.domExtendMultiplexing) {\n            // 复用 dom 扩展对象\n            pool.add(this)\n        }\n    }\n\n    /**\n     * 检查更新\n     */\n    $_checkUpdate() {\n        if (!this.$_disableCheckUpdate) {\n            this.$_doUpdate()\n        }\n    }\n\n    /**\n     * 对外属性和方法\n     */\n    get cssText() {\n        const joinText = styleList.filter(name => this[`$_${name}`]).map(name => `${tool.toDash(name)}:${this['$_' + name]}`).join(';').trim()\n        return joinText ? `${joinText};` : ''\n    }\n\n    set cssText(styleText) {\n        if (typeof styleText !== 'string') return\n\n        styleText = styleText.replace(/\"/g, '\\'')\n\n        // 解析样式\n        const rules = parse(styleText)\n\n        this.$_disableCheckUpdate = true // 将每条规则的设置合并为一次更新\n        for (const name of styleList) {\n            this[name] = rules[name]\n        }\n        this.$_disableCheckUpdate = false\n        this.$_checkUpdate()\n    }\n\n    getPropertyValue(name) {\n        if (typeof name !== 'string') return ''\n\n        name = tool.toCamel(name)\n        return this[name] || ''\n    }\n}\n\n/**\n * 设置各个属性的 getter、setter\n */\nconst properties = {}\nstyleList.forEach(name => {\n    properties[name] = {\n        get() {\n            return this[`$_${name}`] || ''\n        },\n        set(value) {\n            const config = cache.getConfig()\n            const oldValue = this[`$_${name}`]\n            value = value !== undefined ? '' + value : undefined\n\n            // 判断 value 是否需要删减\n            if (value && config.optimization.styleValueReduce && value.length > config.optimization.styleValueReduce) {\n                console.warn(`property \"${name}\" will be deleted, because it's greater than ${config.optimization.styleValueReduce}`)\n                value = undefined\n            }\n\n            this[`$_${name}`] = value\n            if (oldValue !== value) this.$_checkUpdate()\n        },\n    }\n})\nObject.defineProperties(Style.prototype, properties)\n\nmodule.exports = Style\n","/**\n * 支持的样式属性列表，默认只包含常用的样式属性\n */\n\nmodule.exports = [\n    'position', 'top', 'bottom', 'right', 'left', 'float', 'clear',\n    'display', 'width', 'height', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'flex', 'flexBasis', 'flexGrow', 'flexShrink', 'flexDirection', 'flexWrap', 'justifyContent', 'alignItems', 'order',\n    'padding', 'paddingBottom', 'paddingLeft', 'paddingRight', 'paddingTop',\n    'margin', 'marginBottom', 'marginLeft', 'marginRight', 'marginTop',\n\n    'background', 'backgroundClip', 'backgroundColor', 'backgroundImage', 'backgroundOrigin', 'backgroundPosition', 'backgroundRepeat', 'backgroundSize',\n    'border', 'borderRadius', 'borderBottomColor', 'borderBottomLeftRadius', 'borderBottomRightRadius', 'borderBottomStyle', 'borderBottomWidth', 'borderCollapse', 'borderImageOutset', 'borderImageRepeat', 'borderImageSlice', 'borderImageSource', 'borderImageWidth', 'borderLeftColor', 'borderLeftStyle', 'borderLeftWidth', 'borderRightColor', 'borderRightStyle', 'borderRightWidth', 'borderTopColor', 'borderTopLeftRadius', 'borderTopRightRadius', 'borderTopStyle', 'borderTopWidth',\n    'outline', 'borderWidth', 'borderStyle', 'borderColor',\n\n    'animation', 'animationDelay', 'animationDirection', 'animationDuration', 'animationFillMode', 'animationIterationCount', 'animationName', 'animationPlayState', 'animationTimingFunction',\n    'transition', 'transitionDelay', 'transitionDuration', 'transitionProperty', 'transitionTimingFunction',\n    'transform', 'transformOrigin', 'perspective', 'perspectiveOrigin', 'backfaceVisibility',\n\n    'font', 'fontFamily', 'fontSize', 'fontStyle', 'fontWeight',\n    'color', 'textAlign', 'textDecoration', 'textIndent', 'textRendering', 'textShadow', 'textOverflow', 'textTransform',\n    'wordBreak', 'wordSpacing', 'wordWrap', 'lineHeight', 'letterSpacing', 'whiteSpace', 'userSelect',\n\n    'visibility', 'opacity', 'zIndex', 'zoom', 'overflow', 'overflowX', 'overflowY',\n    'boxShadow', 'boxSizing', 'content', 'cursor', 'direction', 'listStyle', 'objectFit', 'pointerEvents', 'resize', 'verticalAlign', 'willChange', 'clip', 'clipPath', 'fill',\n\n    'touchAction', 'WebkitAppearance'\n]\n","const Pool = _require('../util/pool')\nconst cache = _require('../util/cache')\nconst tool = _require('../util/tool')\n\nconst pool = new Pool()\n\nclass Attribute {\n    constructor(element, onUpdate) {\n        this.$$init(element, onUpdate)\n    }\n\n    /**\n     * 创建实例\n     */\n    static $$create(element, onUpdate) {\n        const config = cache.getConfig()\n\n        if (config.optimization.domExtendMultiplexing) {\n            // 复用 dom 扩展对象\n            const instance = pool.get()\n\n            if (instance) {\n                instance.$$init(element, onUpdate)\n                return instance\n            }\n        }\n\n        return new Attribute(element, onUpdate)\n    }\n\n    /**\n     * 初始化实例\n     */\n    $$init(element, onUpdate) {\n        this.$_element = element\n        this.$_doUpdate = onUpdate\n        this.$_map = {}\n        this.$_list = []\n\n        this.triggerUpdate()\n    }\n\n    /**\n     * 销毁实例\n     */\n    $$destroy() {\n        this.$_element = null\n        this.$_doUpdate = null\n        this.$_map = null\n        this.$_list = null\n    }\n\n    /**\n     * 回收实例\n     */\n    $$recycle() {\n        this.$$destroy()\n\n        const config = cache.getConfig()\n\n        if (config.optimization.domExtendMultiplexing) {\n            // 复用 dom 扩展对象\n            pool.add(this)\n        }\n    }\n\n    /**\n     * 属性列表，需要动态更新\n     */\n    get list() {\n        return this.$_list\n    }\n\n    /**\n     * 设置属性\n     */\n    set(name, value) {\n        const element = this.$_element\n        const map = this.$_map\n\n        if (name === 'id') {\n            map.id = value\n        } else if (name === 'class' || (element.tagName === 'WX-COMPONENT' && name === 'className')) {\n            element.className = value\n        } else if (name === 'style') {\n            element.style.cssText = value\n        } else if (name.indexOf('data-') === 0) {\n            const datasetName = tool.toCamel(name.substr(5))\n            element.dataset[datasetName] = value\n        } else {\n            const config = cache.getConfig()\n\n            // 判断 value 是否需要删减\n            if (typeof value === 'string' && config.optimization.attrValueReduce && value.length > config.optimization.attrValueReduce) {\n                console.warn(`property \"${name}\" will be deleted, because it's greater than ${config.optimization.attrValueReduce}`)\n                value = ''\n            }\n\n            map[name] = value\n\n            // 其他字段的设置需要触发父组件更新\n            this.$_doUpdate()\n        }\n\n        this.triggerUpdate()\n    }\n\n    /**\n     * 取属性\n     */\n    get(name) {\n        const element = this.$_element\n        const map = this.$_map\n\n        if (name === 'id') {\n            return map.id || ''\n        } if (name === 'class') {\n            return element.className\n        } else if (name === 'style') {\n            return element.style.cssText\n        } else if (name.indexOf('data-') === 0) {\n            const datasetName = tool.toCamel(name.substr(5))\n            if (!element.$__dataset) return undefined\n            return element.dataset[datasetName]\n        } else {\n            return map[name]\n        }\n    }\n\n    /**\n     * 判断属性是否存在\n     */\n    has(name) {\n        const element = this.$_element\n        const map = this.$_map\n\n        if (name === 'id') {\n            return !!element.id\n        } else if (name === 'class') {\n            return !!element.className\n        } else if (name === 'style') {\n            return !!element.style.cssText\n        } else if (name.indexOf('data-') === 0) {\n            const datasetName = tool.toCamel(name.substr(5))\n            if (!element.$__dataset) return false\n            return Object.prototype.hasOwnProperty.call(element.dataset, datasetName)\n        } else {\n            return Object.prototype.hasOwnProperty.call(map, name)\n        }\n    }\n\n    /**\n     * 删除属性\n     */\n    remove(name) {\n        const element = this.$_element\n        const map = this.$_map\n\n        if (name === 'id') {\n            element.id = ''\n        } else if (name === 'class' || name === 'style') {\n            this.set(name, '')\n        } else if (name.indexOf('data-') === 0) {\n            const datasetName = tool.toCamel(name.substr(5))\n            if (element.$__dataset) delete element.dataset[datasetName]\n        } else {\n            // 其他字段的设置需要触发父组件更新\n            delete map[name]\n            this.$_doUpdate()\n        }\n\n        this.triggerUpdate()\n    }\n\n    /**\n     * 更新属性列表\n     */\n    triggerUpdate() {\n        const map = this.$_map\n        const list = this.$_list\n\n        // 清空旧的列表\n        list.forEach(item => {\n            delete list[item.name]\n        })\n        delete list.class\n        delete list.style\n        list.length = 0\n\n        // 添加新列表\n        Object.keys(map).forEach(name => {\n            if (name !== 'id') {\n                const item = {name, value: map[name]}\n\n                list.push(item)\n                list[name] = item\n            }\n        })\n\n        const idValue = this.get('id')\n        const classValue = this.get('class')\n        const styleValue = this.get('style')\n        if (idValue) {\n            const item = {name: 'id', value: idValue}\n            list.push(item)\n            list.id = item\n        }\n        if (classValue) {\n            const item = {name: 'class', value: classValue}\n            list.push(item)\n            list.class = item\n        }\n        if (styleValue) {\n            const item = {name: 'style', value: styleValue}\n            list.push(item)\n            list.style = item\n        }\n    }\n}\n\nmodule.exports = Attribute\n","/**\n * 感谢 John Resig： https://johnresig.com/files/htmlparser.js\n */\n\n// 正则声明\nconst doctypeReg = /^<!\\s*doctype((?:\\s+[\\w:]+(?:\\s*=\\s*(?:(?:\"[^\"]*\")|(?:'[^']*')|[^>\\s]+))?)*)\\s*(\\/?)>/i\nconst startTagReg = /^<([-A-Za-z0-9_]+)((?:\\s+[-A-Za-z0-9_:@.]+(?:\\s*=\\s*(?:(?:\"[^\"]*\")|(?:'[^']*')|[^>\\s]+))?)*)\\s*(\\/?)>/i\nconst endTagReg = /^<\\/([-A-Za-z0-9_]+)[^>]*>/i\nconst attrReg = /([-A-Za-z0-9_:@.]+)(?:\\s*=\\s*(?:(?:\"((?:\\\\.|[^\"])*)\")|(?:'((?:\\\\.|[^'])*)')|([^>\\s]+)))?/g\n\n// 空元素 - https://www.w3.org/TR/html/syntax.html#void-elements\nconst voidMap = {};\n['area', 'base', 'br', 'col', 'embed', 'hr', 'img', 'input', 'link', 'meta', 'param', 'source', 'track', 'wbr'].forEach(n => voidMap[n] = true)\n\n// 块级元素 - https://developer.mozilla.org/en-US/docs/Web/HTML/Block-level_elements#Elements\nconst blockMap = {};\n['address', 'article', 'aside', 'blockquote', 'canvas', 'dd', 'div', 'dl', 'dt', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'header', 'hgroup', 'hr', 'li', 'main', 'nav', 'noscript', 'ol', 'output', 'p', 'pre', 'section', 'table', 'tfoot', 'ul', 'video'].forEach(n => blockMap[n] = true)\n\n// 行内元素 - https://developer.mozilla.org/en-US/docs/Web/HTML/Inline_elements#Elements\nconst inlineMap = {};\n['a', 'abbr', 'acronym', 'b', 'bdo', 'big', 'br', 'button', 'cite', 'code', 'dfn', 'em', 'i', 'img', 'input', 'kbd', 'label', 'map', 'object', 'q', 'samp', 'script', 'select', 'small', 'span', 'strong', 'sub', 'sup', 'textarea', 'time', 'tt', 'var'].forEach(n => inlineMap[n] = true)\n\n// 可能包含任意内容的元素 - https://www.w3.org/TR/html/syntax.html#raw-text\nconst rawTextMap = {};\n['script', 'style'].forEach(n => rawTextMap[n] = true)\n\nconst longAttributeCache = {}\nlet seed = 0\n\n/**\n * 分词\n */\nfunction tokenize(content, handler) {\n    const stack = []\n    let last = content\n\n    stack.last = function() {\n        return this[this.length - 1]\n    }\n\n    while (content) {\n        let isText = true\n\n        if (!stack.last() || !rawTextMap[stack.last()]) {\n            if (content.indexOf('<!--') === 0) {\n                // comment\n                const index = content.indexOf('-->')\n\n                if (index >= 0) {\n                    content = content.substring(index + 3)\n                    if (handler.comment) handler.comment(content)\n                    isText = false\n                }\n            } else if (content.indexOf('</') === 0) {\n                // end tag\n                const match = content.match(endTagReg)\n\n                if (match) {\n                    content = content.substring(match[0].length)\n                    match[0].replace(endTagReg, parseEndTag)\n                    isText = false\n                }\n            } else if (content.indexOf('<') === 0) {\n                // start tag\n                let match = content.match(startTagReg)\n\n                if (match) {\n                    content = content.substring(match[0].length)\n                    match[0].replace(startTagReg, parseStartTag)\n                    isText = false\n                } else {\n                    // 检测 doctype\n                    match = content.match(doctypeReg)\n\n                    if (match) {\n                        content = content.substring(match[0].length)\n                        isText = false\n                    }\n                }\n            }\n\n            if (isText) {\n                const index = content.indexOf('<')\n\n                const text = index < 0 ? content : content.substring(0, index)\n                content = index < 0 ? '' : content.substring(index)\n\n                if (handler.text) handler.text(text)\n            }\n        } else {\n            const execRes = (new RegExp(`</${stack.last()}[^>]*>`)).exec(content)\n\n            if (execRes) {\n                const text = content.substring(0, execRes.index)\n                content = content.substring(execRes.index + execRes[0].length)\n\n                text.replace(/<!--(.*?)-->/g, '')\n                if (text && handler.text) handler.text(text)\n            }\n\n            parseEndTag('', stack.last())\n        }\n\n        if (content === last) throw new Error(`parse error: ${content}`)\n        last = content\n    }\n\n    // 关闭栈内的标签\n    parseEndTag()\n\n    function parseStartTag(tag, tagName, rest, unary) {\n        tagName = tagName.toLowerCase()\n        unary = !!unary\n\n        // 放宽规则，允许行内元素包含块级元素\n        // if (blockMap[tagName]) {\n        //     while (stack.last() && inlineMap[stack.last()]) {\n        //         // 自动关闭栈内的行内元素\n        //         parseEndTag('', stack.last())\n        //     }\n        // }\n\n        unary = voidMap[tagName] || !!unary\n\n        if (!unary) stack.push(tagName)\n\n        if (handler.start) {\n            const attrs = []\n\n            try {\n                rest.replace(attrReg, (all, $1, $2, $3, $4) => {\n                    const value = $2 || $3 || $4\n\n                    attrs.push({\n                        name: $1,\n                        value,\n                    })\n                })\n            } catch (err) {\n                // 某些安卓机遇到过长的字符串执行属性正则替换会跪（主要是 base 64），这里就先临时过滤掉这种特殊情况\n                rest = rest.replace(/url\\([^)]+\\)/ig, all => {\n                    const id = `url(:#|${++seed}|#:)`\n                    longAttributeCache[id] = all\n                    return id\n                })\n                rest.replace(attrReg, (all, $1, $2, $3, $4) => {\n                    const value = $2 || $3 || $4\n\n                    attrs.push({\n                        name: $1,\n                        value: value.replace(/url\\(:#\\|\\d+\\|#:\\)/ig, all => longAttributeCache[all] || 'url()'),\n                    })\n                })\n            }\n\n            handler.start(tagName, attrs, unary)\n        }\n    }\n\n    function parseEndTag(tag, tagName) {\n        let pos\n\n        if (!tagName) {\n            pos = 0\n        } else {\n            // 找到同名的开始标签\n            tagName = tagName.toLowerCase()\n\n            for (pos = stack.length - 1; pos >= 0; pos--) {\n                if (stack[pos] === tagName) break\n            }\n        }\n\n        if (pos >= 0) {\n            // 关闭开始标签和结束标签中的所有标签\n            for (let i = stack.length - 1; i >= pos; i--) {\n                if (handler.end) handler.end(stack[i])\n            }\n\n            stack.length = pos\n        }\n    }\n}\n\n/**\n * 解析\n */\nfunction parse(html) {\n    const r = {\n        children: [],\n    }\n    const stack = [r]\n\n    stack.last = function() {\n        return this[this.length - 1]\n    }\n\n    tokenize(html, {\n        start(tagName, attrs, unary) {\n            const node = {\n                type: 'element',\n                tagName,\n                attrs,\n                unary,\n                children: [],\n            }\n\n            stack.last().children.push(node)\n\n            if (!unary) {\n                stack.push(node)\n            }\n        },\n        // eslint-disable-next-line no-unused-vars\n        end(tagName) {\n            const node = stack.pop()\n\n            if (node.tagName === 'table') {\n                // 补充插入 tbody\n                let hasTbody = false\n\n                for (const child of node.children) {\n                    if (child.tagName === 'tbody') {\n                        hasTbody = true\n                        break\n                    }\n                }\n\n                if (!hasTbody) {\n                    node.children = [{\n                        type: 'element',\n                        tagName: 'tbody',\n                        attrs: [],\n                        unary: false,\n                        children: node.children,\n                    }]\n                }\n            }\n        },\n        text(content) {\n            content = content.trim()\n            if (!content) return\n\n            stack.last().children.push({\n                type: 'text',\n                content,\n            })\n        },\n        comment(content) {\n            content = content.trim()\n\n            stack.last().children.push({\n                type: 'comment',\n                content,\n            })\n        },\n    })\n\n    return r.children\n}\n\nmodule.exports = {\n    tokenize,\n    parse,\n    voidMap,\n    blockMap,\n    inlineMap,\n    rawTextMap,\n}\n","const Node = _require('./node')\nconst tool = _require('../util/tool')\nconst Pool = _require('../util/pool')\nconst cache = _require('../util/cache')\n\nconst pool = new Pool()\n\nclass TextNode extends Node {\n    /**\n     * 创建实例\n     */\n    static $$create(options, tree) {\n        const config = cache.getConfig()\n\n        if (config.optimization.textMultiplexing) {\n            // 复用 text 节点\n            const instance = pool.get()\n\n            if (instance) {\n                instance.$$init(options, tree)\n                return instance\n            }\n        }\n\n        return new TextNode(options, tree)\n    }\n\n    /**\n     * 覆写父类的 $$init 方法\n     */\n    $$init(options, tree) {\n        options.type = 'text'\n\n        super.$$init(options, tree)\n\n        this.$_content = options.content || ''\n    }\n\n    /**\n     * 覆写父类的 $$destroy 方法\n     */\n    $$destroy() {\n        super.$$destroy()\n\n        this.$_content = ''\n    }\n\n    /**\n     * 回收实例\n     */\n    $$recycle() {\n        this.$$destroy()\n\n        const config = cache.getConfig()\n\n        if (config.optimization.textMultiplexing) {\n            // 复用 text 节点\n            pool.add(this)\n        }\n    }\n\n    /**\n     * 更新父组件树\n     */\n    $_triggerParentUpdate() {\n        if (this.parentNode) this.parentNode.$$trigger('$$childNodesUpdate')\n    }\n\n    /**\n     * 对应的 dom 信息\n     */\n    get $$domInfo() {\n        return {\n            nodeId: this.$_nodeId,\n            pageId: this.$_pageId,\n            type: this.$_type,\n            content: this.$_content,\n        }\n    }\n\n    /**\n     * 对外属性和方法\n     */\n    get nodeName() {\n        return '#text'\n    }\n\n    get nodeType() {\n        return Node.TEXT_NODE\n    }\n\n    get nodeValue() {\n        return this.textContent\n    }\n\n    set nodeValue(value) {\n        this.textContent = value\n    }\n\n    get textContent() {\n        return this.$_content\n    }\n\n    set textContent(value) {\n        value += ''\n\n        this.$_content = value\n        this.$_triggerParentUpdate()\n    }\n\n    get data() {\n        return this.textContent\n    }\n\n    set data(value) {\n        this.textContent = value\n    }\n\n    cloneNode() {\n        return this.ownerDocument.$$createTextNode({\n            content: this.$_content,\n            nodeId: `b-${tool.getId()}`, // 运行时生成，使用 b- 前缀\n        })\n    }\n}\n\nmodule.exports = TextNode\n","const Node = _require('./node')\nconst tool = _require('../util/tool')\nconst Pool = _require('../util/pool')\nconst cache = _require('../util/cache')\n\nconst pool = new Pool()\n\nclass Comment extends Node {\n    /**\n     * 创建实例\n     */\n    static $$create(options, tree) {\n        const config = cache.getConfig()\n\n        if (config.optimization.commentMultiplexing) {\n            // 复用 comment 节点\n            const instance = pool.get()\n\n            if (instance) {\n                instance.$$init(options, tree)\n                return instance\n            }\n        }\n\n        return new Comment(options, tree)\n    }\n\n    /**\n     * 覆写父类的 $$init 方法\n     */\n    $$init(options, tree) {\n        options.type = 'comment'\n\n        super.$$init(options, tree)\n    }\n\n    /**\n     * 回收实例\n     */\n    $$recycle() {\n        this.$$destroy()\n\n        const config = cache.getConfig()\n\n        if (config.optimization.commentMultiplexing) {\n            // 复用 comment 节点\n            pool.add(this)\n        }\n    }\n\n    /**\n     * 对应的 dom 信息\n     */\n    get $$domInfo() {\n        return {\n            nodeId: this.$_nodeId,\n            pageId: this.$_pageId,\n            type: this.$_type,\n        }\n    }\n\n    /**\n     * 对外属性和方法\n     */\n    get nodeName() {\n        return '#comment'\n    }\n\n    get nodeType() {\n        return Node.COMMENT_NODE\n    }\n\n    cloneNode() {\n        return this.ownerDocument.$$createComment({\n            nodeId: `b-${tool.getId()}`, // 运行时生成，使用 b- 前缀\n        })\n    }\n}\n\nmodule.exports = Comment\n","const Element = _require('../element')\nconst Location = _require('../../bom/location')\nconst cache = _require('../../util/cache')\nconst Pool = _require('../../util/pool')\n\nconst pool = new Pool()\n\nclass HTMLAnchorElement extends Element {\n    /**\n     * 创建实例\n     */\n    static $$create(options, tree) {\n        const config = cache.getConfig()\n\n        if (config.optimization.elementMultiplexing) {\n            // 复用 element 节点\n            const instance = pool.get()\n\n            if (instance) {\n                instance.$$init(options, tree)\n                return instance\n            }\n        }\n\n        return new HTMLAnchorElement(options, tree)\n    }\n\n    /**\n     * 覆写父类的 $$init 方法\n     */\n    $$init(options, tree) {\n        super.$$init(options, tree)\n\n        this.$_protocol = 'http:'\n        this.$_hostname = ''\n        this.$_port = ''\n        this.$_pathname = '/'\n        this.$_search = ''\n        this.$_hash = ''\n    }\n\n    /**\n     * 覆写父类的 $$destroy 方法\n     */\n    $$destroy() {\n        super.$$destroy()\n\n        this.$_protocol = null\n        this.$_hostname = null\n        this.$_port = null\n        this.$_pathname = null\n        this.$_search = null\n        this.$_hash = null\n    }\n\n    /**\n     * 覆写父类的回收实例方法\n     */\n    $$recycle() {\n        this.$_children.forEach(child => child.$$recycle())\n        this.$$destroy()\n\n        const config = cache.getConfig()\n\n        if (config.optimization.elementMultiplexing) {\n            // 复用 element 节点\n            pool.add(this)\n        }\n    }\n\n    /**\n     * 调用 $_generateHtml 接口时用于处理额外的属性，\n     */\n    $$dealWithAttrsForGenerateHtml(html, node) {\n        const href = node.href\n        if (href) html += ` href=\"${href}\"`\n\n        const target = node.target\n        if (target) html += ` target=\"${target}\"`\n\n        return html\n    }\n\n    /**\n     * 调用 outerHTML 的 setter 时用于处理额外的属性\n     */\n    $$dealWithAttrsForOuterHTML(node) {\n        this.href = node.href || ''\n        this.target = node.target || ''\n    }\n\n    /**\n     * 调用 cloneNode 接口时用于处理额外的属性\n     */\n    $$dealWithAttrsForCloneNode() {\n        return {\n            href: this.href,\n            target: this.target,\n        }\n    }\n\n    /**\n     * 对外属性和方法\n     */\n    get href() {\n        return this.$_attrs.get('href')\n    }\n\n    set href(value) {\n        value = '' + value\n\n        if (value.indexOf('//') === -1) {\n            const {origin} = cache.getConfig()\n            value = origin + (value[0] === '/' ? value : `/${value}`)\n        }\n\n        this.$_attrs.set('href', value)\n        const {\n            protocol, hostname, port, pathname, search, hash\n        } = Location.$$parse(value)\n\n        this.$_protocol = protocol || this.$_protocol\n        this.$_hostname = hostname || this.$_hostname\n        this.$_port = port || ''\n        this.$_pathname = pathname || '/'\n        this.$_search = search || ''\n        this.$_hash = hash || ''\n    }\n\n    get protocol() {\n        return this.$_protocol\n    }\n\n    get hostname() {\n        return this.$_hostname\n    }\n\n    get port() {\n        return this.$_port\n    }\n\n    get pathname() {\n        return this.$_pathname\n    }\n\n    get search() {\n        return this.$_search\n    }\n\n    get hash() {\n        return this.$_hash\n    }\n\n    get target() {\n        return this.$_attrs.get('target')\n    }\n\n    set target(value) {\n        value = '' + value\n        this.$_attrs.set('target', value)\n    }\n}\n\nmodule.exports = HTMLAnchorElement\n","/**\n * 暂不对 ipv6 地址做支持\n */\nconst EventTarget = _require('../event/event-target')\nconst tool = _require('../util/tool')\nconst cache = _require('../util/cache')\n\nclass Location extends EventTarget {\n    constructor(pageId) {\n        super()\n\n        this.$_pageId = pageId\n        this.$_pageRoute = tool.getPageRoute(pageId) // 小程序页面路由\n\n        this.$_protocol = 'https:'\n        this.$_hostname = ''\n        this.$_port = ''\n        this.$_pathname = '/'\n        this.$_search = ''\n        this.$_hash = ''\n\n        this.$_lastHash = ''\n        this.$_lastPathname = ''\n        this.$_lastSearch = ''\n        this.$_lastHref = ''\n        this.$_allowCheck = true // 是否检查 url 和 hash 变化\n    }\n\n    /**\n     * 获取 url 中旧的需要进行检测的部分\n     */\n    $_getOldValues() {\n        return {\n            protocol: this.$_protocol,\n            hostname: this.$_hostname,\n            port: this.$_port,\n            pathname: this.$_pathname,\n            search: this.$_search,\n            hash: this.$_hash,\n        }\n    }\n\n    /**\n     * 设置 href，不进入 history\n     */\n    $_setHrefWithoutEnterHistory(value) {\n        if (!value || typeof value !== 'string') return\n\n        this.$$startCheckHash()\n\n        if (!/^(([a-zA-Z0-9]+:)|(\\/\\/))/i.test(value)) {\n            // 没有带协议\n            if (value.indexOf('/') === 0) {\n                // 以 / 开头，直接替换整个 pathname、search、hash\n                value = `${this.origin}${value}`\n            } else if (value.indexOf('#') === 0) {\n                // 以 # 开头，直接替换整个 hash\n                value = `${this.origin}${this.$_pathname}${this.$_search}${value}`\n            } else {\n                // 非以 / 开头，则替换 pathname 的最后一段、search、hash\n                let pathname = this.$_pathname.split('/')\n                pathname.pop()\n                pathname = pathname.join('/')\n\n                value = `${this.origin}${pathname}/${value}`\n            }\n        }\n\n        const {\n            protocol, hostname, port, hash, search, pathname\n        } = Location.$$parse(value)\n        const oldValues = this.$_getOldValues()\n\n        this.$_protocol = protocol || this.$_protocol\n        this.$_hostname = hostname || this.$_hostname\n        this.$_port = port || ''\n        this.$_pathname = pathname || '/'\n        this.$_search = search || ''\n        this.$_hash = hash || ''\n\n        this.$$endCheckHash()\n        this.$_checkUrl(oldValues)\n    }\n\n    /**\n     * 进入 history\n     */\n    $_enterHistory() {\n        this.$$trigger('$_addToHistory', {\n            event: {\n                href: this.href,\n            }\n        })\n    }\n\n    /**\n     * 检查 url 变化是否需要跳转\n     */\n    $_checkUrl(oldValues) {\n        if (!this.$_allowCheck) return false\n\n        const window = cache.getWindow(this.$_pageId)\n\n        if (this.$_protocol !== oldValues.protocol || this.$_hostname !== oldValues.hostname || this.$_port !== oldValues.port) {\n            // 只能跳转相同 protocol、hostname 和 port 的 url\n            const jumpUrl = this.href\n\n            // 和 web 端不同，这里恢复成原状\n            this.$_protocol = oldValues.protocol\n            this.$_hostname = oldValues.hostname\n            this.$_port = oldValues.port\n            this.$_pathname = oldValues.pathname\n            this.$_search = oldValues.search\n            this.$_hash = oldValues.hash\n\n            window.$$trigger('pageaccessdenied', {\n                event: {\n                    url: jumpUrl,\n                    type: 'jump',\n                },\n            })\n\n            return false\n        }\n\n        if (this.$_pathname !== oldValues.pathname || this.$_search !== oldValues.search) {\n            const matchRoute = window.$$miniprogram.getMatchRoute(this.$_pathname)\n\n            if (matchRoute) {\n                let param = ['type=jump', `targeturl=${encodeURIComponent(this.href)}`]\n                if (this.$_search) param.push(`search=${encodeURIComponent(this.$_search)}`)\n                if (this.$_hash) param.push(`hash=${encodeURIComponent(this.$_hash)}`)\n\n                param = '?' + param.join('&')\n\n                const callMethod = window.$$miniprogram.isTabBarPage(matchRoute) ? 'switchTab' : 'redirectTo'\n                wx[callMethod]({\n                    url: `${matchRoute}${param}`,\n                })\n\n                if (callMethod === 'switchTab') {\n                    // switchTab 不会销毁页面实例，所以也需要恢复成原状\n                    this.$_protocol = oldValues.protocol\n                    this.$_hostname = oldValues.hostname\n                    this.$_port = oldValues.port\n                    this.$_pathname = oldValues.pathname\n                    this.$_search = oldValues.search\n                    this.$_hash = oldValues.hash\n                }\n\n                return true\n            } else {\n                const jumpUrl = this.href\n\n                // 和 web 端不同，这里恢复成原状\n                this.$_protocol = oldValues.protocol\n                this.$_hostname = oldValues.hostname\n                this.$_port = oldValues.port\n                this.$_pathname = oldValues.pathname\n                this.$_search = oldValues.search\n                this.$_hash = oldValues.hash\n\n                window.$$trigger('pagenotfound', {\n                    event: {\n                        url: jumpUrl,\n                        type: 'jump',\n                    },\n                })\n\n                return false\n            }\n        }\n\n        return true\n    }\n\n    /**\n     * 打开一个新页面\n     */\n    $$open(url) {\n        url = tool.completeURL(url, this.origin, true)\n\n        const window = cache.getWindow(this.$_pageId)\n        const parseRes = Location.$$parse(url)\n\n        if (parseRes.protocol !== this.$_protocol || parseRes.hostname !== this.$_hostname || parseRes.port !== this.$_port) {\n            // 只能打开相同 protocol、hostname 和 port 的 url\n            return window.$$trigger('pageaccessdenied', {\n                event: {\n                    url,\n                    type: 'open',\n                },\n            })\n        }\n\n        const matchRoute = window.$$miniprogram.getMatchRoute(parseRes.pathname || '/')\n\n        if (matchRoute) {\n            let param = ['type=open', `targeturl=${encodeURIComponent(url)}`]\n            if (this.$_search) param.push(`search=${encodeURIComponent(parseRes.search || '')}`)\n            if (this.$_hash) param.push(`hash=${encodeURIComponent(parseRes.hash || '')}`)\n\n            param = '?' + param.join('&')\n\n            const callMethod = window.$$miniprogram.isTabBarPage(matchRoute) ? 'switchTab' : 'navigateTo'\n            wx[callMethod]({\n                url: `${matchRoute}${param}`,\n            })\n        } else {\n            window.$$trigger('pagenotfound', {\n                event: {\n                    url,\n                    type: 'open',\n                },\n            })\n        }\n    }\n\n    /**\n     * 重置实例\n     */\n    $$reset(url = '') {\n        const {\n            protocol, hostname, port, pathname, hash, search\n        } = Location.$$parse(url)\n\n        this.$_protocol = protocol || 'https:'\n        this.$_hostname = hostname || ''\n        this.$_port = port || ''\n        this.$_pathname = pathname || '/'\n        this.$_search = search || ''\n        this.$_hash = hash || ''\n    }\n\n    /**\n     * 解析 href\n     */\n    static $$parse(href = '') {\n        href = href.trim()\n\n        // protocol\n        let protocol = /^[a-zA-Z0-9]+:/i.exec(href)\n        if (protocol) {\n            protocol = protocol[0].toLowerCase()\n            href = href.slice(protocol.length)\n        }\n\n        // 跳过 //\n        if (href.indexOf('//') === 0) {\n            href = href.slice(2)\n        }\n\n        let hostStart = 0\n        let hostEnd = -1\n        let isEnd = false\n        let host\n        for (let i = 0, len = href.length; i < len; i++) {\n            const char = href[i]\n            if ('\\t\\n\\r \"%\\';<>\\\\^`{|}'.indexOf(char) >= 0) {\n                // RFC 2396：不允许在 hostname 中使用的字符\n                if (hostEnd === -1) hostEnd = i\n            } else if ('#/?'.indexOf(char) >= 0) {\n                // host 结束符\n                if (hostEnd === -1) hostEnd = i\n                isEnd = true\n            } else if (char === '@') {\n                hostStart = i + 1\n                hostEnd = -1\n            }\n\n            if (isEnd) break\n        }\n\n        if (hostEnd === -1) {\n            host = href.slice(hostStart)\n            href = ''\n        } else {\n            host = href.slice(hostStart, hostEnd)\n            href = href.slice(hostEnd)\n        }\n\n\n        // port\n        let port = /:[0-9]*$/.exec(host)\n        if (port) {\n            port = port[0]\n            host = host.slice(0, host.length - port.length)\n\n            if (port !== ':') port = port.slice(1)\n        } else {\n            port = ''\n        }\n\n        // hostname\n        for (let i = 0, len = host.length; i < len; i++) {\n            const char = host[i]\n            const isValid = (char >= 'a' && char <= 'z') || (char >= 'A' && char <= 'Z') || (char >= '0' && char <= '9') || '.-+_'.indexOf(char) >= 0 || char.charCodeAt(0) > 127\n\n            // 不合法的 host 字符\n            if (!isValid) {\n                host = host.slice(0, i)\n\n                href = `/${host.slice(i)}${href}`\n            }\n        }\n        const hostname = host.length > 255 ? '' : host.toLowerCase()\n\n        // hash\n        let hash\n        let searchIndex = -1\n        let hashIndex = -1\n        for (let i = 0, len = href.length; i < len; i++) {\n            if (href[i] === '#') {\n                hash = href.slice(i)\n                hashIndex = i\n                break\n            } else if (href[i] === '?' && searchIndex === -1) {\n                searchIndex = i\n            }\n        }\n        hash = hash === '#' ? '' : hash\n\n        // search\n        let search\n        if (searchIndex !== -1) {\n            if (hashIndex === -1) {\n                search = href.slice(searchIndex)\n            } else {\n                search = href.slice(searchIndex, hashIndex)\n            }\n        }\n        search = search === '?' ? '' : search\n\n        // pathname\n        let pathname\n        const firstIndex = searchIndex !== -1 && (hashIndex === -1 || searchIndex < hashIndex) ? searchIndex : hashIndex\n        if (firstIndex > 0) {\n            pathname = href.slice(0, firstIndex)\n        } else if (firstIndex === -1 && href.length > 0) {\n            pathname = href\n        }\n        if (hostname && !pathname) {\n            pathname = '/'\n        }\n\n        return {\n            protocol,\n            hostname,\n            port,\n            pathname,\n            hash,\n            search,\n        }\n    }\n\n    /**\n     * 不触发检查的方式替换 href\n     */\n    $$setHrefWithoutCheck(value) {\n        this.$_allowCheck = false\n        this.replace(value)\n        this.$_allowCheck = true\n    }\n\n    /**\n     * 开始检查 hash 变化\n     */\n    $$startCheckHash() {\n        if (!this.$_allowCheck) return\n\n        this.$_lastHash = this.$_hash\n        this.$_lastPathname = this.$_pathname\n        this.$_lastSearch = this.$_search\n        this.$_lastHref = this.href\n    }\n\n    /**\n     * 检查 hash 变化\n     */\n    $$endCheckHash(needCheckUrlChange) {\n        if (!this.$_allowCheck) return\n\n        if ((needCheckUrlChange || (this.$_lastPathname === this.$_pathname && this.$_lastSearch === this.$_search)) && this.$_lastHash !== this.$_hash) {\n            this.$$trigger('hashchange', {\n                event: {\n                    oldURL: this.$_lastHref,\n                    newURL: this.href,\n                }\n            })\n        }\n\n        this.$_lastHash = ''\n        this.$_lastPathname = ''\n        this.$_lastSearch = ''\n        this.$_lastHref = ''\n    }\n\n    /**\n     * 对外属性和方法\n     */\n    get protocol() {\n        return this.$_protocol\n    }\n\n    set protocol(value) {\n        if (!value || typeof value !== 'string') return\n\n        const parseRes = /^([a-z0-9.+-]+)(:)?$/i.exec(value)\n        const oldValues = this.$_getOldValues()\n\n        if (parseRes) {\n            if (parseRes[2] === ':') {\n                this.$_protocol = value\n            } else {\n                this.$_protocol = `${parseRes[1]}:`\n            }\n\n            if (this.$_checkUrl(oldValues)) this.$_enterHistory()\n        }\n    }\n\n    get host() {\n        return (this.$_hostname || '') + (this.$_port ? ':' + this.$_port : '')\n    }\n\n    set host(value) {\n        if (!value || typeof value !== 'string') return\n\n        const {hostname, port} = Location.$$parse(`//${value}`)\n        const oldValues = this.$_getOldValues()\n\n        this.$_hostname = hostname || this.$_hostname\n        this.$_port = port || ''\n\n        if (this.$_checkUrl(oldValues)) this.$_enterHistory()\n    }\n\n    get hostname() {\n        return this.$_hostname\n    }\n\n    set hostname(value) {\n        if (!value || typeof value !== 'string') return\n\n        const {hostname} = Location.$$parse(`//${value}`)\n        const oldValues = this.$_getOldValues()\n\n        this.$_hostname = hostname || this.$_hostname\n\n        if (this.$_checkUrl(oldValues)) this.$_enterHistory()\n    }\n\n    get port() {\n        return this.$_port\n    }\n\n    set port(value) {\n        value = +value\n\n        if (typeof value !== 'number' || !isFinite(value) || value <= 0) return\n\n        const port = value === 80 ? '' : value + ''\n        const oldValues = this.$_getOldValues()\n\n        this.$_port = port\n\n        if (this.$_checkUrl(oldValues)) this.$_enterHistory()\n    }\n\n    get origin() {\n        return `${this.$_protocol}//${this.host}`\n    }\n\n    set origin(value) {\n        if (!value || typeof value !== 'string') return\n        if (!/^(([a-zA-Z0-9]+:)|(\\/\\/))/i.test(value)) return // 没有带协议\n\n        const {protocol, hostname, port} = Location.$$parse(value)\n        const oldValues = this.$_getOldValues()\n\n        this.$_protocol = protocol || this.$_protocol\n        this.$_hostname = hostname || this.$_hostname\n        this.$_port = port || ''\n\n        if (this.$_checkUrl(oldValues)) this.$_enterHistory()\n    }\n\n    get pathname() {\n        return this.$_pathname\n    }\n\n    set pathname(value) {\n        if (typeof value !== 'string') return\n\n        const oldValues = this.$_getOldValues()\n\n        if (!value || value === '/') {\n            this.$_pathname = '/'\n        } else {\n            if (value[0] !== '/') value = `/${value}`\n\n            const {pathname} = Location.$$parse(`//miniprogram${value}`)\n\n            this.$_pathname = pathname || '/'\n        }\n\n        if (this.$_checkUrl(oldValues)) this.$_enterHistory()\n    }\n\n    get search() {\n        return this.$_search\n    }\n\n    set search(value) {\n        if (typeof value !== 'string') return\n\n        const oldValues = this.$_getOldValues()\n\n        if (!value || value === '?') {\n            this.$_search = ''\n        } else {\n            if (value[0] !== '?') value = `?${value}`\n\n            const {search} = Location.$$parse(`//miniprogram${value}`)\n\n            this.$_search = search || ''\n        }\n\n        if (this.$_checkUrl(oldValues)) this.$_enterHistory()\n    }\n\n    get hash() {\n        return this.$_hash\n    }\n\n    set hash(value) {\n        if (typeof value !== 'string') return\n\n        this.$$startCheckHash()\n\n        if (!value || value === '#') {\n            this.$_hash = ''\n        } else {\n            if (value[0] !== '#') value = `#${value}`\n\n            const {hash} = Location.$$parse(`//miniprogram${value}`)\n\n            this.$_hash = hash || ''\n        }\n\n        this.$$endCheckHash()\n        this.$_enterHistory()\n    }\n\n    get href() {\n        return `${this.$_protocol}//${this.host}${this.$_pathname}${this.$_search}${this.$_hash}`\n    }\n\n    set href(value) {\n        this.$_setHrefWithoutEnterHistory(value)\n        this.$_enterHistory()\n    }\n\n    reload() {\n        const window = cache.getWindow(this.$_pageId)\n        let param = ['type=jump', `targeturl=${encodeURIComponent(this.href)}`]\n        if (this.$_search) param.push(`search=${encodeURIComponent(this.$_search)}`)\n        if (this.$_hash) param.push(`hash=${encodeURIComponent(this.$_hash)}`)\n\n        param = '?' + param.join('&')\n\n        const callMethod = window.$$miniprogram.isTabBarPage(this.$_pageRoute) ? 'switchTab' : 'redirectTo'\n        wx[callMethod]({\n            url: `${this.$_pageRoute}${param}`,\n        })\n    }\n\n    replace(value) {\n        // 和直接赋值 location.href 不同，不需要进入 history\n        this.$_setHrefWithoutEnterHistory(value)\n    }\n\n    toString() {\n        return this.href\n    }\n}\n\nmodule.exports = Location\n","const Element = _require('../element')\nconst Event = _require('../../event/event')\nconst Pool = _require('../../util/pool')\nconst cache = _require('../../util/cache')\n\nconst pool = new Pool()\n\nclass Image extends Element {\n    /**\n     * 创建实例\n     */\n    static $$create(options, tree) {\n        const config = cache.getConfig()\n\n        if (config.optimization.elementMultiplexing) {\n            // 复用 element 节点\n            const instance = pool.get()\n\n            if (instance) {\n                instance.$$init(options, tree)\n                return instance\n            }\n        }\n\n        return new Image(options, tree)\n    }\n\n    /**\n     * 覆写父类的 $$init 方法\n     */\n    $$init(options, tree) {\n        const width = options.width\n        const height = options.height\n\n        if (typeof width === 'number' && width >= 0) options.attrs.width = width\n        if (typeof height === 'number' && height >= 0) options.attrs.height = height\n\n        super.$$init(options, tree)\n\n        this.$_naturalWidth = 0\n        this.$_naturalHeight = 0\n\n        this.$_initRect()\n    }\n\n    /**\n     * 覆写父类的 $$destroy 方法\n     */\n    $$destroy() {\n        super.$$destroy()\n\n        this.$_naturalWidth = null\n        this.$_naturalHeight = null\n    }\n\n    /**\n     * 覆写父类的回收实例方法\n     */\n    $$recycle() {\n        this.$$destroy()\n\n        const config = cache.getConfig()\n\n        if (config.optimization.elementMultiplexing) {\n            // 复用 element 节点\n            pool.add(this)\n        }\n    }\n\n    /**\n     * 更新父组件树\n     */\n    $_triggerParentUpdate() {\n        this.$_initRect()\n        super.$_triggerParentUpdate()\n    }\n\n    /**\n     * 初始化长宽\n     */\n    $_initRect() {\n        const width = parseInt(this.$_attrs.get('width'), 10)\n        const height = parseInt(this.$_attrs.get('height'), 10)\n\n        if (typeof width === 'number' && width >= 0) this.$_style.width = `${width}px`\n        if (typeof height === 'number' && height >= 0) this.$_style.height = `${height}px`\n    }\n\n    /**\n     * 重置长宽\n     */\n    $_resetRect(rect = {}) {\n        this.$_naturalWidth = rect.width || 0\n        this.$_naturalHeight = rect.height || 0\n\n        this.$_initRect()\n    }\n\n    /**\n     * 对外属性和方法\n     */\n    get src() {\n        return this.$_attrs.get('src') || ''\n    }\n\n    set src(value) {\n        if (!value || typeof value !== 'string') return\n\n        this.$_attrs.set('src', value)\n\n        setTimeout(() => {\n            wx.getImageInfo({\n                src: this.src,\n                success: res => {\n                    // 加载成功，调整图片的宽高\n                    this.$_resetRect(res)\n\n                    // 触发 load 事件\n                    this.$$trigger('load', {\n                        event: new Event({\n                            name: 'load',\n                            target: this,\n                            eventPhase: Event.AT_TARGET\n                        }),\n                        currentTarget: this,\n                    })\n                },\n                fail: () => {\n                    // 加载失败，调整图片的宽高\n                    this.$_resetRect({width: 0, height: 0})\n\n                    // 触发 error 事件\n                    this.$$trigger('error', {\n                        event: new Event({\n                            name: 'error',\n                            target: this,\n                            eventPhase: Event.AT_TARGET\n                        }),\n                        currentTarget: this,\n                    })\n                },\n            })\n        }, 0)\n    }\n\n    get width() {\n        return +this.$_attrs.get('width') || 0\n    }\n\n    set width(value) {\n        if (typeof value !== 'number' || !isFinite(value) || value < 0) return\n\n        this.$_attrs.set('width', value)\n        this.$_initRect()\n    }\n\n    get height() {\n        return +this.$_attrs.get('height') || 0\n    }\n\n    set height(value) {\n        if (typeof value !== 'number' || !isFinite(value) || value < 0) return\n\n        this.$_attrs.set('height', value)\n        this.$_initRect()\n    }\n\n    get naturalWidth() {\n        return this.$_naturalWidth\n    }\n\n    get naturalHeight() {\n        return this.$_naturalHeight\n    }\n}\n\nmodule.exports = Image\n","const Element = _require('../element')\nconst Pool = _require('../../util/pool')\nconst cache = _require('../../util/cache')\n\nconst pool = new Pool()\n\nclass HTMLInputElement extends Element {\n    /**\n     * 创建实例\n     */\n    static $$create(options, tree) {\n        const config = cache.getConfig()\n\n        if (config.optimization.elementMultiplexing) {\n            // 复用 element 节点\n            const instance = pool.get()\n\n            if (instance) {\n                instance.$$init(options, tree)\n                return instance\n            }\n        }\n\n        return new HTMLInputElement(options, tree)\n    }\n\n    /**\n     * 覆写父类的回收实例方法\n     */\n    $$recycle() {\n        this.$$destroy()\n\n        const config = cache.getConfig()\n\n        if (config.optimization.elementMultiplexing) {\n            // 复用 element 节点\n            pool.add(this)\n        }\n    }\n\n    /**\n     * 调用 $_generateHtml 接口时用于处理额外的属性，\n     */\n    $$dealWithAttrsForGenerateHtml(html, node) {\n        const type = node.type\n        if (type) html += ` type=\"${type}\"`\n\n        const value = node.value\n        if (value) html += ` value=\"${value}\"`\n\n        const disabled = node.disabled\n        if (disabled) html += ' disabled'\n\n        const maxlength = node.maxlength\n        if (maxlength) html += ` maxlength=\"${maxlength}\"`\n\n        const placeholder = node.placeholder\n        if (placeholder) html += ` placeholder=\"${placeholder.replace(/\"/g, '\\\\\"')}\"`\n\n        return html\n    }\n\n    /**\n     * 调用 outerHTML 的 setter 时用于处理额外的属性\n     */\n    $$dealWithAttrsForOuterHTML(node) {\n        this.type = node.type || ''\n        this.value = node.value || ''\n        this.disabled = node.disabled || ''\n        this.maxlength = node.maxlength\n        this.placeholder = node.placeholder || ''\n\n        // 特殊字段\n        this.mpplaceholderclass = node.mpplaceholderclass || ''\n    }\n\n    /**\n     * 调用 cloneNode 接口时用于处理额外的属性\n     */\n    $$dealWithAttrsForCloneNode() {\n        return {\n            type: this.type,\n            value: this.value,\n            disabled: this.disabled,\n            maxlength: this.maxlength,\n            placeholder: this.placeholder,\n\n            // 特殊字段\n            mpplaceholderclass: this.mpplaceholderclass,\n        }\n    }\n\n    /**\n     * 对外属性和方法\n     */\n    get name() {\n        return this.$_attrs.get('name')\n    }\n\n    set name(value) {\n        value = '' + value\n        this.$_attrs.set('name', value)\n    }\n\n    get type() {\n        return this.$_attrs.get('type') || 'text'\n    }\n\n    set type(value) {\n        value = '' + value\n        this.$_attrs.set('type', value)\n    }\n\n    get value() {\n        const type = this.$_attrs.get('type')\n        const value = this.$_attrs.get('value')\n\n        if ((type === 'radio' || type === 'checkbox') && value === undefined) return 'on'\n        return value\n    }\n\n    set value(value) {\n        value = '' + value\n        this.$_attrs.set('value', value)\n    }\n\n    get disabled() {\n        return !!this.$_attrs.get('disabled')\n    }\n\n    set disabled(value) {\n        value = !!value\n        this.$_attrs.set('disabled', value)\n    }\n\n    get maxlength() {\n        return this.$_attrs.get('maxlength')\n    }\n\n    set maxlength(value) {\n        this.$_attrs.set('maxlength', value)\n    }\n\n    get placeholder() {\n        return this.$_attrs.get('placeholder') || ''\n    }\n\n    set placeholder(value) {\n        value = '' + value\n        this.$_attrs.set('placeholder', value)\n    }\n\n    get autofocus() {\n        return !!this.$_attrs.get('autofocus')\n    }\n\n    set autofocus(value) {\n        value = !!value\n        this.$_attrs.set('autofocus', value)\n    }\n\n    set checked(value) {\n        this.$_attrs.set('checked', value)\n    }\n\n    get checked() {\n        return this.$_attrs.get('checked') || ''\n    }\n\n    focus() {\n        this.$_attrs.set('focus', true)\n    }\n\n    blur() {\n        this.$_attrs.set('focus', false)\n    }\n}\n\nmodule.exports = HTMLInputElement\n","const Element = _require('../element')\r\nconst Pool = _require('../../util/pool')\r\nconst cache = _require('../../util/cache')\r\n\r\nconst pool = new Pool()\r\n\r\nclass HTMLTextAreaElement extends Element {\r\n    /**\r\n     * 创建实例\r\n     */\r\n    static $$create(options, tree) {\r\n        const config = cache.getConfig()\r\n\r\n        if (config.optimization.elementMultiplexing) {\r\n            // 复用 element 节点\r\n            const instance = pool.get()\r\n\r\n            if (instance) {\r\n                instance.$$init(options, tree)\r\n                return instance\r\n            }\r\n        }\r\n\r\n        return new HTMLTextAreaElement(options, tree)\r\n    }\r\n\r\n    /**\r\n     * 覆写父类的回收实例方法\r\n     */\r\n    $$recycle() {\r\n        this.$$destroy()\r\n\r\n        const config = cache.getConfig()\r\n\r\n        if (config.optimization.elementMultiplexing) {\r\n            // 复用 element 节点\r\n            pool.add(this)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 调用 $_generateHtml 接口时用于处理额外的属性，\r\n     */\r\n    $$dealWithAttrsForGenerateHtml(html, node) {\r\n        const type = node.type\r\n        if (type) html += ` type=\"${type}\"`\r\n\r\n        const value = node.value\r\n        if (value) html += ` value=\"${value}\"`\r\n\r\n        const disabled = node.disabled\r\n        if (disabled) html += ' disabled'\r\n\r\n        const maxlength = node.maxlength\r\n        if (maxlength) html += ` maxlength=\"${maxlength}\"`\r\n\r\n        const placeholder = node.placeholder\r\n        if (placeholder) html += ` placeholder=\"${placeholder.replace(/\"/g, '\\\\\"')}\"`\r\n\r\n        return html\r\n    }\r\n\r\n    /**\r\n     * 调用 outerHTML 的 setter 时用于处理额外的属性\r\n     */\r\n    $$dealWithAttrsForOuterHTML(node) {\r\n        this.type = node.type || ''\r\n        this.value = node.value || ''\r\n        this.disabled = node.disabled || ''\r\n        this.maxlength = node.maxlength\r\n        this.placeholder = node.placeholder || ''\r\n\r\n        // 特殊字段\r\n        this.mpplaceholderclass = node.mpplaceholderclass || ''\r\n    }\r\n\r\n    /**\r\n     * 调用 cloneNode 接口时用于处理额外的属性\r\n     */\r\n    $$dealWithAttrsForCloneNode() {\r\n        return {\r\n            type: this.type,\r\n            value: this.value,\r\n            disabled: this.disabled,\r\n            maxlength: this.maxlength,\r\n            placeholder: this.placeholder,\r\n\r\n            // 特殊字段\r\n            mpplaceholderclass: this.mpplaceholderclass,\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 对外属性和方法\r\n     */\r\n    get type() {\r\n        return this.$_attrs.get('type') || 'textarea'\r\n    }\r\n\r\n    set type(value) {\r\n        value = '' + value\r\n        this.$_attrs.set('type', value)\r\n    }\r\n\r\n    get value() {\r\n        return this.$_attrs.get('value')\r\n    }\r\n\r\n    set value(value) {\r\n        value = '' + value\r\n        this.$_attrs.set('value', value)\r\n    }\r\n\r\n    get disabled() {\r\n        return !!this.$_attrs.get('disabled')\r\n    }\r\n\r\n    set disabled(value) {\r\n        value = !!value\r\n        this.$_attrs.set('disabled', value)\r\n    }\r\n\r\n    get maxlength() {\r\n        return this.$_attrs.get('maxlength')\r\n    }\r\n\r\n    set maxlength(value) {\r\n        this.$_attrs.set('maxlength', value)\r\n    }\r\n\r\n    get placeholder() {\r\n        return this.$_attrs.get('placeholder') || ''\r\n    }\r\n\r\n    set placeholder(value) {\r\n        value = '' + value\r\n        this.$_attrs.set('placeholder', value)\r\n    }\r\n\r\n    get autofocus() {\r\n        return !!this.$_attrs.get('autofocus')\r\n    }\r\n\r\n    set autofocus(value) {\r\n        value = !!value\r\n        this.$_attrs.set('autofocus', value)\r\n    }\r\n\r\n    get selectionStart() {\r\n        const value = +this.$_attrs.get('selection-start')\r\n        return value !== undefined ? value : -1\r\n    }\r\n\r\n    set selectionStart(value) {\r\n        this.$_attrs.set('selection-start', value)\r\n    }\r\n\r\n    get selectionEnd() {\r\n        const value = +this.$_attrs.get('selection-end')\r\n        return value !== undefined ? value : -1\r\n    }\r\n\r\n    set selectionEnd(value) {\r\n        this.$_attrs.set('selection-end', value)\r\n    }\r\n\r\n    focus() {\r\n        this.$_attrs.set('focus', true)\r\n    }\r\n\r\n    blur() {\r\n        this.$_attrs.set('focus', false)\r\n    }\r\n}\r\n\r\nmodule.exports = HTMLTextAreaElement\r\n","const Element = _require('../element')\r\nconst Pool = _require('../../util/pool')\r\nconst cache = _require('../../util/cache')\r\n\r\nconst pool = new Pool()\r\n\r\nclass HTMLVideoElement extends Element {\r\n    /**\r\n     * 创建实例\r\n     */\r\n    static $$create(options, tree) {\r\n        const config = cache.getConfig()\r\n\r\n        if (config.optimization.elementMultiplexing) {\r\n            // 复用 element 节点\r\n            const instance = pool.get()\r\n\r\n            if (instance) {\r\n                instance.$$init(options, tree)\r\n                return instance\r\n            }\r\n        }\r\n\r\n        return new HTMLVideoElement(options, tree)\r\n    }\r\n\r\n    /**\r\n     * 覆写父类的 $$init 方法\r\n     */\r\n    $$init(options, tree) {\r\n        const width = options.width\r\n        const height = options.height\r\n\r\n        if (typeof width === 'number' && width >= 0) options.attrs.width = width\r\n        if (typeof height === 'number' && height >= 0) options.attrs.height = height\r\n\r\n        super.$$init(options, tree)\r\n\r\n        this.$_initRect()\r\n    }\r\n\r\n    /**\r\n     * 覆写父类的回收实例方法\r\n     */\r\n    $$recycle() {\r\n        this.$$destroy()\r\n\r\n        const config = cache.getConfig()\r\n\r\n        if (config.optimization.elementMultiplexing) {\r\n            // 复用 element 节点\r\n            pool.add(this)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 更新父组件树\r\n     */\r\n    $_triggerParentUpdate() {\r\n        this.$_initRect()\r\n        super.$_triggerParentUpdate()\r\n    }\r\n\r\n    /**\r\n     * 初始化长宽\r\n     */\r\n    $_initRect() {\r\n        const width = parseInt(this.$_attrs.get('width'), 10)\r\n        const height = parseInt(this.$_attrs.get('height'), 10)\r\n\r\n        if (typeof width === 'number' && width >= 0) this.$_style.width = `${width}px`\r\n        if (typeof height === 'number' && height >= 0) this.$_style.height = `${height}px`\r\n    }\r\n\r\n    /**\r\n     * 对外属性和方法\r\n     */\r\n    get src() {\r\n        return this.$_attrs.get('src') || ''\r\n    }\r\n\r\n    set src(value) {\r\n        if (!value || typeof value !== 'string') return\r\n\r\n        this.$_attrs.set('src', value)\r\n    }\r\n\r\n    get width() {\r\n        return +this.$_attrs.get('width') || 0\r\n    }\r\n\r\n    set width(value) {\r\n        if (typeof value !== 'number' || !isFinite(value) || value < 0) return\r\n\r\n        this.$_attrs.set('width', value)\r\n        this.$_initRect()\r\n    }\r\n\r\n    get height() {\r\n        return +this.$_attrs.get('height') || 0\r\n    }\r\n\r\n    set height(value) {\r\n        if (typeof value !== 'number' || !isFinite(value) || value < 0) return\r\n\r\n        this.$_attrs.set('height', value)\r\n        this.$_initRect()\r\n    }\r\n\r\n    get autoplay() {\r\n        return !!this.$_attrs.get('autoplay')\r\n    }\r\n\r\n    set autoplay(value) {\r\n        value = !!value\r\n        this.$_attrs.set('autoplay', value)\r\n    }\r\n\r\n    get loop() {\r\n        return !!this.$_attrs.get('loop')\r\n    }\r\n\r\n    set loop(value) {\r\n        value = !!value\r\n        this.$_attrs.set('loop', value)\r\n    }\r\n\r\n    get muted() {\r\n        return !!this.$_attrs.get('muted')\r\n    }\r\n\r\n    set muted(value) {\r\n        value = !!value\r\n        this.$_attrs.set('muted', value)\r\n    }\r\n\r\n    get controls() {\r\n        const value = this.$_attrs.get('controls')\r\n        return value !== undefined ? !!value : true\r\n    }\r\n\r\n    set controls(value) {\r\n        this.$_attrs.set('controls', value)\r\n    }\r\n\r\n    get poster() {\r\n        return this.$_attrs.get('poster')\r\n    }\r\n\r\n    set poster(value) {\r\n        if (!value || typeof value !== 'string') return\r\n\r\n        this.$_attrs.set('poster', value)\r\n    }\r\n\r\n    get currentTime() {\r\n        return +this.$_attrs.get('currentTime') || 0\r\n    }\r\n\r\n    get buffered() {\r\n        return this.$_attrs.get('buffered')\r\n    }\r\n}\r\n\r\nmodule.exports = HTMLVideoElement\r\n","const Element = _require('../element')\nconst Pool = _require('../../util/pool')\nconst cache = _require('../../util/cache')\n\nconst pool = new Pool()\n\nclass HTMLCanvasElement extends Element {\n    /**\n     * 创建实例\n     */\n    static $$create(options, tree) {\n        const config = cache.getConfig()\n\n        if (config.optimization.elementMultiplexing) {\n            // 复用 element 节点\n            const instance = pool.get()\n\n            if (instance) {\n                instance.$$init(options, tree)\n                return instance\n            }\n        }\n\n        return new HTMLCanvasElement(options, tree)\n    }\n\n    /**\n     * 覆写父类的 $$init 方法\n     */\n    $$init(options, tree) {\n        const width = options.width\n        const height = options.height\n\n        if (typeof width === 'number' && width >= 0) options.attrs.width = width\n        if (typeof height === 'number' && height >= 0) options.attrs.height = height\n\n        super.$$init(options, tree)\n\n        this.$_node = null\n\n        this.$_initRect()\n    }\n\n    /**\n     * 覆写父类的回收实例方法\n     */\n    $$recycle() {\n        this.$$destroy()\n\n        const config = cache.getConfig()\n\n        if (config.optimization.elementMultiplexing) {\n            // 复用 element 节点\n            pool.add(this)\n        }\n    }\n\n    /**\n     * 准备 canvas 节点\n     */\n    $$prepare() {\n        return new Promise((resolve, reject) => {\n            this.$$getNodesRef().then(nodesRef => nodesRef.node(res => {\n                this.$_node = res.node\n\n                // 设置 canvas 宽高\n                this.$_node.width = this.width\n                this.$_node.height = this.height\n\n                resolve(this)\n            }).exec()).catch(reject)\n        })\n    }\n\n    /**\n     * 更新父组件树\n     */\n    $_triggerParentUpdate() {\n        this.$_initRect()\n        super.$_triggerParentUpdate()\n    }\n\n    /**\n     * 初始化长宽\n     */\n    $_initRect() {\n        const width = parseInt(this.$_attrs.get('width'), 10)\n        const height = parseInt(this.$_attrs.get('height'), 10)\n\n        if (typeof width === 'number' && width >= 0) {\n            this.$_style.width = `${width}px`\n            if (this.$_node) this.$_node.width = width\n        }\n        if (typeof height === 'number' && height >= 0) {\n            this.$_style.height = `${height}px`\n            if (this.$_node) this.$_node.height = height\n        }\n    }\n\n    /**\n     * 对外属性和方法\n     */\n    get width() {\n        return +this.$_attrs.get('width') || 0\n    }\n\n    set width(value) {\n        if (typeof value !== 'number' || !isFinite(value) || value < 0) return\n\n        this.$_attrs.set('width', value)\n        this.$_initRect()\n    }\n\n    get height() {\n        return +this.$_attrs.get('height') || 0\n    }\n\n    set height(value) {\n        if (typeof value !== 'number' || !isFinite(value) || value < 0) return\n\n        this.$_attrs.set('height', value)\n        this.$_initRect()\n    }\n\n    getContext(type) {\n        if (!this.$_node) {\n            console.warn('canvas is not prepared, please call $$prepare method first')\n            return\n        }\n        return this.$_node.getContext(type)\n    }\n}\n\nmodule.exports = HTMLCanvasElement\n","const Element = _require('../element')\nconst Pool = _require('../../util/pool')\nconst cache = _require('../../util/cache')\n\nconst pool = new Pool()\n\nclass NotSupport extends Element {\n    /**\n     * 创建实例\n     */\n    static $$create(options, tree) {\n        const config = cache.getConfig()\n\n        if (config.optimization.elementMultiplexing) {\n            // 复用 element 节点\n            const instance = pool.get()\n\n            if (instance) {\n                instance.$$init(options, tree)\n                return instance\n            }\n        }\n\n        return new NotSupport(options, tree)\n    }\n\n    /**\n     * 覆写父类的 $$init 方法\n     */\n    $$init(options, tree) {\n        super.$$init(options, tree)\n\n        // 处理特殊节点\n        const window = cache.getWindow(this.$_pageId)\n        if (window.onDealWithNotSupportDom) window.onDealWithNotSupportDom(this)\n    }\n\n    /**\n     * 覆写父类的 $$destroy 方法\n     */\n    $$destroy() {\n        super.$$destroy()\n    }\n\n    /**\n     * 覆写父类的回收实例方法\n     */\n    $$recycle() {\n        this.$$destroy()\n\n        const config = cache.getConfig()\n\n        if (config.optimization.elementMultiplexing) {\n            // 复用 element 节点\n            pool.add(this)\n        }\n    }\n}\n\nmodule.exports = NotSupport\n","const Element = _require('../element')\r\nconst Pool = _require('../../util/pool')\r\nconst cache = _require('../../util/cache')\r\n\r\nconst pool = new Pool()\r\n\r\nclass WxComponent extends Element {\r\n    /**\r\n     * 创建实例\r\n     */\r\n    static $$create(options, tree) {\r\n        const config = cache.getConfig()\r\n\r\n        if (config.optimization.elementMultiplexing) {\r\n            // 复用 element 节点\r\n            const instance = pool.get()\r\n\r\n            if (instance) {\r\n                instance.$$init(options, tree)\r\n                return instance\r\n            }\r\n        }\r\n\r\n        return new WxComponent(options, tree)\r\n    }\r\n\r\n    /**\r\n     * 覆写父类的回收实例方法\r\n     */\r\n    $$recycle() {\r\n        this.$$destroy()\r\n\r\n        const config = cache.getConfig()\r\n\r\n        if (config.optimization.elementMultiplexing) {\r\n            // 复用 element 节点\r\n            pool.add(this)\r\n        }\r\n    }\r\n\r\n    get behavior() {\r\n        return this.$_attrs.get('behavior') || ''\r\n    }\r\n\r\n    set behavior(value) {\r\n        if (!value || typeof value !== 'string') return\r\n\r\n        this.$_attrs.set('behavior', value)\r\n    }\r\n\r\n    get value() {\r\n        return this.$_attrs.get('value')\r\n    }\r\n\r\n    set value(value) {\r\n        this.$_attrs.set('value', value)\r\n    }\r\n\r\n    get scrollTop() {\r\n        return this.$_attrs.get('scroll-top') || 0\r\n    }\r\n\r\n    set scrollTop(value) {\r\n        value = parseInt(value, 10)\r\n\r\n        if (!isNaN(value)) {\r\n            this.$_attrs.set('scroll-top', value)\r\n        }\r\n    }\r\n\r\n    get scrollLeft() {\r\n        return this.$_attrs.get('scroll-left') || 0\r\n    }\r\n\r\n    set scrollLeft(value) {\r\n        value = parseInt(value, 10)\r\n\r\n        if (!isNaN(value)) {\r\n            this.$_attrs.set('scroll-left', value)\r\n        }\r\n    }\r\n}\r\n\r\nmodule.exports = WxComponent\r\n","const Element = _require('../element')\r\nconst Pool = _require('../../util/pool')\r\nconst cache = _require('../../util/cache')\r\n\r\nconst pool = new Pool()\r\n\r\nclass WxCustomComponent extends Element {\r\n    /**\r\n     * 创建实例\r\n     */\r\n    static $$create(options, tree) {\r\n        const config = cache.getConfig()\r\n\r\n        if (config.optimization.elementMultiplexing) {\r\n            // 复用 element 节点\r\n            const instance = pool.get()\r\n\r\n            if (instance) {\r\n                instance.$$init(options, tree)\r\n                return instance\r\n            }\r\n        }\r\n\r\n        return new WxCustomComponent(options, tree)\r\n    }\r\n\r\n    /**\r\n     * 覆写父类的 $$init 方法\r\n     */\r\n    $$init(options, tree) {\r\n        this.$_behavior = options.componentName\r\n\r\n        super.$$init(options, tree)\r\n    }\r\n\r\n    /**\r\n     * 覆写父类的 $$destroy 方法\r\n     */\r\n    $$destroy() {\r\n        super.$$destroy()\r\n\r\n        this.$_behavior = null\r\n    }\r\n\r\n    /**\r\n     * 覆写父类的回收实例方法\r\n     */\r\n    $$recycle() {\r\n        this.$$destroy()\r\n\r\n        const config = cache.getConfig()\r\n\r\n        if (config.optimization.elementMultiplexing) {\r\n            // 复用 element 节点\r\n            pool.add(this)\r\n        }\r\n    }\r\n\r\n    get behavior() {\r\n        return this.$_behavior\r\n    }\r\n}\r\n\r\nmodule.exports = WxCustomComponent\r\n","const Location = _require('./location')\nconst cache = _require('../util/cache')\n\nclass Cookie {\n    constructor(pageName) {\n        const config = cache.getConfig()\n        const runtime = config.runtime || {}\n        this.cookieStore = runtime.cookieStore\n        this.$_pageName = pageName\n\n        if (this.cookieStore !== 'storage' && this.cookieStore !== 'memory') {\n            // 需要全局共享\n            this.$_map = cache.getCookie()\n        } else {\n            this.$_map = {} // 三维数组，domain - path - key\n        }\n    }\n\n    static parse(cookieStr) {\n        if (!cookieStr && typeof cookieStr !== 'string') return null\n\n        cookieStr = cookieStr.trim().split(';')\n\n        // key-value\n        const parseKeyValue = /^([^=;\\x00-\\x1F]+)=([^;\\n\\r\\0\\x00-\\x1F]*).*/.exec(cookieStr.shift())\n        if (!parseKeyValue) return null\n\n        const key = (parseKeyValue[1] || '').trim()\n        const value = (parseKeyValue[2] || '').trim()\n\n        // 其他字段\n        let path = null\n        let domain = null\n        let expires = null\n        let maxAge = null\n        let secure = false\n        let httpOnly = false\n\n        for (let item of cookieStr) {\n            item = item.trim()\n            if (!item) continue\n\n            let [key, value] = item.split('=')\n            key = (key || '').trim().toLowerCase()\n            value = (value || '').trim()\n\n            if (!key) continue\n\n            switch (key) {\n            case 'path':\n                if (value[0] === '/') path = value\n                break\n            case 'domain':\n                value = value.replace(/^\\./, '').toLowerCase()\n                if (value) domain = value\n                break\n            case 'expires':\n                if (value) {\n                    const timeStamp = Date.parse(value)\n                    if (timeStamp) expires = timeStamp\n                }\n                break\n            case 'max-age':\n                if (/^-?[0-9]+$/.test(value)) maxAge = +value * 1000\n                break\n            case 'secure':\n                secure = true\n                break\n            case 'httponly':\n                httpOnly = true\n                break\n            default:\n                // ignore\n                break\n            }\n        }\n\n        return {\n            key, value, path, domain, expires, maxAge, secure, httpOnly\n        }\n    }\n\n    /**\n     * 判断 domain\n     */\n    $_checkDomain(host, cookieDomain) {\n        if (host === cookieDomain) return true\n\n        const index = host.indexOf(`.${cookieDomain}`)\n\n        return index > 0 && cookieDomain.length + index + 1 === host.length\n    }\n\n    /**\n     * 判断 path\n     */\n    $_checkPath(path, cookiePath) {\n        if (path === cookiePath) return true\n\n        cookiePath = cookiePath === '/' ? '' : cookiePath\n        return path.indexOf(`${cookiePath}/`) === 0\n    }\n\n    /**\n     * 判断过期\n     */\n    $_checkExpires(cookie) {\n        const now = Date.now()\n\n        // maxAge 优先\n        if (cookie.maxAge !== null) return cookie.createTime + cookie.maxAge > now\n\n        // 判断 expires\n        if (cookie.expires !== null) return cookie.expires > now\n\n        return true\n    }\n\n    /**\n     * 设置 cookie\n     */\n    setCookie(cookie, url) {\n        cookie = Cookie.parse(cookie)\n\n        if (!cookie) return\n\n        const {hostname, port, pathname} = Location.$$parse(url)\n        const host = ((hostname || '') + (port ? ':' + port : '')) || ''\n        const path = (pathname || '')[0] === '/' ? pathname : '/'\n\n        if (cookie.domain) {\n            // 判断 domain\n            if (!this.$_checkDomain(host, cookie.domain)) return\n        } else {\n            // 使用 host 作为默认的 domain\n            cookie.domain = host\n        }\n\n        // 需要设置 path 字段的情况，取 url 中除去最后一节的 path\n        if (!cookie.path || cookie.path[0] !== '/') {\n            const lastIndex = path.lastIndexOf('/')\n\n            cookie.path = lastIndex === 0 ? path : path.substr(0, lastIndex)\n        }\n\n        // 存入 cookie\n        const map = this.$_map\n        const cookieDomain = cookie.domain\n        const cookiePath = cookie.path\n        const cookieKey = cookie.key\n\n        if (!map[cookieDomain]) map[cookieDomain] = {}\n        if (!map[cookieDomain][cookiePath]) map[cookieDomain][cookiePath] = {}\n\n        const oldCookie = map[cookieDomain][cookiePath][cookieKey]\n        cookie.createTime = oldCookie && oldCookie.createTime || Date.now()\n\n        if (this.$_checkExpires(cookie)) {\n            // 未过期\n            map[cookieDomain][cookiePath][cookieKey] = cookie\n        } else if (oldCookie) {\n            // 存在旧 cookie，且被设置为已过期\n            delete map[cookieDomain][cookiePath][cookieKey]\n        }\n\n        // 持久化 cookie\n        if (this.cookieStore !== 'memory' && this.cookieStore !== 'globalmemory') {\n            const key = this.cookieStore === 'storage' ? `PAGE_COOKIE_${this.$_pageName}` : 'PAGE_COOKIE'\n            wx.setStorage({\n                key,\n                data: this.serialize(),\n            })\n        }\n    }\n\n    /**\n     * 拉取 cookie\n     */\n    getCookie(url, includeHttpOnly) {\n        const {\n            protocol, hostname, port, pathname\n        } = Location.$$parse(url)\n        const host = ((hostname || '') + (port ? ':' + port : '')) || ''\n        const path = (pathname || '')[0] === '/' ? pathname : '/'\n        const res = []\n\n        const map = this.$_map\n        const domainList = Object.keys(map)\n\n        for (const domainItem of domainList) {\n            // 判断 domain\n            if (this.$_checkDomain(host, domainItem)) {\n                const domainMap = map[domainItem] || {}\n                const pathList = Object.keys(domainMap)\n\n                for (const pathItem of pathList) {\n                    // 判断 path\n                    if (this.$_checkPath(path, pathItem)) {\n                        const pathMap = map[domainItem][pathItem] || {}\n\n                        Object.keys(pathMap).forEach(key => {\n                            const cookie = pathMap[key]\n\n                            if (!cookie) return\n\n                            // 判断协议\n                            if (cookie.secure && protocol !== 'https:' && protocol !== 'wss:') return\n                            if (!includeHttpOnly && cookie.httpOnly && protocol && protocol !== 'http:') return\n\n                            // 判断过期\n                            if (this.$_checkExpires(cookie)) {\n                                res.push(cookie)\n                            } else {\n                                // 过期，删掉\n                                delete map[domainItem][pathItem][key]\n                            }\n                        })\n                    }\n                }\n            }\n        }\n\n        return res\n            .sort((a, b) => {\n                const gap = a.createTime - b.createTime\n\n                if (!gap) {\n                    return a.key < b.key ? -1 : 1\n                } else {\n                    return gap\n                }\n            })\n            .map(cookie => `${cookie.key}=${cookie.value}`)\n            .join('; ')\n    }\n\n    /**\n     * 序列化\n     */\n    serialize() {\n        try {\n            return JSON.stringify(this.$_map)\n        } catch (err) {\n            console.log('cannot serialize the cookie')\n            return ''\n        }\n    }\n\n    /**\n     * 反序列化\n     */\n    deserialize(str) {\n        let map = {}\n        try {\n            map = JSON.parse(str)\n        } catch (err) {\n            console.log('cannot deserialize the cookie')\n            map = {}\n        }\n\n        // 合并 cookie\n        const domainList = Object.keys(map)\n\n        for (const domainItem of domainList) {\n            const domainMap = map[domainItem] || {}\n            const pathList = Object.keys(domainMap)\n\n            for (const pathItem of pathList) {\n                const pathMap = map[domainItem][pathItem] || {}\n\n                Object.keys(pathMap).forEach(key => {\n                    const cookie = pathMap[key]\n\n                    if (!cookie) return\n\n                    // 已存在则不覆盖\n                    if (!this.$_map[domainItem]) this.$_map[domainItem] = {}\n                    if (!this.$_map[domainItem][pathItem]) this.$_map[domainItem][pathItem] = {}\n                    if (!this.$_map[domainItem][pathItem][key]) this.$_map[domainItem][pathItem][key] = cookie\n                })\n            }\n        }\n    }\n}\n\nmodule.exports = Cookie\n","class Navigator {\n    constructor() {\n        this.$_language = ''\n        this.$_wxVersion = ''\n        this.$_brand = '' // 手机品牌\n        this.$_model = '' // 手机型号\n        this.$_platform = ''\n        this.$_system = '' // 操作系统版本\n\n        this.$_userAgent = ''\n    }\n\n    /**\n     * 重置实例\n     */\n    $$reset(info) {\n        this.$_language = info.language\n        this.$_wxVersion = info.version\n        this.$_brand = info.brand\n        this.$_model = info.model\n        this.$_platform = info.platform\n        this.$_system = info.system\n\n        // 拼装 userAgent\n        const appVersion = '5.0'\n        const appleWebKitVersion = '602.3.12'\n        let platformContext\n        if (this.$_platform === 'ios') {\n            // 拆分系统版本号\n            let systemVersion = this.$_system.split(' ')\n            if (systemVersion.length >= 2) {\n                systemVersion = systemVersion[1].split('.').join('_')\n            } else {\n                systemVersion = ''\n            }\n\n            platformContext = `${this.$_brand}; CPU ${this.$_brand} OS ${systemVersion} like Mac OS X`\n        } else if (this.$_platform === 'android') {\n            platformContext = `Linux; ${this.$_system}; ${this.$_model}`\n        } else {\n            // 在开发者工具上，默认在 windows x64 上运行\n            platformContext = 'Windows NT 6.1; win64; x64'\n        }\n\n        this.$_userAgent = `${this.appCodeName}/${appVersion} (${platformContext}) AppleWebKit/${appleWebKitVersion} (KHTML, like Gecko) Mobile MicroMessenger/${this.$_wxVersion} Language/${this.language}`\n    }\n\n    /**\n     * 对外属性和方法\n     */\n    get userAgent() {\n        return this.$_userAgent\n    }\n\n    get appCodeName() {\n        return 'Mozilla'\n    }\n\n    get appName() {\n        return 'Netscape'\n    }\n\n    get language() {\n        return this.$_language\n    }\n\n    get languages() {\n        return [this.$_language]\n    }\n\n    get platform() {\n        return this.$_platform\n    }\n\n    get product() {\n        return 'Gecko'\n    }\n}\n\nmodule.exports = Navigator\n","const EventTarget = _require('../event/event-target')\n\nclass Screen extends EventTarget {\n    constructor() {\n        super()\n\n        this.$_width = 0\n        this.$_height = 0\n    }\n\n    /**\n     * 重置实例\n     */\n    $$reset(info) {\n        this.$_width = info.screenWidth\n        this.$_height = info.screenHeight\n    }\n\n    /**\n     * 对外属性和方法\n     */\n    get width() {\n        return this.$_width\n    }\n\n    get height() {\n        return this.$_height\n    }\n}\n\nmodule.exports = Screen\n","/**\n * 暂不维护跳转后页面的历史，不做页面刷新的操作\n */\nconst Location = _require('./location')\nconst EventTarget = _require('../event/event-target')\n\nclass History extends EventTarget {\n    constructor(location) {\n        super()\n\n        this.$_location = location\n        this.$_stack = [{\n            state: null,\n            title: '',\n            url: location.href,\n        }]\n        this.$_currentIndex = 0\n\n        this.$_location.addEventListener('$_addToHistory', evt => {\n            this.$_currentIndex++\n            this.$_stack = this.$_stack.slice(0, this.$_currentIndex)\n            this.$_stack.push({\n                state: null,\n                title: '',\n                url: evt.href\n            })\n        })\n    }\n\n    /**\n     * 检查是否同源\n     */\n    $_checkOrigin(url) {\n        const {protocol, hostname, port} = Location.$$parse(url)\n\n        return (!protocol || this.$_location.protocol === protocol) && (!hostname || this.$_location.hostname === hostname) && ((!hostname && !port) || this.$_location.port === port)\n    }\n\n    /**\n     * 重置实例\n     */\n    $$reset() {\n        this.$_stack = [{\n            state: null,\n            title: '',\n            url: this.$_location.href,\n        }]\n        this.$_currentIndex = 0\n    }\n\n    /**\n     * 对外属性和方法\n     */\n    get state() {\n        const current = this.$_stack[this.$_currentIndex]\n        return current && current.state || null\n    }\n\n    get length() {\n        return this.$_stack.length\n    }\n\n    back() {\n        this.go(-1)\n    }\n\n    forward() {\n        this.go(1)\n    }\n\n    go(delta) {\n        if (typeof delta === 'number') {\n            const next = this.$_currentIndex + delta\n\n            if (next >= 0 && next < this.$_stack.length && this.$_currentIndex !== next) {\n                this.$_currentIndex = next\n                // 替换 href，但不做跳转（理论上此处应该做跳转，但是在小程序环境里不适合）\n                this.$_location.$$startCheckHash()\n                this.$_location.$$setHrefWithoutCheck(this.$_stack[this.$_currentIndex].url)\n                this.$_location.$$endCheckHash(true) // 因为不跳转，所以要强制触发 hashchange 检测\n\n                this.$$trigger('popstate', {\n                    event: {\n                        state: this.state\n                    }\n                })\n            }\n        } else {\n            // 刷新当前页面\n            this.$_location.reload()\n        }\n    }\n\n    pushState(state = null, title, url) {\n        if (!url || typeof url !== 'string') return\n\n        if (this.$_checkOrigin(url)) {\n            // 同源才允许操作\n            if (title && typeof title === 'string') {\n                // 设置标题\n                wx.setNavigationBarTitle({title})\n            }\n\n\n            this.$_currentIndex++\n            this.$_stack = this.$_stack.slice(0, this.$_currentIndex)\n\n            // 替换 href，但不做跳转\n            this.$_location.$$setHrefWithoutCheck(url)\n\n            this.$_stack.push({state, title, url: this.$_location.href})\n        }\n    }\n\n    replaceState(state = null, title, url) {\n        if (!url || typeof url !== 'string') return\n\n        if (this.$_checkOrigin(url)) {\n            // 同源才允许操作\n            if (title && typeof title === 'string') {\n                // 设置标题\n                wx.setNavigationBarTitle({title})\n            }\n\n            // 替换 href，但不做跳转\n            this.$_location.$$setHrefWithoutCheck(url)\n\n            this.$_stack.splice(this.$_currentIndex, 1, {state, title, url: this.$_location.href})\n        }\n    }\n}\n\nmodule.exports = History\n","const cache = _require('../util/cache')\n\nlet pageUrlRouteMap = null\n\nclass Miniprogram {\n    constructor(pageId) {\n        this.$_pageId = pageId\n        this.$_pageUrl = '' // 页面真实 url\n        this.$_subpackagesMap = {} // 分包名映射表\n    }\n\n    get window() {\n        return cache.getWindow(this.$_pageId) || null\n    }\n\n    get document() {\n        return cache.getDocument(this.$_pageId) || null\n    }\n\n    get config() {\n        return cache.getConfig()\n    }\n\n    get subpackagesMap() {\n        return this.$_subpackagesMap\n    }\n\n    /**\n     * 初始化\n     */\n    init(url) {\n        if (typeof url === 'string') this.$_pageUrl = url // 设置真实 url\n        const {\n            origin, entry, router, runtime = {}\n        } = cache.getConfig()\n        const subpackagesMap = runtime.subpackagesMap || {}\n\n        this.$_pageUrl = this.$_pageUrl || (origin + entry)\n        this.$_subpackagesMap = subpackagesMap\n        this.window.location.$$reset(this.$_pageUrl)\n        this.window.history.$$reset()\n\n        if (!pageUrlRouteMap) {\n            // 需要初始化页面 url - 小程序页面路由映射表\n            pageUrlRouteMap = {}\n\n            Object.keys(router).forEach(pageName => {\n                const regexpList = []\n\n                router[pageName].forEach(pathObj => {\n                    // 构造正则表达式\n                    const regexp = new RegExp(pathObj.regexp, pathObj.options)\n                    regexpList.push(regexp)\n                })\n\n                // 将每个页面的路由改造成函数，方便后续做匹配用\n                pageUrlRouteMap[pageName] = pathname => {\n                    for (const regexp of regexpList) {\n                        const parseRes = regexp.exec(pathname)\n                        regexp.lastIndex = 0\n\n                        if (parseRes) {\n                            // 匹配成功\n                            const packageName = subpackagesMap[pageName]\n                            return `/${packageName ? packageName + '/' : ''}pages/${pageName}/index`\n                        }\n                    }\n\n                    return null\n                }\n            })\n        }\n    }\n\n    /**\n     * 需要匹配对应路由的 route\n     */\n    getMatchRoute(pathname) {\n        const keys = Object.keys(pageUrlRouteMap)\n        for (const key of keys) {\n            const matchRes = pageUrlRouteMap[key](pathname)\n\n            if (matchRes) return matchRes // 匹配成功\n        }\n\n        return null\n    }\n\n    /**\n     * 判断是否 tabBar 页面\n     */\n    isTabBarPage(pageRoute) {\n        const {\n            runtime = {}\n        } = cache.getConfig()\n        const tabBarMap = runtime.tabBarMap || {}\n        return !!tabBarMap[pageRoute]\n    }\n}\n\nmodule.exports = Miniprogram\n","const Event = _require('../event/event')\r\n\r\nclass LocalStorage {\r\n    constructor(window) {\r\n        this.$_keys = []\r\n        this.$_window = window\r\n    }\r\n\r\n    /**\r\n     * 更新 storage 信息\r\n     */\r\n    $_updateInfo() {\r\n        try {\r\n            const info = wx.getStorageInfoSync()\r\n            const pages = getCurrentPages() || []\r\n            pages.forEach(page => {\r\n                if (page && page.window) {\r\n                    page.window.localStorage.$$keys = info.keys\r\n                }\r\n            })\r\n        } catch (err) {\r\n            console.warn('getStorageInfoSync fail')\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 触发 window 的 storage 事件\r\n     */\r\n    $_triggerStorage(key, newValue, oldValue, force) {\r\n        if (!force && newValue === oldValue) return\r\n\r\n        const pages = getCurrentPages() || []\r\n        pages.forEach(page => {\r\n            if (page && page.window && page.window !== this.$_window) {\r\n                page.window.$$trigger('storage', {\r\n                    event: new Event({\r\n                        name: 'storage',\r\n                        target: page.window,\r\n                        $$extra: {\r\n                            key,\r\n                            newValue,\r\n                            oldValue,\r\n                            storageArea: this,\r\n                            url: this.$_window.location.href,\r\n                        }\r\n                    })\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    set $$keys(keys) {\r\n        this.$_keys = keys\r\n    }\r\n\r\n    /**\r\n     * 对外属性和方法\r\n     */\r\n    get length() {\r\n        return this.$_keys && this.$_keys.length || 0\r\n    }\r\n\r\n    key(num) {\r\n        if (typeof num !== 'number' || !isFinite(num) || num < 0) return null\r\n\r\n        return this.$_keys[num] || null\r\n    }\r\n\r\n    getItem(key) {\r\n        if (!key || typeof key !== 'string') return null\r\n\r\n        return wx.getStorageSync(key) || null\r\n    }\r\n\r\n    setItem(key, data) {\r\n        if (!key || typeof key !== 'string') return\r\n        data = '' + data\r\n\r\n        const oldValue = wx.getStorageSync(key) || null\r\n\r\n        wx.setStorageSync(key, data)\r\n        this.$_updateInfo()\r\n        this.$_triggerStorage(key, data, oldValue)\r\n    }\r\n\r\n    removeItem(key) {\r\n        if (!key || typeof key !== 'string') return\r\n\r\n        const oldValue = wx.getStorageSync(key) || null\r\n\r\n        wx.removeStorageSync(key)\r\n        this.$_updateInfo()\r\n        this.$_triggerStorage(key, null, oldValue)\r\n    }\r\n\r\n    clear() {\r\n        wx.clearStorageSync()\r\n        this.$_updateInfo()\r\n        this.$_triggerStorage(null, null, null, true)\r\n    }\r\n}\r\n\r\nmodule.exports = LocalStorage\r\n","const Event = _require('../event/event')\r\n\r\nclass SessionStorage {\r\n    constructor(window) {\r\n        this.$_keys = []\r\n        this.$_map = {}\r\n        this.$_window = window\r\n    }\r\n\r\n    /**\r\n     * 触发 window 的 storage 事件\r\n     */\r\n    $_triggerStorage(key, newValue, oldValue, force) {\r\n        if (!force && newValue === oldValue) return\r\n\r\n        const pages = getCurrentPages() || []\r\n        pages.forEach(page => {\r\n            if (page && page.window && page.window !== this.$_window) {\r\n                page.window.$$trigger('storage', {\r\n                    event: new Event({\r\n                        name: 'storage',\r\n                        target: page.window,\r\n                        $$extra: {\r\n                            key,\r\n                            newValue,\r\n                            oldValue,\r\n                            storageArea: this,\r\n                            url: this.$_window.location.href,\r\n                        }\r\n                    })\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    /**\r\n     * 对外属性和方法\r\n     */\r\n    get length() {\r\n        return this.$_keys.length\r\n    }\r\n\r\n    key(num) {\r\n        if (typeof num !== 'number' || !isFinite(num) || num < 0) return null\r\n\r\n        return this.$_keys[num] || null\r\n    }\r\n\r\n    getItem(key) {\r\n        if (!key || typeof key !== 'string') return null\r\n\r\n        return this.$_map[key] || null\r\n    }\r\n\r\n    setItem(key, data) {\r\n        if (!key || typeof key !== 'string') return\r\n        data = '' + data\r\n\r\n        const oldValue = this.$_map[key] || null\r\n\r\n        this.$_map[key] = data\r\n\r\n        // 调整顺序\r\n        const index = this.$_keys.indexOf(key)\r\n        if (index >= 0) this.$_keys.splice(index, 1)\r\n        this.$_keys.push(key)\r\n\r\n        this.$_triggerStorage(key, data, oldValue)\r\n    }\r\n\r\n    removeItem(key) {\r\n        if (!key || typeof key !== 'string') return\r\n\r\n        const oldValue = this.$_map[key] || null\r\n\r\n        delete this.$_map[key]\r\n\r\n        // 删除 key\r\n        const index = this.$_keys.indexOf(key)\r\n        if (index >= 0) this.$_keys.splice(index, 1)\r\n\r\n        this.$_triggerStorage(key, null, oldValue)\r\n    }\r\n\r\n    clear() {\r\n        this.$_keys.forEach(key => {\r\n            delete this.$_map[key]\r\n        })\r\n\r\n        this.$_keys.length = 0\r\n\r\n        this.$_triggerStorage(null, null, null, true)\r\n    }\r\n}\r\n\r\nmodule.exports = SessionStorage\r\n","class Performance {\n    constructor(timeOrigin) {\n        this.$_timeOrigin = timeOrigin\n    }\n\n    /**\n     * 对外属性和方法\n     */\n    get navigation() {\n        console.warn('performance.navigation is not supported')\n        return null\n    }\n\n    get timing() {\n        console.warn('performance.timing is not supported')\n        return null\n    }\n\n    get timeOrigin() {\n        return this.$_timeOrigin\n    }\n\n    now() {\n        return +new Date() - this.$_timeOrigin\n    }\n}\n\nmodule.exports = Performance\n","const EventTarget = _require('../event/event-target')\n\nconst SUPPORT_METHOD = ['OPTIONS', 'GET', 'HEAD', 'POST', 'PUT', 'DELETE', 'TRACE', 'CONNECT']\nconst STATUS_TEXT_MAP = {\n    100: 'Continue',\n    101: 'Switching protocols',\n\n    200: 'OK',\n    201: 'Created',\n    202: 'Accepted',\n    203: 'Non-Authoritative Information',\n    204: 'No Content',\n    205: 'Reset Content',\n    206: 'Partial Content',\n\n    300: 'Multiple Choices',\n    301: 'Moved Permanently',\n    302: 'Found',\n    303: 'See Other',\n    304: 'Not Modified',\n    305: 'Use Proxy',\n    307: 'Temporary Redirect',\n\n    400: 'Bad Request',\n    401: 'Unauthorized',\n    402: 'Payment Required',\n    403: 'Forbidden',\n    404: 'Not Found',\n    405: 'Method Not Allowed',\n    406: 'Not Acceptable',\n    407: 'Proxy Authentication Required',\n    408: 'Request Timeout',\n    409: 'Conflict',\n    410: 'Gone',\n    411: 'Length Required',\n    412: 'Precondition Failed',\n    413: 'Request Entity Too Large',\n    414: 'Request-URI Too Long',\n    415: 'Unsupported Media Type',\n    416: 'Requested Range Not Suitable',\n    417: 'Expectation Failed',\n\n    500: 'Internal Server Error',\n    501: 'Not Implemented',\n    502: 'Bad Gateway',\n    503: 'Service Unavailable',\n    504: 'Gateway Timeout',\n    505: 'HTTP Version Not Supported',\n}\n\nclass XMLHttpRequest extends EventTarget {\n    constructor(window) {\n        super()\n\n        this.$_window = window\n        this.$_method = ''\n        this.$_url = ''\n        this.$_data = null\n        this.$_status = 0\n        this.$_statusText = ''\n        this.$_readyState = XMLHttpRequest.UNSENT\n        this.$_header = {\n            Accept: '*/*'\n        }\n        this.$_responseType = ''\n        this.$_resHeader = null\n        this.$_response = null\n        this.$_timeout = 0\n        this.$_startTime = null\n\n        this.$_requestTask = null\n        this.$_requestSuccess = this.$_requestSuccess.bind(this)\n        this.$_requestFail = this.$_requestFail.bind(this)\n        this.$_requestComplete = this.$_requestComplete.bind(this)\n    }\n\n    /**\n   * readyState 变化\n   */\n    $_callReadyStateChange(readyState) {\n        const hasChange = readyState !== this.$_readyState\n        this.$_readyState = readyState\n\n        if (hasChange) this.$$trigger('readystatechange')\n    }\n\n    /**\n   * 执行请求\n   */\n    $_callRequest() {\n        if (this.$_timeout) {\n            this.$_startTime = +new Date()\n\n            setTimeout(() => {\n                if (!this.$_status && this.$_readyState !== XMLHttpRequest.DONE) {\n                    // 超时\n                    if (this.$_requestTask) this.$_requestTask.abort()\n                    this.$_callReadyStateChange(XMLHttpRequest.DONE)\n                    this.$$trigger('timeout')\n                }\n            }, this.$_timeout)\n        }\n\n        // 重置各种状态\n        this.$_status = 0\n        this.$_statusText = ''\n        this.$_readyState = XMLHttpRequest.OPENED\n        this.$_resHeader = null\n        this.$_response = null\n\n        // 头信息\n        const header = Object.assign({}, this.$_header)\n        if (this.$_window) {\n            header.cookie = this.$_window.document.$$cookie\n        }\n\n        // 补完 url\n        let url = this.$_url\n        url = url.indexOf('//') === -1 ? this.$_window.location.origin + url : url\n\n        this.$_requestTask = wx.request({\n            url,\n            data: this.$_data || {},\n            header,\n            method: this.$_method,\n            dataType: this.$_responseType === 'json' ? 'json' : 'text',\n            responseType: this.$_responseType === 'arraybuffer' ? 'arraybuffer' : 'text',\n            success: this.$_requestSuccess,\n            fail: this.$_requestFail,\n            complete: this.$_requestComplete,\n        })\n    }\n\n    /**\n   * 请求成功\n   */\n    $_requestSuccess({data, statusCode, header}) {\n        this.$_status = statusCode\n        this.$_resHeader = header\n\n        this.$_callReadyStateChange(XMLHttpRequest.HEADERS_RECEIVED)\n\n        // 处理 set-cookie\n        if (this.$_window) {\n            const setCookie = header['Set-Cookie']\n\n            if (setCookie && typeof setCookie === 'string') {\n                this.$_window.document.$$setCookie(setCookie)\n            }\n        }\n\n        // 处理返回数据\n        if (data) {\n            this.$_callReadyStateChange(XMLHttpRequest.LOADING)\n            this.$$trigger('loadstart')\n            this.$_response = data\n            this.$$trigger('loadend')\n        }\n    }\n\n    /**\n   * 请求失败\n   */\n    $_requestFail({errMsg}) {\n        this.$_status = 0\n        this.$_statusText = errMsg\n\n        this.$$trigger('error')\n    }\n\n    /**\n   * 请求完成\n   */\n    $_requestComplete() {\n        this.$_startTime = null\n        this.$_requestTask = null\n        this.$_callReadyStateChange(XMLHttpRequest.DONE)\n\n        if (this.$_status) {\n            this.$$trigger('load')\n        }\n    }\n\n    /**\n   * 对外属性和方法\n   */\n    get timeout() {\n        return this.$_timeout\n    }\n\n    set timeout(timeout) {\n        if (typeof timeout !== 'number' || !isFinite(timeout) || timeout <= 0) return\n\n        this.$_timeout = timeout\n    }\n\n    get status() {\n        return this.$_status\n    }\n\n    get statusText() {\n        if (this.$_readyState === XMLHttpRequest.UNSENT || this.$_readyState === XMLHttpRequest.OPENED) return ''\n\n        return STATUS_TEXT_MAP[this.$_status + ''] || this.$_statusText || ''\n    }\n\n    get readyState() {\n        return this.$_readyState\n    }\n\n    get responseType() {\n        return this.$_responseType\n    }\n\n    set responseType(value) {\n        if (typeof value !== 'string') return\n\n        this.$_responseType = value\n    }\n\n    get responseText() {\n        if (!this.$_responseType || this.$_responseType === 'text') {\n            return this.$_response\n        }\n\n        return null\n    }\n\n    get response() {\n        return this.$_response\n    }\n\n    abort() {\n        if (this.$_requestTask) {\n            this.$_requestTask.abort()\n            this.$$trigger('abort')\n        }\n    }\n\n    getAllResponseHeaders() {\n        if (this.$_readyState === XMLHttpRequest.UNSENT || this.$_readyState === XMLHttpRequest.OPENED || !this.$_resHeader) return ''\n\n        return Object.keys(this.$_resHeader)\n            .map(key => `${key}: ${this.$_resHeader[key]}`)\n            .join('\\r\\n')\n    }\n\n    getResponseHeader(name) {\n        if (this.$_readyState === XMLHttpRequest.UNSENT || this.$_readyState === XMLHttpRequest.OPENED || !this.$_resHeader) return null\n\n        // 处理大小写不敏感\n        const key = Object.keys(this.$_resHeader).find(item => item.toLowerCase() === name.toLowerCase())\n        const value = key ? this.$_resHeader[key] : null\n\n        return typeof value === 'string' ? value : null\n    }\n\n    open(method, url) {\n        if (typeof method === 'string') method = method.toUpperCase()\n\n        if (SUPPORT_METHOD.indexOf(method) < 0) return\n        if (!url || typeof url !== 'string') return\n\n        this.$_method = method\n        this.$_url = url\n\n        this.$_callReadyStateChange(XMLHttpRequest.OPENED)\n    }\n\n    setRequestHeader(header, value) {\n        if (typeof header === 'string' && typeof value === 'string') {\n            this.$_header[header] = value\n        }\n    }\n\n    send(data) {\n        if (this.$_readyState !== XMLHttpRequest.OPENED) return\n\n        this.$_data = data\n        this.$_callRequest()\n    }\n}\n\nXMLHttpRequest.UNSENT = 0\nXMLHttpRequest.OPENED = 1\nXMLHttpRequest.HEADERS_RECEIVED = 2\nXMLHttpRequest.LOADING = 3\nXMLHttpRequest.DONE = 4\n\nmodule.exports = XMLHttpRequest\n"]}